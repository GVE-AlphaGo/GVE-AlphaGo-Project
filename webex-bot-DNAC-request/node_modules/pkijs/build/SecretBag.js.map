{"version":3,"sources":["../src/SecretBag.js"],"names":["SecretBag","constructor","parameters","secretTypeId","defaultValues","secretValue","fromSchema","schema","memberName","asn1js","Any","Error","compareWithDefault","memberValue","names","Sequence","name","blockName","value","ObjectIdentifier","id","Constructed","idBlock","tagClass","tagNumber","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class SecretBag\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SecretBag class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc secretTypeId\r\n\t\t */\r\n\t\tthis.secretTypeId = getParametersValue(parameters, \"secretTypeId\", SecretBag.defaultValues(\"secretTypeId\"));\r\n\t\t/**\r\n\t\t * @type {*}\r\n\t\t * @desc secretValue\r\n\t\t */\r\n\t\tthis.secretValue = getParametersValue(parameters, \"secretValue\", SecretBag.defaultValues(\"secretValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"secretTypeId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"secretValue\":\r\n\t\t\t\treturn (new asn1js.Any());\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SecretBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"secretTypeId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"secretValue\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SecretBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SecretBag ::= SEQUENCE {\r\n\t *    secretTypeId BAG-TYPE.&id ({SecretTypes}),\r\n\t *    secretValue  [0] EXPLICIT BAG-TYPE.&Type ({SecretTypes}{@secretTypeId})\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [id]\r\n\t\t * @property {string} [value]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.id || \"id\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Any({ name: (names.value || \"value\") })] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"secretTypeId\",\r\n\t\t\t\"secretValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSecretBag.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tid: \"secretTypeId\",\r\n\t\t\t\t\tvalue: \"secretValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SecretBag\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.secretTypeId = asn1.result.secretTypeId.valueBlock.toString();\r\n\t\tthis.secretValue = asn1.result.secretValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.secretTypeId }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.secretValue.toSchema()]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tsecretTypeId: this.secretTypeId,\r\n\t\t\tsecretValue: this.secretValue.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"SecretBag.js"}