{"version":3,"sources":["../src/TimeStampResp.js"],"names":["TimeStampResp","constructor","parameters","status","defaultValues","timeStampToken","fromSchema","schema","memberName","PKIStatusInfo","ContentInfo","Error","compareWithDefault","memberValue","contentType","content","asn1js","Any","names","Sequence","name","blockName","value","optional","asn1","compareSchema","verified","result","toSchema","outputArray","push","toJSON","_object","sign","privateKey","hashAlgorithm","Promise","reject","signed","verify","verificationParameters","signer","trustedCerts","data","ArrayBuffer","SignedData"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport PKIStatusInfo from \"./PKIStatusInfo.js\";\r\nimport ContentInfo from \"./ContentInfo.js\";\r\nimport SignedData from \"./SignedData.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3161\r\n */\r\nexport default class TimeStampResp\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for TimeStampResp class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {PKIStatusInfo}\r\n\t\t * @desc status\r\n\t\t */\r\n\t\tthis.status = getParametersValue(parameters, \"status\", TimeStampResp.defaultValues(\"status\"));\r\n\r\n\t\tif(\"timeStampToken\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ContentInfo}\r\n\t\t\t * @desc timeStampToken\r\n\t\t\t */\r\n\t\t\tthis.timeStampToken = getParametersValue(parameters, \"timeStampToken\", TimeStampResp.defaultValues(\"timeStampToken\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn new PKIStatusInfo();\r\n\t\t\tcase \"timeStampToken\":\r\n\t\t\t\treturn new ContentInfo();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TimeStampResp class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn ((PKIStatusInfo.compareWithDefault(\"status\", memberValue.status)) &&\r\n\t\t\t\t\t\t((\"statusStrings\" in memberValue) === false) &&\r\n\t\t\t\t\t\t((\"failInfo\" in memberValue) === false));\r\n\t\t\tcase \"timeStampToken\":\r\n\t\t\t\treturn ((memberValue.contentType === \"\") &&\r\n\t\t\t\t\t\t(memberValue.content instanceof asn1js.Any));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TimeStampResp class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * TimeStampResp ::= SEQUENCE  {\r\n\t *    status                  PKIStatusInfo,\r\n\t *    timeStampToken          TimeStampToken     OPTIONAL  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [status]\r\n\t\t * @property {string} [timeStampToken]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"TimeStampResp\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tPKIStatusInfo.schema(names.status || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TimeStampResp.status\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tContentInfo.schema(names.timeStampToken || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TimeStampResp.timeStampToken\",\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"TimeStampResp.status\",\r\n\t\t\t\"TimeStampResp.timeStampToken\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tTimeStampResp.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TimeStampResp\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.status = new PKIStatusInfo({ schema: asn1.result[\"TimeStampResp.status\"] });\r\n\t\tif(\"TimeStampResp.timeStampToken\" in asn1.result)\r\n\t\t\tthis.timeStampToken = new ContentInfo({ schema: asn1.result[\"TimeStampResp.timeStampToken\"] });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.status.toSchema());\r\n\t\tif(\"timeStampToken\" in this)\r\n\t\t\toutputArray.push(this.timeStampToken.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tstatus: this.status\r\n\t\t};\r\n\r\n\t\tif(\"timeStampToken\" in this)\r\n\t\t\t_object.timeStampToken = this.timeStampToken.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Sign current TSP Response\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm)\r\n\t{\r\n\t\t//region Check that \"timeStampToken\" exists\r\n\t\tif((\"timeStampToken\" in this) === false)\r\n\t\t\treturn Promise.reject(\"timeStampToken is absent in TSP response\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check that \"timeStampToken\" has a right internal format\r\n\t\tif(this.timeStampToken.contentType !== \"1.2.840.113549.1.7.2\") // Must be a CMS signed data\r\n\t\t\treturn Promise.reject(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Sign internal signed data value\r\n\t\tconst signed = new ContentInfo({ schema: this.timeStampToken.content });\r\n\r\n\t\treturn signed.sign(privateKey, 0, hashAlgorithm);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current TSP Response\r\n\t * @param {Object} verificationParameters Input parameters for verification\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(verificationParameters = { signer: 0, trustedCerts: [], data: new ArrayBuffer(0) })\r\n\t{\r\n\t\t//region Check that \"timeStampToken\" exists\r\n\t\tif((\"timeStampToken\" in this) === false)\r\n\t\t\treturn Promise.reject(\"timeStampToken is absent in TSP response\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check that \"timeStampToken\" has a right internal format\r\n\t\tif(this.timeStampToken.contentType !== \"1.2.840.113549.1.7.2\") // Must be a CMS signed data\r\n\t\t\treturn Promise.reject(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Verify internal signed data value\r\n\t\tconst signed = new SignedData({ schema: this.timeStampToken.content });\r\n\r\n\t\treturn signed.verify(verificationParameters);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"TimeStampResp.js"}