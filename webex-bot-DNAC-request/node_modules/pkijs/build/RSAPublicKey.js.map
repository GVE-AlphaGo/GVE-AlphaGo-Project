{"version":3,"sources":["../src/RSAPublicKey.js"],"names":["RSAPublicKey","constructor","parameters","modulus","defaultValues","publicExponent","fromSchema","schema","fromJSON","json","memberName","asn1js","Integer","Error","names","Sequence","name","blockName","value","asn1","compareSchema","verified","result","convertFromDER","toSchema","convertToDER","toJSON","n","valueBlock","valueHex","e","array","slice","Math","pow","byteLength"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, nearestPowerOf2, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3447\r\n */\r\nexport default class RSAPublicKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RSAPublicKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {Integer} [modulus]\r\n\t * @property {Integer} [publicExponent]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc Modulus part of RSA public key\r\n\t\t */\r\n\t\tthis.modulus = getParametersValue(parameters, \"modulus\", RSAPublicKey.defaultValues(\"modulus\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc Public exponent of RSA public key\r\n\t\t */\r\n\t\tthis.publicExponent = getParametersValue(parameters, \"publicExponent\", RSAPublicKey.defaultValues(\"publicExponent\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"modulus\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"publicExponent\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RSAPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RSAPublicKey ::= Sequence {\r\n\t *    modulus           Integer,  -- n\r\n\t *    publicExponent    Integer   -- e\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} utcTimeName Name for \"utcTimeName\" choice\r\n\t\t * @property {string} generalTimeName Name for \"generalTimeName\" choice\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.modulus || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.publicExponent || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"modulus\",\r\n\t\t\t\"publicExponent\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRSAPublicKey.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tmodulus: \"modulus\",\r\n\t\t\t\t\tpublicExponent: \"publicExponent\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RSAPublicKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.modulus = asn1.result.modulus.convertFromDER(256);\r\n\t\tthis.publicExponent = asn1.result.publicExponent;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.modulus.convertToDER(),\r\n\t\t\t\tthis.publicExponent\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tn: toBase64(arrayBufferToString(this.modulus.valueBlock.valueHex), true, true, true),\r\n\t\t\te: toBase64(arrayBufferToString(this.publicExponent.valueBlock.valueHex), true, true, true)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"n\" in json)\r\n\t\t{\r\n\t\t\tconst array = stringToArrayBuffer(fromBase64(json.n, true));\r\n\t\t\tthis.modulus = new asn1js.Integer({ valueHex: array.slice(0, Math.pow(2, nearestPowerOf2(array.byteLength))) });\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"n\\\"\");\r\n\r\n\t\tif(\"e\" in json)\r\n\t\t\tthis.publicExponent = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.e, true)).slice(0, 3) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"e\\\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"RSAPublicKey.js"}