{"version":3,"sources":["../src/CertificatePolicies.js"],"names":["CertificatePolicies","constructor","parameters","certificatePolicies","defaultValues","fromSchema","schema","memberName","Error","names","asn1js","Sequence","name","blockName","value","Repeated","PolicyInformation","asn1","compareSchema","verified","Array","from","result","element","toSchema","toJSON"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AACA;;AACA;;;AAGe,MAAMA,mBAAN,CACf;AACC;;AACA;;;;;AAKAC,EAAAA,WAAW,CAACC,UAAU,GAAG,EAAd,EACX;AACC;;AACA;;;;AAIA,SAAKC,mBAAL,GAA2B,iCAAmBD,UAAnB,EAA+B,qBAA/B,EAAsDF,mBAAmB,CAACI,aAApB,CAAkC,qBAAlC,CAAtD,CAA3B,CAND,CAOC;AAEA;;AACA,QAAG,YAAYF,UAAf,EACC,KAAKG,UAAL,CAAgBH,UAAU,CAACI,MAA3B,EAXF,CAYC;AACA,GArBF,CAsBC;;AACA;;;;;;AAIA,SAAOF,aAAP,CAAqBG,UAArB,EACA;AACC,YAAOA,UAAP;AAEC,WAAK,qBAAL;AACC,eAAO,EAAP;;AACD;AACC,cAAM,IAAIC,KAAJ,CAAW,sDAAqDD,UAAW,EAA3E,CAAN;AALF;AAOA,GApCF,CAqCC;;AACA;;;;;;;;;;;;;AAWA,SAAOD,MAAP,CAAcJ,UAAU,GAAG,EAA3B,EACA;AACC;;;;;AAKA,UAAMO,KAAK,GAAG,iCAAmBP,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;AAEA,WAAQ,IAAIQ,MAAM,CAACC,QAAX,CAAoB;AAC3BC,MAAAA,IAAI,EAAGH,KAAK,CAACI,SAAN,IAAmB,EADC;AAE3BC,MAAAA,KAAK,EAAE,CACN,IAAIJ,MAAM,CAACK,QAAX,CAAoB;AACnBH,QAAAA,IAAI,EAAGH,KAAK,CAACN,mBAAN,IAA6B,EADjB;AAEnBW,QAAAA,KAAK,EAAEE,2BAAkBV,MAAlB;AAFY,OAApB,CADM;AAFoB,KAApB,CAAR;AASA,GAnEF,CAoEC;;AACA;;;;;;AAIAD,EAAAA,UAAU,CAACC,MAAD,EACV;AACC;AACA,6BAAWA,MAAX,EAAmB,CAClB,qBADkB,CAAnB,EAFD,CAKC;AAEA;;AACA,UAAMW,IAAI,GAAGP,MAAM,CAACQ,aAAP,CAAqBZ,MAArB,EACZA,MADY,EAEZN,mBAAmB,CAACM,MAApB,CAA2B;AAC1BG,MAAAA,KAAK,EAAE;AACNN,QAAAA,mBAAmB,EAAE;AADf;AADmB,KAA3B,CAFY,CAAb;AASA,QAAGc,IAAI,CAACE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIX,KAAJ,CAAU,6EAAV,CAAN,CAlBF,CAmBC;AAEA;;AACA,SAAKL,mBAAL,GAA2BiB,KAAK,CAACC,IAAN,CAAWJ,IAAI,CAACK,MAAL,CAAYnB,mBAAvB,EAA4CoB,OAAO,IAAI,IAAIP,0BAAJ,CAAsB;AAAEV,MAAAA,MAAM,EAAEiB;AAAV,KAAtB,CAAvD,CAA3B,CAtBD,CAuBC;AACA,GAlGF,CAmGC;;AACA;;;;;;AAIAC,EAAAA,QAAQ,GACR;AACC;AACA,WAAQ,IAAId,MAAM,CAACC,QAAX,CAAoB;AAC3BG,MAAAA,KAAK,EAAEM,KAAK,CAACC,IAAN,CAAW,KAAKlB,mBAAhB,EAAqCoB,OAAO,IAAIA,OAAO,CAACC,QAAR,EAAhD;AADoB,KAApB,CAAR,CAFD,CAKC;AACA,GA/GF,CAgHC;;AACA;;;;;;AAIAC,EAAAA,MAAM,GACN;AACC,WAAO;AACNtB,MAAAA,mBAAmB,EAAEiB,KAAK,CAACC,IAAN,CAAW,KAAKlB,mBAAhB,EAAqCoB,OAAO,IAAIA,OAAO,CAACE,MAAR,EAAhD;AADf,KAAP;AAGA,GA1HF,CA2HC;;;AA3HD,C,CA6HA","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport PolicyInformation from \"./PolicyInformation.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class CertificatePolicies\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertificatePolicies class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<PolicyInformation>}\r\n\t\t * @desc certificatePolicies\r\n\t\t */\r\n\t\tthis.certificatePolicies = getParametersValue(parameters, \"certificatePolicies\", CertificatePolicies.defaultValues(\"certificatePolicies\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certificatePolicies\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificatePolicies class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * certificatePolicies ::= SEQUENCE SIZE (1..MAX) OF PolicyInformation\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [certificatePolicies]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.certificatePolicies || \"\"),\r\n\t\t\t\t\tvalue: PolicyInformation.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"certificatePolicies\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificatePolicies.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcertificatePolicies: \"certificatePolicies\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertificatePolicies\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.certificatePolicies = Array.from(asn1.result.certificatePolicies, element => new PolicyInformation({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.certificatePolicies, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcertificatePolicies: Array.from(this.certificatePolicies, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"CertificatePolicies.js"}