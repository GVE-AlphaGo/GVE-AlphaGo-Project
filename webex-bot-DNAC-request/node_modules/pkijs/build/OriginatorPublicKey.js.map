{"version":3,"sources":["../src/OriginatorPublicKey.js"],"names":["OriginatorPublicKey","constructor","parameters","algorithm","defaultValues","publicKey","fromSchema","schema","memberName","AlgorithmIdentifier","asn1js","BitString","Error","compareWithDefault","memberValue","isEqual","names","Sequence","name","blockName","value","asn1","compareSchema","verified","result","toSchema","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class OriginatorPublicKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OriginatorPublicKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc algorithm\r\n\t\t */\r\n\t\tthis.algorithm = getParametersValue(parameters, \"algorithm\", OriginatorPublicKey.defaultValues(\"algorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc publicKey\r\n\t\t */\r\n\t\tthis.publicKey = getParametersValue(parameters, \"publicKey\", OriginatorPublicKey.defaultValues(\"publicKey\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"publicKey\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OriginatorPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithm\":\r\n\t\t\tcase \"publicKey\":\r\n\t\t\t\treturn (memberValue.isEqual(OriginatorPublicKey.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OriginatorPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OriginatorPublicKey ::= SEQUENCE {\r\n\t *    algorithm AlgorithmIdentifier,\r\n\t *    publicKey BIT STRING }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [algorithm]\r\n\t\t * @property {string} [publicKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.algorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.publicKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"algorithm\",\r\n\t\t\t\"publicKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOriginatorPublicKey.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"algorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tpublicKey: \"publicKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OriginatorPublicKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.algorithm = new AlgorithmIdentifier({ schema: asn1.result.algorithm });\r\n\t\tthis.publicKey = asn1.result.publicKey;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.algorithm.toSchema(),\r\n\t\t\t\tthis.publicKey\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\talgorithm: this.algorithm.toJSON(),\r\n\t\t\tpublicKey: this.publicKey.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"OriginatorPublicKey.js"}