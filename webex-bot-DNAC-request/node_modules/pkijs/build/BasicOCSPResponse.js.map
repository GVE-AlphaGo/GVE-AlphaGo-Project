{"version":3,"sources":["../src/BasicOCSPResponse.js"],"names":["BasicOCSPResponse","constructor","parameters","tbsResponseData","defaultValues","signatureAlgorithm","signature","certs","fromSchema","schema","memberName","ResponseData","AlgorithmIdentifier","asn1js","BitString","Error","compareWithDefault","memberValue","comparisonResult","tbs","responderID","producedAt","responses","responseExtensions","algorithmId","isEqual","length","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","Certificate","asn1","compareSchema","verified","result","Array","from","element","toSchema","outputArray","push","toJSON","_object","getCertificateStatus","certificate","issuerCertificate","sequence","Promise","resolve","isForCertificate","status","hashesObject","certIDs","certIDPromises","response","hashAlgorithm","certID","reject","CertID","createForCertificate","then","all","id","certStatus","isConstructed","ex","sign","privateKey","engine","subtle","getSignatureParameters","toBER","signWithPrivateKey","valueHex","verify","signerCert","certIndex","trustedCerts","_this","checkCA","cert","issuer","serialNumber","isCA","extensions","extension","extnID","parsedValue","cA","crypto","RelativeDistinguishedNames","entries","index","subject","OctetString","digest","Uint8Array","subjectPublicKeyInfo","subjectPublicKey","valueBlock","results","promiseResults","additionalCerts","promiseResult","certChain","CertificateChainValidationEngine","verificationResult","error","Object","resultMessage","promiseError","verifyWithPublicKey"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AACA;;AACA;;;AAGe,MAAMA,iBAAN,CACf;AACC;;AACA;;;;;AAKAC,EAAAA,WAAW,CAACC,UAAU,GAAG,EAAd,EACX;AACC;;AACA;;;;AAIA,SAAKC,eAAL,GAAuB,iCAAmBD,UAAnB,EAA+B,iBAA/B,EAAkDF,iBAAiB,CAACI,aAAlB,CAAgC,iBAAhC,CAAlD,CAAvB;AACA;;;;;AAIA,SAAKC,kBAAL,GAA0B,iCAAmBH,UAAnB,EAA+B,oBAA/B,EAAqDF,iBAAiB,CAACI,aAAlB,CAAgC,oBAAhC,CAArD,CAA1B;AACA;;;;;AAIA,SAAKE,SAAL,GAAiB,iCAAmBJ,UAAnB,EAA+B,WAA/B,EAA4CF,iBAAiB,CAACI,aAAlB,CAAgC,WAAhC,CAA5C,CAAjB;AAEA,QAAG,WAAWF,UAAd;AACC;;;;AAIA,WAAKK,KAAL,GAAa,iCAAmBL,UAAnB,EAA+B,OAA/B,EAAwCF,iBAAiB,CAACI,aAAlB,CAAgC,OAAhC,CAAxC,CAAb,CAvBF,CAwBC;AAEA;;AACA,QAAG,YAAYF,UAAf,EACC,KAAKM,UAAL,CAAgBN,UAAU,CAACO,MAA3B,EA5BF,CA6BC;AACA,GAtCF,CAuCC;;AACA;;;;;;AAIA,SAAOL,aAAP,CAAqBM,UAArB,EACA;AACC,YAAOA,UAAP;AAEC,WAAK,iBAAL;AACC,eAAO,IAAIC,qBAAJ,EAAP;;AACD,WAAK,oBAAL;AACC,eAAO,IAAIC,4BAAJ,EAAP;;AACD,WAAK,WAAL;AACC,eAAO,IAAIC,MAAM,CAACC,SAAX,EAAP;;AACD,WAAK,OAAL;AACC,eAAO,EAAP;;AACD;AACC,cAAM,IAAIC,KAAJ,CAAW,oDAAmDL,UAAW,EAAzE,CAAN;AAXF;AAaA,GA3DF,CA4DC;;AACA;;;;;;;AAKA,SAAOM,kBAAP,CAA0BN,UAA1B,EAAsCO,WAAtC,EACA;AACC,YAAOP,UAAP;AAEC,WAAK,MAAL;AACC;AACC;AACA,cAAIQ,gBAAgB,GAAKP,sBAAaK,kBAAb,CAAgC,KAAhC,EAAuCC,WAAW,CAACE,GAAnD,CAAD,IACvBR,sBAAaK,kBAAb,CAAgC,aAAhC,EAA+CC,WAAW,CAACG,WAA3D,CADuB,IAEvBT,sBAAaK,kBAAb,CAAgC,YAAhC,EAA8CC,WAAW,CAACI,UAA1D,CAFuB,IAGvBV,sBAAaK,kBAAb,CAAgC,WAAhC,EAA6CC,WAAW,CAACK,SAAzD,CAHD;;AAKA,cAAG,wBAAwBL,WAA3B,EACCC,gBAAgB,GAAGA,gBAAgB,IAAKP,sBAAaK,kBAAb,CAAgC,oBAAhC,EAAsDC,WAAW,CAACM,kBAAlE,CAAxC;AAED,iBAAOL,gBAAP;AACA;;AACF,WAAK,oBAAL;AACC,eAASD,WAAW,CAACO,WAAZ,KAA4B,EAA7B,IAAsC,qBAAqBP,WAAtB,KAAuC,KAApF;;AACD,WAAK,WAAL;AACC,eAAQA,WAAW,CAACQ,OAAZ,CAAoBzB,iBAAiB,CAACI,aAAlB,CAAgCM,UAAhC,CAApB,CAAR;;AACD,WAAK,OAAL;AACC,eAAQO,WAAW,CAACS,MAAZ,KAAuB,CAA/B;;AACD;AACC,cAAM,IAAIX,KAAJ,CAAW,oDAAmDL,UAAW,EAAzE,CAAN;AAtBF;AAwBA,GA5FF,CA6FC;;AACA;;;;;;;;;;;;;;;;;AAeA,SAAOD,MAAP,CAAcP,UAAU,GAAG,EAA3B,EACA;AACC;;;;;;;;AAQA,UAAMyB,KAAK,GAAG,iCAAmBzB,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;AAEA,WAAQ,IAAIW,MAAM,CAACe,QAAX,CAAoB;AAC3BC,MAAAA,IAAI,EAAGF,KAAK,CAACG,SAAN,IAAmB,mBADC;AAE3BC,MAAAA,KAAK,EAAE,CACNpB,sBAAaF,MAAb,CAAoBkB,KAAK,CAACxB,eAAN,IAAyB;AAC5CwB,QAAAA,KAAK,EAAE;AACNG,UAAAA,SAAS,EAAE;AADL;AADqC,OAA7C,CADM,EAMNlB,6BAAoBH,MAApB,CAA2BkB,KAAK,CAACtB,kBAAN,IAA4B;AACtDsB,QAAAA,KAAK,EAAE;AACNG,UAAAA,SAAS,EAAE;AADL;AAD+C,OAAvD,CANM,EAWN,IAAIjB,MAAM,CAACC,SAAX,CAAqB;AAAEe,QAAAA,IAAI,EAAGF,KAAK,CAACrB,SAAN,IAAmB;AAA5B,OAArB,CAXM,EAYN,IAAIO,MAAM,CAACmB,WAAX,CAAuB;AACtBC,QAAAA,QAAQ,EAAE,IADY;AAEtBC,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AACK;AACbC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAFa;AAMtBL,QAAAA,KAAK,EAAE,CACN,IAAIlB,MAAM,CAACe,QAAX,CAAoB;AACnBG,UAAAA,KAAK,EAAE,CAAC,IAAIlB,MAAM,CAACwB,QAAX,CAAoB;AAC3BR,YAAAA,IAAI,EAAE,yBADqB;AAE3BE,YAAAA,KAAK,EAAEO,qBAAY7B,MAAZ,CAAmBkB,KAAK,CAACpB,KAAN,IAAe,EAAlC;AAFoB,WAApB,CAAD;AADY,SAApB,CADM;AANe,OAAvB,CAZM;AAFoB,KAApB,CAAR;AA+BA,GAxJF,CAyJC;;AACA;;;;;;AAIAC,EAAAA,UAAU,CAACC,MAAD,EACV;AACC;AACA,6BAAWA,MAAX,EAAmB,CAClB,mCADkB,EAElB,sCAFkB,EAGlB,6BAHkB,EAIlB,yBAJkB,CAAnB,EAFD,CAQC;AAEA;;AACA,UAAM8B,IAAI,GAAG1B,MAAM,CAAC2B,aAAP,CAAqB/B,MAArB,EACZA,MADY,EAEZT,iBAAiB,CAACS,MAAlB,EAFY,CAAb;AAKA,QAAG8B,IAAI,CAACE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAI1B,KAAJ,CAAU,2EAAV,CAAN,CAjBF,CAkBC;AAEA;;AACA,SAAKZ,eAAL,GAAuB,IAAIQ,qBAAJ,CAAiB;AAAEF,MAAAA,MAAM,EAAE8B,IAAI,CAACG,MAAL,CAAY,mCAAZ;AAAV,KAAjB,CAAvB;AACA,SAAKrC,kBAAL,GAA0B,IAAIO,4BAAJ,CAAwB;AAAEH,MAAAA,MAAM,EAAE8B,IAAI,CAACG,MAAL,CAAY,sCAAZ;AAAV,KAAxB,CAA1B;AACA,SAAKpC,SAAL,GAAiBiC,IAAI,CAACG,MAAL,CAAY,6BAAZ,CAAjB;AAEA,QAAG,6BAA6BH,IAAI,CAACG,MAArC,EACC,KAAKnC,KAAL,GAAaoC,KAAK,CAACC,IAAN,CAAWL,IAAI,CAACG,MAAL,CAAY,yBAAZ,CAAX,EAAmDG,OAAO,IAAI,IAAIP,oBAAJ,CAAgB;AAAE7B,MAAAA,MAAM,EAAEoC;AAAV,KAAhB,CAA9D,CAAb,CA1BF,CA2BC;AACA,GA3LF,CA4LC;;AACA;;;;;;AAIAC,EAAAA,QAAQ,GACR;AACC;AACA,UAAMC,WAAW,GAAG,EAApB;AAEAA,IAAAA,WAAW,CAACC,IAAZ,CAAiB,KAAK7C,eAAL,CAAqB2C,QAArB,EAAjB;AACAC,IAAAA,WAAW,CAACC,IAAZ,CAAiB,KAAK3C,kBAAL,CAAwByC,QAAxB,EAAjB;AACAC,IAAAA,WAAW,CAACC,IAAZ,CAAiB,KAAK1C,SAAtB,EAND,CAQC;;AACA,QAAG,WAAW,IAAd,EACA;AACCyC,MAAAA,WAAW,CAACC,IAAZ,CAAiB,IAAInC,MAAM,CAACmB,WAAX,CAAuB;AACvCE,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AACK;AACbC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAD8B;AAKvCL,QAAAA,KAAK,EAAE,CACN,IAAIlB,MAAM,CAACe,QAAX,CAAoB;AACnBG,UAAAA,KAAK,EAAEY,KAAK,CAACC,IAAN,CAAW,KAAKrC,KAAhB,EAAuBsC,OAAO,IAAIA,OAAO,CAACC,QAAR,EAAlC;AADY,SAApB,CADM;AALgC,OAAvB,CAAjB;AAWA,KAtBF,CAuBC;AACA;AAEA;;;AACA,WAAQ,IAAIjC,MAAM,CAACe,QAAX,CAAoB;AAC3BG,MAAAA,KAAK,EAAEgB;AADoB,KAApB,CAAR,CA3BD,CA8BC;AACA,GAjOF,CAkOC;;AACA;;;;;;AAIAE,EAAAA,MAAM,GACN;AACC,UAAMC,OAAO,GAAG;AACf/C,MAAAA,eAAe,EAAE,KAAKA,eAAL,CAAqB8C,MAArB,EADF;AAEf5C,MAAAA,kBAAkB,EAAE,KAAKA,kBAAL,CAAwB4C,MAAxB,EAFL;AAGf3C,MAAAA,SAAS,EAAE,KAAKA,SAAL,CAAe2C,MAAf;AAHI,KAAhB;AAMA,QAAG,WAAW,IAAd,EACCC,OAAO,CAAC3C,KAAR,GAAgBoC,KAAK,CAACC,IAAN,CAAW,KAAKrC,KAAhB,EAAuBsC,OAAO,IAAIA,OAAO,CAACI,MAAR,EAAlC,CAAhB;AAED,WAAOC,OAAP;AACA,GAnPF,CAoPC;;AACA;;;;;;;;AAMAC,EAAAA,oBAAoB,CAACC,WAAD,EAAcC,iBAAd,EACpB;AACC;AACA,QAAIC,QAAQ,GAAGC,OAAO,CAACC,OAAR,EAAf;AAEA,UAAMd,MAAM,GAAG;AACde,MAAAA,gBAAgB,EAAE,KADJ;AAEdC,MAAAA,MAAM,EAAE,CAFM,CAEJ;;AAFI,KAAf;AAKA,UAAMC,YAAY,GAAG,EAArB;AAEA,UAAMC,OAAO,GAAG,EAAhB;AACA,UAAMC,cAAc,GAAG,EAAvB,CAZD,CAaC;AAEA;;AAfD;AAAA;AAAA;;AAAA;AAgBC,2BAAsB,KAAK1D,eAAL,CAAqBmB,SAA3C,8HACA;AAAA,cADUwC,QACV;AACC,cAAMC,aAAa,GAAG,+BAAkBD,QAAQ,CAACE,MAAT,CAAgBD,aAAhB,CAA8BvC,WAAhD,CAAtB;AACA,YAAI,UAAUuC,aAAX,KAA8B,KAAjC,EACC,OAAOR,OAAO,CAACU,MAAR,CAAgB,mCAAkCH,QAAQ,CAACE,MAAT,CAAgBD,aAAhB,CAA8BvC,WAAY,EAA5F,CAAP;;AAED,YAAIuC,aAAa,CAAClC,IAAd,IAAsB8B,YAAvB,KAAyC,KAA5C,EACA;AACCA,UAAAA,YAAY,CAACI,aAAa,CAAClC,IAAf,CAAZ,GAAmC,CAAnC;AAEA,gBAAMmC,MAAM,GAAG,IAAIE,eAAJ,EAAf;AAEAN,UAAAA,OAAO,CAACZ,IAAR,CAAagB,MAAb;AACAH,UAAAA,cAAc,CAACb,IAAf,CAAoBgB,MAAM,CAACG,oBAAP,CAA4Bf,WAA5B,EAAyC;AAC5DW,YAAAA,aAAa,EAAEA,aAAa,CAAClC,IAD+B;AAE5DwB,YAAAA;AAF4D,WAAzC,CAApB;AAIA;AACD;AAlCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoCCC,IAAAA,QAAQ,GAAGA,QAAQ,CAACc,IAAT,CAAc,MACxBb,OAAO,CAACc,GAAR,CAAYR,cAAZ,CADU,CAAX,CApCD,CAuCC;AAEA;;AACAP,IAAAA,QAAQ,GAAGA,QAAQ,CAACc,IAAT,CAAc,MACzB;AAAA;AAAA;AAAA;;AAAA;AACC,8BAAsB,KAAKjE,eAAL,CAAqBmB,SAA3C,mIACA;AAAA,gBADUwC,QACV;;AACC,sCAAgBF,OAAhB,8BACA;AADI,kBAAMU,EAAE,eAAR;;AAEH,gBAAGR,QAAQ,CAACE,MAAT,CAAgBvC,OAAhB,CAAwB6C,EAAxB,CAAH,EACA;AACC5B,cAAAA,MAAM,CAACe,gBAAP,GAA0B,IAA1B;;AAEA,kBACA;AACC,wBAAOK,QAAQ,CAACS,UAAT,CAAoBrC,OAApB,CAA4BsC,aAAnC;AAEC,uBAAK,IAAL;AACC,wBAAGV,QAAQ,CAACS,UAAT,CAAoBrC,OAApB,CAA4BE,SAA5B,KAA0C,CAA7C,EACCM,MAAM,CAACgB,MAAP,GAAgB,CAAhB,CAFF,CAEqB;;AAEpB;;AACD,uBAAK,KAAL;AACC,4BAAOI,QAAQ,CAACS,UAAT,CAAoBrC,OAApB,CAA4BE,SAAnC;AAEC,2BAAK,CAAL;AAAQ;AACPM,wBAAAA,MAAM,CAACgB,MAAP,GAAgB,CAAhB;AACA;;AACD,2BAAK,CAAL;AAAQ;AACPhB,wBAAAA,MAAM,CAACgB,MAAP,GAAgB,CAAhB;AACA;;AACD;AARD;;AAWA;;AACD;AApBD;AAsBA,eAxBD,CAyBA,OAAMe,EAAN,EACA,CACC;;AAED,qBAAO/B,MAAP;AACA;AACD;AACD;AAzCF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA2CC,aAAOA,MAAP;AACA,KA7CU,CAAX,CA1CD,CAwFC;;AAEA,WAAOY,QAAP;AACA,GAvVF,CAwVC;;AACA;;;;;;;;AAMAoB,EAAAA,IAAI,CAACC,UAAD,EAAaZ,aAAa,GAAG,OAA7B,EACJ;AACC;AACA;AACA,QAAG,OAAOY,UAAP,KAAsB,WAAzB,EACC,OAAOpB,OAAO,CAACU,MAAR,CAAe,2CAAf,CAAP,CAJF,CAKC;AACA;AAEA;;AACA,QAAIX,QAAQ,GAAGC,OAAO,CAACC,OAAR,EAAf;AACA,QAAItD,UAAJ;AAEA,UAAM0E,MAAM,GAAG,wBAAf,CAZD,CAaC;AAEA;;AACAtB,IAAAA,QAAQ,GAAGA,QAAQ,CAACc,IAAT,CAAc,MAAMQ,MAAM,CAACC,MAAP,CAAcC,sBAAd,CAAqCH,UAArC,EAAiDZ,aAAjD,CAApB,CAAX;AAEAT,IAAAA,QAAQ,GAAGA,QAAQ,CAACc,IAAT,CAAc1B,MAAM,IAC/B;AACCxC,MAAAA,UAAU,GAAGwC,MAAM,CAACxC,UAApB;AACA,WAAKG,kBAAL,GAA0BqC,MAAM,CAACrC,kBAAjC;AACA,KAJU,CAAX,CAlBD,CAuBC;AAEA;;AACAiD,IAAAA,QAAQ,GAAGA,QAAQ,CAACc,IAAT,CAAc,MACzB;AACC,WAAKjE,eAAL,CAAqBgB,GAArB,GAA2B,KAAKhB,eAAL,CAAqB2C,QAArB,CAA8B,IAA9B,EAAoCiC,KAApC,CAA0C,KAA1C,CAA3B;AACA,KAHU,CAAX,CA1BD,CA8BC;AAEA;;AACAzB,IAAAA,QAAQ,GAAGA,QAAQ,CAACc,IAAT,CAAc,MAAMQ,MAAM,CAACC,MAAP,CAAcG,kBAAd,CAAiC,KAAK7E,eAAL,CAAqBgB,GAAtD,EAA2DwD,UAA3D,EAAuEzE,UAAvE,CAApB,CAAX;AAEAoD,IAAAA,QAAQ,GAAGA,QAAQ,CAACc,IAAT,CAAc1B,MAAM,IAC/B;AACC,WAAKpC,SAAL,GAAiB,IAAIO,MAAM,CAACC,SAAX,CAAqB;AAAEmE,QAAAA,QAAQ,EAAEvC;AAAZ,OAArB,CAAjB;AACA,KAHU,CAAX,CAnCD,CAuCC;;AAEA,WAAOY,QAAP;AACA,GA1YF,CA2YC;;AACA;;;;;;;AAKA4B,EAAAA,MAAM,CAAChF,UAAU,GAAG,EAAd,EACN;AACC;AACA,QAAIiF,UAAU,GAAG,IAAjB;AAEA,QAAIC,SAAS,GAAG,CAAC,CAAjB;AAEA,QAAI9B,QAAQ,GAAGC,OAAO,CAACC,OAAR,EAAf;AAEA,QAAI6B,YAAY,GAAG,EAAnB;;AAEA,UAAMC,KAAK,GAAG,IAAd;;AAEA,UAAMV,MAAM,GAAG,wBAAf,CAZD,CAaC;AAEA;;AACA,QAAI,WAAW,IAAZ,KAAsB,KAAzB,EACC,OAAOrB,OAAO,CAACU,MAAR,CAAe,mDAAf,CAAP,CAjBF,CAkBC;AAEA;;AACA,QAAG,kBAAkB/D,UAArB,EACCmF,YAAY,GAAGnF,UAAU,CAACmF,YAA1B,CAtBF,CAuBC;AAEA;;AACA;;;;;;AAKA,aAASE,OAAT,CAAiBC,IAAjB,EACA;AACC;AACA,UAAIA,IAAI,CAACC,MAAL,CAAYhE,OAAZ,CAAoB0D,UAAU,CAACM,MAA/B,MAA2C,IAA5C,IAAsDD,IAAI,CAACE,YAAL,CAAkBjE,OAAlB,CAA0B0D,UAAU,CAACO,YAArC,MAAuD,IAAhH,EACC,OAAO,IAAP,CAHF,CAIC;;AAEA,UAAIC,IAAI,GAAG,KAAX;AAND;AAAA;AAAA;;AAAA;AAQC,8BAAuBH,IAAI,CAACI,UAA5B,mIACA;AAAA,gBADUC,SACV;;AACC,cAAGA,SAAS,CAACC,MAAV,KAAqB,WAAxB,EAAqC;AACrC;AACC,kBAAG,QAAQD,SAAS,CAACE,WAArB,EACA;AACC,oBAAGF,SAAS,CAACE,WAAV,CAAsBC,EAAtB,KAA6B,IAAhC,EACCL,IAAI,GAAG,IAAP;AACD;AACD;AACD;AAlBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBC,UAAGA,IAAH,EACC,OAAOH,IAAP;AAED,aAAO,IAAP;AACA,KAxDF,CAyDC;AAEA;;;AACA,UAAMS,MAAM,GAAG,wBAAf;AACA,QAAG,OAAOA,MAAP,KAAkB,WAArB,EACC,OAAO1C,OAAO,CAACU,MAAR,CAAe,mCAAf,CAAP,CA9DF,CA+DC;AAEA;;AACA,YAAO,IAAP;AAEC,WAAM,KAAK9D,eAAL,CAAqBiB,WAArB,YAA4C8E,mCAAlD;AAA+E;AAC9E5C,QAAAA,QAAQ,GAAGA,QAAQ,CAACc,IAAT,CAAc,MACzB;AAAA;AAAA;AAAA;;AAAA;AACC,kCAAkCkB,KAAK,CAAC/E,KAAN,CAAY4F,OAAZ,EAAlC,mIACA;AAAA;AAAA,oBADWC,KACX;AAAA,oBADkBhD,WAClB;;AACC,kBAAGA,WAAW,CAACiD,OAAZ,CAAoB5E,OAApB,CAA4B6D,KAAK,CAACnF,eAAN,CAAsBiB,WAAlD,CAAH,EACA;AACCgE,gBAAAA,SAAS,GAAGgB,KAAZ;AACA;AACA;AACD;AARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASC,SAVU,CAAX;AAWA;;AACD,WAAM,KAAKjG,eAAL,CAAqBiB,WAArB,YAA4CP,MAAM,CAACyF,WAAzD;AAAuE;AACtEhD,QAAAA,QAAQ,GAAGA,QAAQ,CAACc,IAAT,CAAc,MAAMb,OAAO,CAACc,GAAR,CAAY1B,KAAK,CAACC,IAAN,CAAW0C,KAAK,CAAC/E,KAAjB,EAAwBsC,OAAO,IACzEoD,MAAM,CAACM,MAAP,CAAc;AAAE1E,UAAAA,IAAI,EAAE;AAAR,SAAd,EAAiC,IAAI2E,UAAJ,CAAe3D,OAAO,CAAC4D,oBAAR,CAA6BC,gBAA7B,CAA8CC,UAA9C,CAAyD1B,QAAxE,CAAjC,CAD0C,CAAZ,EACwFb,IADxF,CAC6FwC,OAAO,IACnI;AAAA;AAAA;AAAA;;AAAA;AACC,kCAAuBtB,KAAK,CAAC/E,KAAN,CAAY4F,OAAZ,EAAvB,mIACA;AAAA;AAAA,oBADWC,KACX;;AACC,kBAAG,4BAAcQ,OAAO,CAACR,KAAD,CAArB,EAA8Bd,KAAK,CAACnF,eAAN,CAAsBiB,WAAtB,CAAkCuF,UAAlC,CAA6C1B,QAA3E,CAAH,EACA;AACCG,gBAAAA,SAAS,GAAGgB,KAAZ;AACA;AACA;AACD;AARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASC,SAX8B,CAApB,CAAX;AAYA;;AACD;AACC,eAAO7C,OAAO,CAACU,MAAR,CAAe,6BAAf,CAAP;AA9BF,KAlED,CAkGC;AAEA;;;AACAX,IAAAA,QAAQ,GAAGA,QAAQ,CAACc,IAAT,CAAc,MACzB;AACC,UAAGgB,SAAS,KAAM,CAAC,CAAnB,EACC,OAAO7B,OAAO,CAACU,MAAR,CAAe,oDAAf,CAAP;AAEDkB,MAAAA,UAAU,GAAG,KAAK5E,KAAL,CAAW6E,SAAX,CAAb;AAEA,aAAO7B,OAAO,CAACc,GAAR,CAAY1B,KAAK,CAACC,IAAN,CAAW0C,KAAK,CAAC/E,KAAjB,EAAwBsC,OAAO,IAAI0C,OAAO,CAAC1C,OAAD,CAA1C,CAAZ,EAAkEuB,IAAlE,CAAuEyC,cAAc,IAC5F;AACC,cAAMC,eAAe,GAAG,EAAxB;AACAA,QAAAA,eAAe,CAAC9D,IAAhB,CAAqBmC,UAArB;AAFD;AAAA;AAAA;;AAAA;AAIC,gCAA2B0B,cAA3B,mIACA;AAAA,kBADUE,aACV;AACC,gBAAGA,aAAa,KAAK,IAArB,EACCD,eAAe,CAAC9D,IAAhB,CAAqB+D,aAArB;AACD;AARF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAUC,cAAMC,SAAS,GAAG,IAAIC,yCAAJ,CAAqC;AACtD1G,UAAAA,KAAK,EAAEuG,eAD+C;AAEtDzB,UAAAA;AAFsD,SAArC,CAAlB;AAKA,eAAO2B,SAAS,CAAC9B,MAAV,GAAmBd,IAAnB,CAAwB8C,kBAAkB,IACjD;AACC,cAAGA,kBAAkB,CAACxE,MAAnB,KAA8B,IAAjC,EACC,OAAOa,OAAO,CAACC,OAAR,EAAP;AAED,iBAAOD,OAAO,CAACU,MAAR,CAAe,2CAAf,CAAP;AACA,SANM,EAMJkD,KAAK,IACP5D,OAAO,CAACU,MAAR,CAAgB,yDAA0DkD,KAAK,YAAYC,MAAlB,GAA4BD,KAAK,CAACE,aAAlC,GAAkDF,KAAO,EAAlI,CAPM,CAAP;AASA,OAzBM,EAyBJG,YAAY,IACd/D,OAAO,CAACU,MAAR,CAAgB,mDAAkDqD,YAAa,EAA/E,CA1BM,CAAP;AA4BA,KAnCU,CAAX,CArGD,CAyIC;;AAEAhE,IAAAA,QAAQ,GAAGA,QAAQ,CAACc,IAAT,CAAc,MAAMQ,MAAM,CAACC,MAAP,CAAc0C,mBAAd,CAAkC,KAAKpH,eAAL,CAAqBgB,GAAvD,EAA4D,KAAKb,SAAjE,EAA4E,KAAKC,KAAL,CAAW6E,SAAX,EAAsBqB,oBAAlG,EAAwH,KAAKpG,kBAA7H,CAApB,CAAX;AAEA,WAAOiD,QAAP;AACA,GAhiBF,CAiiBC;;;AAjiBD,C,CAmiBA","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { getAlgorithmByOID, getCrypto, getEngine } from \"./common.js\";\r\nimport ResponseData from \"./ResponseData.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Certificate from \"./Certificate.js\";\r\nimport CertID from \"./CertID.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport CertificateChainValidationEngine from \"./CertificateChainValidationEngine.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class BasicOCSPResponse\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for BasicOCSPResponse class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ResponseData}\r\n\t\t * @desc tbsResponseData\r\n\t\t */\r\n\t\tthis.tbsResponseData = getParametersValue(parameters, \"tbsResponseData\", BasicOCSPResponse.defaultValues(\"tbsResponseData\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", BasicOCSPResponse.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", BasicOCSPResponse.defaultValues(\"signature\"));\r\n\t\t\r\n\t\tif(\"certs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Certificate>}\r\n\t\t\t * @desc certs\r\n\t\t\t */\r\n\t\t\tthis.certs = getParametersValue(parameters, \"certs\", BasicOCSPResponse.defaultValues(\"certs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbsResponseData\":\r\n\t\t\t\treturn new ResponseData();\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for BasicOCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\t{\r\n\t\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\t\tlet comparisonResult = ((ResponseData.compareWithDefault(\"tbs\", memberValue.tbs)) &&\r\n\t\t\t\t\t(ResponseData.compareWithDefault(\"responderID\", memberValue.responderID)) &&\r\n\t\t\t\t\t(ResponseData.compareWithDefault(\"producedAt\", memberValue.producedAt)) &&\r\n\t\t\t\t\t(ResponseData.compareWithDefault(\"responses\", memberValue.responses)));\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(\"responseExtensions\" in memberValue)\r\n\t\t\t\t\t\tcomparisonResult = comparisonResult && (ResponseData.compareWithDefault(\"responseExtensions\", memberValue.responseExtensions));\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn comparisonResult;\r\n\t\t\t\t}\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn (memberValue.isEqual(BasicOCSPResponse.defaultValues(memberName)));\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for BasicOCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * BasicOCSPResponse       ::= SEQUENCE {\r\n\t *    tbsResponseData      ResponseData,\r\n\t *    signatureAlgorithm   AlgorithmIdentifier,\r\n\t *    signature            BIT STRING,\r\n\t *    certs            [0] EXPLICIT SEQUENCE OF Certificate OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [tbsResponseData]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signature]\r\n\t\t * @property {string} [certs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"BasicOCSPResponse\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tResponseData.schema(names.tbsResponseData || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"BasicOCSPResponse.tbsResponseData\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"BasicOCSPResponse.signatureAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signature || \"BasicOCSPResponse.signature\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: [new asn1js.Repeated({\r\n\t\t\t\t\t\t\t\tname: \"BasicOCSPResponse.certs\",\r\n\t\t\t\t\t\t\t\tvalue: Certificate.schema(names.certs || {})\r\n\t\t\t\t\t\t\t})]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"BasicOCSPResponse.tbsResponseData\",\r\n\t\t\t\"BasicOCSPResponse.signatureAlgorithm\",\r\n\t\t\t\"BasicOCSPResponse.signature\",\r\n\t\t\t\"BasicOCSPResponse.certs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tBasicOCSPResponse.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for BasicOCSPResponse\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbsResponseData = new ResponseData({ schema: asn1.result[\"BasicOCSPResponse.tbsResponseData\"] });\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[\"BasicOCSPResponse.signatureAlgorithm\"] });\r\n\t\tthis.signature = asn1.result[\"BasicOCSPResponse.signature\"];\r\n\t\t\r\n\t\tif(\"BasicOCSPResponse.certs\" in asn1.result)\r\n\t\t\tthis.certs = Array.from(asn1.result[\"BasicOCSPResponse.certs\"], element => new Certificate({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.tbsResponseData.toSchema());\r\n\t\toutputArray.push(this.signatureAlgorithm.toSchema());\r\n\t\toutputArray.push(this.signature);\r\n\t\t\r\n\t\t//region Create array of certificates\r\n\t\tif(\"certs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: Array.from(this.certs, element => element.toSchema())\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\ttbsResponseData: this.tbsResponseData.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignature: this.signature.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"certs\" in this)\r\n\t\t\t_object.certs = Array.from(this.certs, element => element.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get OCSP response status for specific certificate\r\n\t * @param {Certificate} certificate Certificate to be checked\r\n\t * @param {Certificate} issuerCertificate Certificate of issuer for certificate to be checked\r\n\t * @returns {Promise}\r\n\t */\r\n\tgetCertificateStatus(certificate, issuerCertificate)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst result = {\r\n\t\t\tisForCertificate: false,\r\n\t\t\tstatus: 2 // 0 = good, 1 = revoked, 2 = unknown\r\n\t\t};\r\n\t\t\r\n\t\tconst hashesObject = {};\r\n\t\t\r\n\t\tconst certIDs = [];\r\n\t\tconst certIDPromises = [];\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create all \"certIDs\" for input certificates\r\n\t\tfor(const response of this.tbsResponseData.responses)\r\n\t\t{\r\n\t\t\tconst hashAlgorithm = getAlgorithmByOID(response.certID.hashAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\treturn Promise.reject(`Wrong CertID hashing algorithm: ${response.certID.hashAlgorithm.algorithmId}`);\r\n\t\t\t\r\n\t\t\tif((hashAlgorithm.name in hashesObject) === false)\r\n\t\t\t{\r\n\t\t\t\thashesObject[hashAlgorithm.name] = 1;\r\n\t\t\t\t\r\n\t\t\t\tconst certID = new CertID();\r\n\t\t\t\t\r\n\t\t\t\tcertIDs.push(certID);\r\n\t\t\t\tcertIDPromises.push(certID.createForCertificate(certificate, {\r\n\t\t\t\t\thashAlgorithm: hashAlgorithm.name,\r\n\t\t\t\t\tissuerCertificate\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tPromise.all(certIDPromises)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Compare all response's \"certIDs\" with identifiers for input certificate\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tfor(const response of this.tbsResponseData.responses)\r\n\t\t\t{\r\n\t\t\t\tfor(const id of certIDs)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(response.certID.isEqual(id))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresult.isForCertificate = true;\r\n\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tswitch(response.certStatus.idBlock.isConstructed)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tcase true:\r\n\t\t\t\t\t\t\t\t\tif(response.certStatus.idBlock.tagNumber === 1)\r\n\t\t\t\t\t\t\t\t\t\tresult.status = 1; // revoked\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tcase false:\r\n\t\t\t\t\t\t\t\t\tswitch(response.certStatus.idBlock.tagNumber)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase 0: // good\r\n\t\t\t\t\t\t\t\t\t\t\tresult.status = 0;\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase 2: // unknown\r\n\t\t\t\t\t\t\t\t\t\t\tresult.status = 2;\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make signature for current OCSP Basic Response\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Get a private key from function parameter\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbsResponseData.tbs = this.tbsResponseData.toSchema(true).toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbsResponseData.tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signature = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify existing OCSP Basic Response\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(parameters = {})\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet signerCert = null;\r\n\t\t\r\n\t\tlet certIndex = -1;\r\n\t\t\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet trustedCerts = [];\r\n\t\t\r\n\t\tconst _this = this;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check amount of certificates\r\n\t\tif((\"certs\" in this) === false)\r\n\t\t\treturn Promise.reject(\"No certificates attached to the BasicOCSPResponce\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get input values\r\n\t\tif(\"trustedCerts\" in parameters)\r\n\t\t\ttrustedCerts = parameters.trustedCerts;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Aux functions\r\n\t\t/**\r\n\t\t * Check CA flag for the certificate\r\n\t\t * @param {Certificate} cert Certificate to find CA flag for\r\n\t\t * @returns {*}\r\n\t\t */\r\n\t\tfunction checkCA(cert)\r\n\t\t{\r\n\t\t\t//region Do not include signer's certificate\r\n\t\t\tif((cert.issuer.isEqual(signerCert.issuer) === true) && (cert.serialNumber.isEqual(signerCert.serialNumber) === true))\r\n\t\t\t\treturn null;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tlet isCA = false;\r\n\t\t\t\r\n\t\t\tfor(const extension of cert.extensions)\r\n\t\t\t{\r\n\t\t\t\tif(extension.extnID === \"2.5.29.19\") // BasicConstraints\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"cA\" in extension.parsedValue)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(extension.parsedValue.cA === true)\r\n\t\t\t\t\t\t\tisCA = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(isCA)\r\n\t\t\t\treturn cert;\r\n\t\t\t\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find correct value for \"responderID\"\r\n\t\tswitch(true)\r\n\t\t{\r\n\t\t\tcase (this.tbsResponseData.responderID instanceof RelativeDistinguishedNames): // [1] Name\r\n\t\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const [index, certificate] of _this.certs.entries())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(certificate.subject.isEqual(_this.tbsResponseData.responderID))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcertIndex = index;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase (this.tbsResponseData.responderID instanceof asn1js.OctetString): // [2] KeyHash\r\n\t\t\t\tsequence = sequence.then(() => Promise.all(Array.from(_this.certs, element =>\r\n\t\t\t\t\tcrypto.digest({ name: \"sha-1\" }, new Uint8Array(element.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex)))).then(results =>\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(const [index, ] of _this.certs.entries())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(isEqualBuffer(results[index], _this.tbsResponseData.responderID.valueBlock.valueHex))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcertIndex = index;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}));\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(\"Wrong value for responderID\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make additional verification for signer's certificate\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tif(certIndex === (-1))\r\n\t\t\t\treturn Promise.reject(\"Correct certificate was not found in OCSP response\");\r\n\t\t\t\r\n\t\t\tsignerCert = this.certs[certIndex];\r\n\t\t\t\r\n\t\t\treturn Promise.all(Array.from(_this.certs, element => checkCA(element))).then(promiseResults =>\r\n\t\t\t{\r\n\t\t\t\tconst additionalCerts = [];\r\n\t\t\t\tadditionalCerts.push(signerCert);\r\n\t\t\t\t\r\n\t\t\t\tfor(const promiseResult of promiseResults)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(promiseResult !== null)\r\n\t\t\t\t\t\tadditionalCerts.push(promiseResult);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst certChain = new CertificateChainValidationEngine({\r\n\t\t\t\t\tcerts: additionalCerts,\r\n\t\t\t\t\ttrustedCerts\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\treturn certChain.verify().then(verificationResult =>\r\n\t\t\t\t{\r\n\t\t\t\t\tif(verificationResult.result === true)\r\n\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn Promise.reject(\"Validation of signer's certificate failed\");\r\n\t\t\t\t}, error =>\r\n\t\t\t\t\tPromise.reject(`Validation of signer's certificate failed with error: ${((error instanceof Object) ? error.resultMessage : error)}`)\r\n\t\t\t\t);\r\n\t\t\t}, promiseError =>\r\n\t\t\t\tPromise.reject(`Error during checking certificates for CA flag: ${promiseError}`)\r\n\t\t\t);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\tsequence = sequence.then(() => engine.subtle.verifyWithPublicKey(this.tbsResponseData.tbs, this.signature, this.certs[certIndex].subjectPublicKeyInfo, this.signatureAlgorithm));\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"BasicOCSPResponse.js"}