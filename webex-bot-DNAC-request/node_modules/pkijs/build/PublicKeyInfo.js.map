{"version":3,"sources":["../src/PublicKeyInfo.js"],"names":["PublicKeyInfo","constructor","parameters","algorithm","defaultValues","subjectPublicKey","parsedKey","fromSchema","schema","fromJSON","json","memberName","AlgorithmIdentifier","asn1js","BitString","Error","names","Sequence","name","blockName","value","asn1","compareSchema","verified","result","algorithmId","algorithmParams","ObjectIdentifier","ECPublicKey","namedCurve","valueBlock","toString","valueHex","ex","publicKeyASN1","fromBER","offset","RSAPublicKey","toSchema","toJSON","jwk","kty","publicKeyJWK","Object","keys","key","toUpperCase","Null","toBER","importKey","publicKey","sequence","Promise","resolve","_this","reject","crypto","then","exportKey","exportedKey","exception","undefined","error"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport { getCrypto } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport ECPublicKey from \"./ECPublicKey.js\";\r\nimport RSAPublicKey from \"./RSAPublicKey.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class PublicKeyInfo \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PublicKeyInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc Algorithm identifier\r\n\t\t */\r\n\t\tthis.algorithm = getParametersValue(parameters, \"algorithm\", PublicKeyInfo.defaultValues(\"algorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc Subject public key value\r\n\t\t */\r\n\t\tthis.subjectPublicKey = getParametersValue(parameters, \"subjectPublicKey\", PublicKeyInfo.defaultValues(\"subjectPublicKey\"));\r\n\t\t\r\n\t\tif(\"parsedKey\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ECPublicKey|RSAPublicKey}\r\n\t\t\t * @desc Parsed public key value\r\n\t\t\t */\r\n\t\t\tthis.parsedKey = getParametersValue(parameters, \"parsedKey\", PublicKeyInfo.defaultValues(\"parsedKey\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"subjectPublicKey\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PublicKeyInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SubjectPublicKeyInfo  ::=  Sequence  {\r\n\t *    algorithm            AlgorithmIdentifier,\r\n\t *    subjectPublicKey     BIT STRING  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [algorithm]\r\n\t\t * @property {string} [subjectPublicKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.algorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.subjectPublicKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"algorithm\",\r\n\t\t\t\"subjectPublicKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPublicKeyInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"algorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsubjectPublicKey: \"subjectPublicKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PublicKeyInfo\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.algorithm = new AlgorithmIdentifier({ schema: asn1.result.algorithm });\r\n\t\tthis.subjectPublicKey = asn1.result.subjectPublicKey;\r\n\t\t\r\n\t\tswitch(this.algorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tif(\"algorithmParams\" in this.algorithm)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.algorithm.algorithmParams.constructor.blockName() === asn1js.ObjectIdentifier.blockName())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.parsedKey = new ECPublicKey({\r\n\t\t\t\t\t\t\t\tnamedCurve: this.algorithm.algorithmParams.valueBlock.toString(),\r\n\t\t\t\t\t\t\t\tschema: this.subjectPublicKey.valueBlock.valueHex\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(ex){} // Could be a problems during recognision of internal public key data here. Let's ignore them.\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\t{\r\n\t\t\t\t\tconst publicKeyASN1 = asn1js.fromBER(this.subjectPublicKey.valueBlock.valueHex);\r\n\t\t\t\t\tif(publicKeyASN1.offset !== (-1))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.parsedKey = new RSAPublicKey({ schema: publicKeyASN1.result });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(ex){} // Could be a problems during recognision of internal public key data here. Let's ignore them.\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.algorithm.toSchema(),\r\n\t\t\t\tthis.subjectPublicKey\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\t//region Return common value in case we do not have enough info fo making JWK\r\n\t\tif((\"parsedKey\" in this) === false)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\talgorithm: this.algorithm.toJSON(),\r\n\t\t\t\tsubjectPublicKey: this.subjectPublicKey.toJSON()\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Making JWK\r\n\t\tconst jwk = {};\r\n\t\t\r\n\t\tswitch(this.algorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tjwk.kty = \"EC\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\tconst publicKeyJWK = this.parsedKey.toJSON();\r\n\t\t\r\n\t\tfor(const key of Object.keys(publicKeyJWK))\r\n\t\t\tjwk[key] = publicKeyJWK[key];\r\n\t\t\r\n\t\treturn jwk;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"kty\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.kty.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"EC\":\r\n\t\t\t\t\tthis.parsedKey = new ECPublicKey({ json });\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.algorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.10045.2.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"RSA\":\r\n\t\t\t\t\tthis.parsedKey = new RSAPublicKey({ json });\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.algorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis.subjectPublicKey = new asn1js.BitString({ valueHex: this.parsedKey.toSchema().toBER(false) });\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\timportKey(publicKey)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial check\r\n\t\tif(typeof publicKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide publicKey input parameter\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Export public key\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.exportKey(\"spki\", publicKey));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initialize internal variables by parsing exported value\r\n\t\tsequence = sequence.then(\r\n\t\t\t/**\r\n\t\t\t * @param {ArrayBuffer} exportedKey\r\n\t\t\t */\r\n\t\t\texportedKey =>\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(exportedKey);\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\t_this.fromSchema(asn1.result);\r\n\t\t\t\t}\r\n\t\t\t\tcatch(exception)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(\"Error during initializing object from schema\");\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn undefined;\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(`Error during exporting public key: ${error}`)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"PublicKeyInfo.js"}