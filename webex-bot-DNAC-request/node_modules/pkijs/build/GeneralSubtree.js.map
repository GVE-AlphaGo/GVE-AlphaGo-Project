{"version":3,"sources":["../src/GeneralSubtree.js"],"names":["GeneralSubtree","constructor","parameters","base","defaultValues","minimum","maximum","fromSchema","schema","memberName","GeneralName","Error","names","asn1js","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Integer","asn1","compareSchema","verified","result","valueBlock","isHexOnly","valueDec","toSchema","outputArray","push","valueMinimum","valueMaximum","toJSON","object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class GeneralSubtree\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for GeneralSubtree class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {GeneralName}\r\n\t\t * @desc base\r\n\t\t */\r\n\t\tthis.base = getParametersValue(parameters, \"base\", GeneralSubtree.defaultValues(\"base\"));\r\n\r\n\t\t/**\r\n\t\t * @type {number|Integer}\r\n\t\t * @desc base\r\n\t\t */\r\n\t\tthis.minimum = getParametersValue(parameters, \"minimum\", GeneralSubtree.defaultValues(\"minimum\"));\r\n\r\n\t\tif(\"maximum\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number|Integer}\r\n\t\t\t * @desc minimum\r\n\t\t\t */\r\n\t\t\tthis.maximum = getParametersValue(parameters, \"maximum\", GeneralSubtree.defaultValues(\"maximum\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"base\":\r\n\t\t\t\treturn new GeneralName();\r\n\t\t\tcase \"minimum\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"maximum\":\r\n\t\t\t\treturn 0;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for GeneralSubtree class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * GeneralSubtree ::= SEQUENCE {\r\n\t *    base                    GeneralName,\r\n\t *    minimum         [0]     BaseDistance DEFAULT 0,\r\n\t *    maximum         [1]     BaseDistance OPTIONAL }\r\n\t *\r\n\t * BaseDistance ::= INTEGER (0..MAX)\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [base]\r\n\t\t * @property {string} [minimum]\r\n\t\t * @property {string} [maximum]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tGeneralName.schema(names.base || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.minimum || \"\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.maximum || \"\") })]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"base\",\r\n\t\t\t\"minimum\",\r\n\t\t\t\"maximum\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tGeneralSubtree.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tbase: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"base\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tminimum: \"minimum\",\r\n\t\t\t\t\tmaximum: \"maximum\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for GeneralSubtree\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.base = new GeneralName({ schema: asn1.result.base });\r\n\r\n\t\tif(\"minimum\" in asn1.result)\r\n\t\t{\r\n\t\t\tif(asn1.result.minimum.valueBlock.isHexOnly)\r\n\t\t\t\tthis.minimum = asn1.result.minimum;\r\n\t\t\telse\r\n\t\t\t\tthis.minimum = asn1.result.minimum.valueBlock.valueDec;\r\n\t\t}\r\n\r\n\t\tif(\"maximum\" in asn1.result)\r\n\t\t{\r\n\t\t\tif(asn1.result.maximum.valueBlock.isHexOnly)\r\n\t\t\t\tthis.maximum = asn1.result.maximum;\r\n\t\t\telse\r\n\t\t\t\tthis.maximum = asn1.result.maximum.valueBlock.valueDec;\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.base.toSchema());\r\n\t\t\r\n\t\tif(this.minimum !== 0)\r\n\t\t{\r\n\t\t\tlet valueMinimum = 0;\r\n\t\t\t\r\n\t\t\tif(this.minimum instanceof asn1js.Integer)\r\n\t\t\t\tvalueMinimum = this.minimum;\r\n\t\t\telse\r\n\t\t\t\tvalueMinimum = new asn1js.Integer({ value: this.minimum });\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [valueMinimum]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"maximum\" in this)\r\n\t\t{\r\n\t\t\tlet valueMaximum = 0;\r\n\t\t\t\r\n\t\t\tif(this.maximum instanceof asn1js.Integer)\r\n\t\t\t\tvalueMaximum = this.maximum;\r\n\t\t\telse\r\n\t\t\t\tvalueMaximum = new asn1js.Integer({ value: this.maximum });\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [valueMaximum]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tbase: this.base.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(this.minimum !== 0)\r\n\t\t{\r\n\t\t\tif((typeof this.minimum) === \"number\")\r\n\t\t\t\tobject.minimum = this.minimum;\r\n\t\t\telse\r\n\t\t\t\tobject.minimum = this.minimum.toJSON();\r\n\t\t}\r\n\t\t\r\n\t\tif(\"maximum\" in this)\r\n\t\t{\r\n\t\t\tif((typeof this.maximum) === \"number\")\r\n\t\t\t\tobject.maximum = this.maximum;\r\n\t\t\telse\r\n\t\t\t\tobject.maximum = this.maximum.toJSON();\r\n\t\t}\r\n\t\t\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"GeneralSubtree.js"}