{"version":3,"sources":["../src/SignerInfo.js"],"names":["SignerInfo","constructor","parameters","version","defaultValues","sid","digestAlgorithm","signedAttrs","signatureAlgorithm","signature","unsignedAttrs","fromSchema","schema","memberName","asn1js","Any","AlgorithmIdentifier","SignedAndUnsignedAttributes","type","OctetString","Error","compareWithDefault","memberValue","isEqual","attributes","encodedValue","names","Sequence","name","value","Integer","Choice","IssuerAndSerialNumber","blockName","Constructed","optional","idBlock","tagClass","tagNumber","asn1","compareSchema","verified","result","valueBlock","valueDec","currentSid","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport SignedAndUnsignedAttributes from \"./SignedAndUnsignedAttributes.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class SignerInfo \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SignerInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", SignerInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc sid\r\n\t\t */\r\n\t\tthis.sid = getParametersValue(parameters, \"sid\", SignerInfo.defaultValues(\"sid\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc digestAlgorithm\r\n\t\t */\r\n\t\tthis.digestAlgorithm = getParametersValue(parameters, \"digestAlgorithm\", SignerInfo.defaultValues(\"digestAlgorithm\"));\r\n\t\t\r\n\t\tif(\"signedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {SignedAndUnsignedAttributes}\r\n\t\t\t * @desc signedAttrs\r\n\t\t\t */\r\n\t\t\tthis.signedAttrs = getParametersValue(parameters, \"signedAttrs\", SignerInfo.defaultValues(\"signedAttrs\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc digestAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", SignerInfo.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", SignerInfo.defaultValues(\"signature\"));\r\n\t\t\r\n\t\tif(\"unsignedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {SignedAndUnsignedAttributes}\r\n\t\t\t * @desc unsignedAttrs\r\n\t\t\t */\r\n\t\t\tthis.unsignedAttrs = getParametersValue(parameters, \"unsignedAttrs\", SignerInfo.defaultValues(\"unsignedAttrs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"sid\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signedAttrs\":\r\n\t\t\t\treturn new SignedAndUnsignedAttributes({ type: 0 });\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"unsignedAttrs\":\r\n\t\t\t\treturn new SignedAndUnsignedAttributes({ type: 1 });\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignerInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (SignerInfo.defaultValues(\"version\") === memberValue);\r\n\t\t\tcase \"sid\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tcase \"digestAlgorithm\":\r\n\t\t\t\tif((memberValue instanceof AlgorithmIdentifier) === false)\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\treturn memberValue.isEqual(SignerInfo.defaultValues(\"digestAlgorithm\"));\r\n\t\t\tcase \"signedAttrs\":\r\n\t\t\t\treturn ((SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue)));\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\tif((memberValue instanceof AlgorithmIdentifier) === false)\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\treturn memberValue.isEqual(SignerInfo.defaultValues(\"signatureAlgorithm\"));\r\n\t\t\tcase \"signature\":\r\n\t\t\tcase \"unsignedAttrs\":\r\n\t\t\t\treturn ((SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes))\r\n\t\t\t\t&& (SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignerInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SignerInfo ::= SEQUENCE {\r\n\t *    version CMSVersion,\r\n\t *    sid SignerIdentifier,\r\n\t *    digestAlgorithm DigestAlgorithmIdentifier,\r\n\t *    signedAttrs [0] IMPLICIT SignedAttributes OPTIONAL,\r\n\t *    signatureAlgorithm SignatureAlgorithmIdentifier,\r\n\t *    signature SignatureValue,\r\n\t *    unsignedAttrs [1] IMPLICIT UnsignedAttributes OPTIONAL }\r\n\t *\r\n\t * SignerIdentifier ::= CHOICE {\r\n\t *    issuerAndSerialNumber IssuerAndSerialNumber,\r\n\t *    subjectKeyIdentifier [0] SubjectKeyIdentifier }\r\n\t *\r\n\t * SubjectKeyIdentifier ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [sid]\r\n\t\t * @property {string} [digestAlgorithm]\r\n\t\t * @property {string} [signedAttrs]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signature]\r\n\t\t * @property {string} [unsignedAttrs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (\r\n\t\t\tnew asn1js.Sequence({\r\n\t\t\t\tname: \"SignerInfo\",\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Integer({ name: (names.version || \"SignerInfo.version\") }),\r\n\t\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\tIssuerAndSerialNumber.schema(names.sid || {\r\n\t\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\t\tblockName: \"SignerInfo.sid\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\toptional: true,\r\n\t\t\t\t\t\t\t\tname: (names.sid || \"SignerInfo.sid\"),\r\n\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tvalue: [new asn1js.OctetString()]\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tAlgorithmIdentifier.schema(names.digestAlgorithm || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.digestAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tSignedAndUnsignedAttributes.schema(names.signedAttrs || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.signedAttrs\",\r\n\t\t\t\t\t\t\ttagNumber: 0\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.signatureAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tnew asn1js.OctetString({ name: (names.signature || \"SignerInfo.signature\") }),\r\n\t\t\t\t\tSignedAndUnsignedAttributes.schema(names.unsignedAttrs || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"SignerInfo.unsignedAttrs\",\r\n\t\t\t\t\t\t\ttagNumber: 1\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"SignerInfo.version\",\r\n\t\t\t\"SignerInfo.sid\",\r\n\t\t\t\"SignerInfo.digestAlgorithm\",\r\n\t\t\t\"SignerInfo.signedAttrs\",\r\n\t\t\t\"SignerInfo.signatureAlgorithm\",\r\n\t\t\t\"SignerInfo.signature\",\r\n\t\t\t\"SignerInfo.unsignedAttrs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignerInfo.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignerInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"SignerInfo.version\"].valueBlock.valueDec;\r\n\r\n\t\tconst currentSid = asn1.result[\"SignerInfo.sid\"];\r\n\t\tif(currentSid.idBlock.tagClass === 1)\r\n\t\t\tthis.sid = new IssuerAndSerialNumber({ schema: currentSid });\r\n\t\telse\r\n\t\t\tthis.sid = currentSid;\r\n\r\n\t\tthis.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[\"SignerInfo.digestAlgorithm\"] });\r\n\t\tif(\"SignerInfo.signedAttrs\" in asn1.result)\r\n\t\t\tthis.signedAttrs = new SignedAndUnsignedAttributes({ type: 0, schema: asn1.result[\"SignerInfo.signedAttrs\"] });\r\n\t\t\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[\"SignerInfo.signatureAlgorithm\"] });\r\n\t\tthis.signature = asn1.result[\"SignerInfo.signature\"];\r\n\t\tif(\"SignerInfo.unsignedAttrs\" in asn1.result)\r\n\t\t\tthis.unsignedAttrs = new SignedAndUnsignedAttributes({ type: 1, schema: asn1.result[\"SignerInfo.unsignedAttrs\"] });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tif(SignerInfo.compareWithDefault(\"sid\", this.sid))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\r\n\t\t\r\n\t\t//region Create array for output sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\tif(this.sid instanceof IssuerAndSerialNumber)\r\n\t\t\toutputArray.push(this.sid.toSchema());\r\n\t\telse\r\n\t\t\toutputArray.push(this.sid);\r\n\t\t\r\n\t\toutputArray.push(this.digestAlgorithm.toSchema());\r\n\t\t\r\n\t\tif(\"signedAttrs\" in this)\r\n\t\t{\r\n\t\t\tif(SignerInfo.compareWithDefault(\"signedAttrs\", this.signedAttrs) === false)\r\n\t\t\t\toutputArray.push(this.signedAttrs.toSchema());\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(this.signatureAlgorithm.toSchema());\r\n\t\toutputArray.push(this.signature);\r\n\t\t\r\n\t\tif(\"unsignedAttrs\" in this)\r\n\t\t{\r\n\t\t\tif(SignerInfo.compareWithDefault(\"unsignedAttrs\", this.unsignedAttrs) === false)\r\n\t\t\t\toutputArray.push(this.unsignedAttrs.toSchema());\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tif(SignerInfo.compareWithDefault(\"sid\", this.sid))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\r\n\t\t\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version\r\n\t\t};\r\n\r\n\t\tif(!(this.sid instanceof asn1js.Any))\r\n\t\t\t_object.sid = this.sid.toJSON();\r\n\r\n\t\t_object.digestAlgorithm = this.digestAlgorithm.toJSON();\r\n\r\n\t\tif(SignerInfo.compareWithDefault(\"signedAttrs\", this.signedAttrs) === false)\r\n\t\t\t_object.signedAttrs = this.signedAttrs.toJSON();\r\n\r\n\t\t_object.signatureAlgorithm = this.signatureAlgorithm.toJSON();\r\n\t\t_object.signature = this.signature.toJSON();\r\n\r\n\t\tif(SignerInfo.compareWithDefault(\"unsignedAttrs\", this.unsignedAttrs) === false)\r\n\t\t\t_object.unsignedAttrs = this.unsignedAttrs.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"SignerInfo.js"}