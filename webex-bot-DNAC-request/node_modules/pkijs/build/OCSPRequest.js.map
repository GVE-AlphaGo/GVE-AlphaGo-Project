{"version":3,"sources":["../src/OCSPRequest.js"],"names":["OCSPRequest","constructor","parameters","tbsRequest","defaultValues","optionalSignature","fromSchema","schema","memberName","TBSRequest","Signature","Error","compareWithDefault","memberValue","tbs","version","requestorName","requestList","requestExtensions","signatureAlgorithm","signature","certs","names","asn1js","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","asn1","compareSchema","verified","result","toSchema","encodeFlag","outputArray","push","toJSON","_object","createForCertificate","certificate","sequence","Promise","resolve","certID","CertID","then","Request","reqCert","error","reject","sign","privateKey","hashAlgorithm","engine","subtle","getSignatureParameters","toBER","signWithPrivateKey","BitString","valueHex","verify"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport { getEngine } from \"./common.js\";\r\nimport TBSRequest from \"./TBSRequest.js\";\r\nimport Signature from \"./Signature.js\";\r\nimport Request from \"./Request.js\";\r\nimport CertID from \"./CertID.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class OCSPRequest \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OCSPRequest class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {TBSRequest}\r\n\t\t * @desc tbsRequest\r\n\t\t */\r\n\t\tthis.tbsRequest = getParametersValue(parameters, \"tbsRequest\", OCSPRequest.defaultValues(\"tbsRequest\"));\r\n\t\t\r\n\t\tif(\"optionalSignature\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Signature}\r\n\t\t\t * @desc optionalSignature\r\n\t\t\t */\r\n\t\t\tthis.optionalSignature = getParametersValue(parameters, \"optionalSignature\", OCSPRequest.defaultValues(\"optionalSignature\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbsRequest\":\r\n\t\t\t\treturn new TBSRequest();\r\n\t\t\tcase \"optionalSignature\":\r\n\t\t\t\treturn new Signature();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbsRequest\":\r\n\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\treturn ((TBSRequest.compareWithDefault(\"tbs\", memberValue.tbs)) &&\r\n\t\t\t\t(TBSRequest.compareWithDefault(\"version\", memberValue.version)) &&\r\n\t\t\t\t(TBSRequest.compareWithDefault(\"requestorName\", memberValue.requestorName)) &&\r\n\t\t\t\t(TBSRequest.compareWithDefault(\"requestList\", memberValue.requestList)) &&\r\n\t\t\t\t(TBSRequest.compareWithDefault(\"requestExtensions\", memberValue.requestExtensions)));\r\n\t\t\tcase \"optionalSignature\":\r\n\t\t\t\treturn ((Signature.compareWithDefault(\"signatureAlgorithm\", memberValue.signatureAlgorithm)) &&\r\n\t\t\t\t(Signature.compareWithDefault(\"signature\", memberValue.signature)) &&\r\n\t\t\t\t(Signature.compareWithDefault(\"certs\", memberValue.certs)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OCSPRequest     ::=     SEQUENCE {\r\n\t *    tbsRequest                  TBSRequest,\r\n\t *    optionalSignature   [0]     EXPLICIT Signature OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [tbsRequest]\r\n\t\t * @property {string} [optionalSignature]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: names.blockName || \"OCSPRequest\",\r\n\t\t\tvalue: [\r\n\t\t\t\tTBSRequest.schema(names.tbsRequest || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"tbsRequest\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tSignature.schema(names.optionalSignature || {\r\n\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\tblockName: \"optionalSignature\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"tbsRequest\",\r\n\t\t\t\"optionalSignature\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOCSPRequest.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OCSPRequest\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbsRequest = new TBSRequest({ schema: asn1.result.tbsRequest });\r\n\t\tif(\"optionalSignature\" in asn1.result)\r\n\t\t\tthis.optionalSignature = new Signature({ schema: asn1.result.optionalSignature });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @param {boolean} encodeFlag If param equal to false then create TBS schema via decoding stored value. In othe case create TBS schema via assembling from TBS parts.\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.tbsRequest.toSchema(encodeFlag));\r\n\t\tif(\"optionalSignature\" in this)\r\n\t\t\toutputArray.push(this.optionalSignature.toSchema());\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\ttbsRequest: this.tbsRequest.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"optionalSignature\" in this)\r\n\t\t\t_object.optionalSignature = this.optionalSignature.toJSON();\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Making OCSP Request for specific certificate\r\n\t * @param {Certificate} certificate Certificate making OCSP Request for\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tcreateForCertificate(certificate, parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst certID = new CertID();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create OCSP certificate identifier for the certificate\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcertID.createForCertificate(certificate, parameters)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make final request data\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbsRequest = new TBSRequest({\r\n\t\t\t\trequestList: [\r\n\t\t\t\t\tnew Request({\r\n\t\t\t\t\t\treqCert: certID\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t});\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make signature for current OCSP Request\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Check private key\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check that \"optionalSignature\" exists in the current request\r\n\t\tif((\"optionalSignature\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Need to create \\\"optionalSignature\\\" field before signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tlet tbs;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.optionalSignature.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\ttbs = this.tbsRequest.toSchema(true).toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.optionalSignature.signature = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tverify()\r\n\t{\r\n\t\t// TODO: Create the function\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"OCSPRequest.js"}