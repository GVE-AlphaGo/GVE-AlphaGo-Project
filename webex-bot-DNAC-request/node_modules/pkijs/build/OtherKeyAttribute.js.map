{"version":3,"sources":["../src/OtherKeyAttribute.js"],"names":["OtherKeyAttribute","constructor","parameters","keyAttrId","defaultValues","keyAttr","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","Object","keys","length","names","asn1js","Sequence","optional","name","blockName","value","ObjectIdentifier","Any","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class OtherKeyAttribute\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherKeyAttribute class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc keyAttrId\r\n\t\t */\r\n\t\tthis.keyAttrId = getParametersValue(parameters, \"keyAttrId\", OtherKeyAttribute.defaultValues(\"keyAttrId\"));\r\n\r\n\t\tif(\"keyAttr\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @desc keyAttr\r\n\t\t\t */\r\n\t\t\tthis.keyAttr = getParametersValue(parameters, \"keyAttr\", OtherKeyAttribute.defaultValues(\"keyAttr\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyAttrId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"keyAttr\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherKeyAttribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyAttrId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"keyAttr\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherKeyAttribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OtherKeyAttribute ::= SEQUENCE {\r\n\t *    keyAttrId OBJECT IDENTIFIER,\r\n\t *    keyAttr ANY DEFINED BY keyAttrId OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [optional]\r\n\t\t * @property {string} [keyAttrId]\r\n\t\t * @property {string} [keyAttr]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\toptional: (names.optional || true),\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.keyAttrId || \"\") }),\r\n\t\t\t\tnew asn1js.Any({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.keyAttr || \"\")\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"keyAttrId\",\r\n\t\t\t\"keyAttr\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherKeyAttribute.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tkeyAttrId: \"keyAttrId\",\r\n\t\t\t\t\tkeyAttr: \"keyAttr\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherKeyAttribute\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.keyAttrId = asn1.result.keyAttrId.valueBlock.toString();\r\n\r\n\t\tif(\"keyAttr\" in asn1.result)\r\n\t\t\tthis.keyAttr = asn1.result.keyAttr;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.keyAttrId }));\r\n\r\n\t\tif(\"keyAttr\" in this)\r\n\t\t\toutputArray.push(this.keyAttr);\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tkeyAttrId: this.keyAttrId\r\n\t\t};\r\n\r\n\t\tif(\"keyAttr\" in this)\r\n\t\t\t_object.keyAttr = this.keyAttr.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"OtherKeyAttribute.js"}