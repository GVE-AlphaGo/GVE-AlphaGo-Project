{"version":3,"sources":["../src/ContentInfo.js"],"names":["ContentInfo","constructor","parameters","contentType","defaultValues","content","fromSchema","schema","memberName","asn1js","Any","Error","compareWithDefault","memberValue","names","optional","Sequence","name","blockName","value","ObjectIdentifier","Constructed","idBlock","tagClass","tagNumber","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","toJSON","object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class ContentInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ContentInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc contentType\r\n\t\t */\r\n\t\tthis.contentType = getParametersValue(parameters, \"contentType\", ContentInfo.defaultValues(\"contentType\"));\r\n\t\t/**\r\n\t\t * @type {Any}\r\n\t\t * @desc content\r\n\t\t */\r\n\t\tthis.content = getParametersValue(parameters, \"content\", ContentInfo.defaultValues(\"content\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"content\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"content\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * ContentInfo ::= SEQUENCE {\r\n\t *    contentType ContentType,\r\n\t *    content [0] EXPLICIT ANY DEFINED BY contentType }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [contentType]\r\n\t\t * @property {string} [content]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\tif((\"optional\" in names) === false)\r\n\t\t\tnames.optional = false;\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"ContentInfo\"),\r\n\t\t\toptional: names.optional,\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.contentType || \"contentType\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Any({ name: (names.content || \"content\") })] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"contentType\",\r\n\t\t\t\"content\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tContentInfo.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ContentInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.contentType = asn1.result.contentType.valueBlock.toString();\r\n\t\tthis.content = asn1.result.content;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.contentType }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.content] // EXPLICIT ANY value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tcontentType: this.contentType\r\n\t\t};\r\n\r\n\t\tif(!(this.content instanceof asn1js.Any))\r\n\t\t\tobject.content = this.content.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"ContentInfo.js"}