{"version":3,"sources":["../src/MessageImprint.js"],"names":["MessageImprint","constructor","parameters","hashAlgorithm","defaultValues","hashedMessage","fromSchema","schema","memberName","AlgorithmIdentifier","asn1js","OctetString","Error","compareWithDefault","memberValue","algorithmId","isEqual","names","Sequence","name","blockName","value","asn1","compareSchema","verified","result","toSchema","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3161\r\n */\r\nexport default class MessageImprint\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for MessageImprint class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc hashAlgorithm\r\n\t\t */\r\n\t\tthis.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", MessageImprint.defaultValues(\"hashAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc hashedMessage\r\n\t\t */\r\n\t\tthis.hashedMessage = getParametersValue(parameters, \"hashedMessage\", MessageImprint.defaultValues(\"hashedMessage\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"hashedMessage\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for MessageImprint class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"hashedMessage\":\r\n\t\t\t\treturn (memberValue.isEqual(MessageImprint.defaultValues(memberName)) === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for MessageImprint class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * MessageImprint ::= SEQUENCE  {\r\n\t *    hashAlgorithm                AlgorithmIdentifier,\r\n\t *    hashedMessage                OCTET STRING  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [hashAlgorithm]\r\n\t\t * @property {string} [hashedMessage]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.hashAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.hashedMessage || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"hashAlgorithm\",\r\n\t\t\t\"hashedMessage\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tMessageImprint.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\thashAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"hashAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\thashedMessage: \"hashedMessage\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for MessageImprint\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\r\n\t\tthis.hashedMessage = asn1.result.hashedMessage;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.hashAlgorithm.toSchema(),\r\n\t\t\t\tthis.hashedMessage\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\thashAlgorithm: this.hashAlgorithm.toJSON(),\r\n\t\t\thashedMessage: this.hashedMessage.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"MessageImprint.js"}