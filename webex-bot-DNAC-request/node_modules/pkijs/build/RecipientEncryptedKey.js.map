{"version":3,"sources":["../src/RecipientEncryptedKey.js"],"names":["RecipientEncryptedKey","constructor","parameters","rid","defaultValues","encryptedKey","fromSchema","schema","memberName","KeyAgreeRecipientIdentifier","asn1js","OctetString","Error","compareWithDefault","memberValue","variant","isEqual","names","Sequence","name","blockName","value","asn1","compareSchema","verified","result","toSchema","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport KeyAgreeRecipientIdentifier from \"./KeyAgreeRecipientIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class RecipientEncryptedKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RecipientEncryptedKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {KeyAgreeRecipientIdentifier}\r\n\t\t * @desc rid\r\n\t\t */\r\n\t\tthis.rid = getParametersValue(parameters, \"rid\", RecipientEncryptedKey.defaultValues(\"rid\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc encryptedKey\r\n\t\t */\r\n\t\tthis.encryptedKey = getParametersValue(parameters, \"encryptedKey\", RecipientEncryptedKey.defaultValues(\"encryptedKey\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"rid\":\r\n\t\t\t\treturn new KeyAgreeRecipientIdentifier();\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RecipientEncryptedKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"rid\":\r\n\t\t\t\treturn ((memberValue.variant === (-1)) && ((\"value\" in memberValue) === false));\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn (memberValue.isEqual(RecipientEncryptedKey.defaultValues(\"encryptedKey\")));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RecipientEncryptedKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RecipientEncryptedKey ::= SEQUENCE {\r\n\t *    rid KeyAgreeRecipientIdentifier,\r\n\t *    encryptedKey EncryptedKey }\r\n\t *\r\n\t * EncryptedKey ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [rid]\r\n\t\t * @property {string} [encryptedKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tKeyAgreeRecipientIdentifier.schema(names.rid || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"rid\",\r\n\t\t\t\"encryptedKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRecipientEncryptedKey.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\trid: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"rid\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedKey: \"encryptedKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RecipientEncryptedKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.rid = new KeyAgreeRecipientIdentifier({ schema: asn1.result.rid });\r\n\t\tthis.encryptedKey = asn1.result.encryptedKey;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.rid.toSchema(),\r\n\t\t\t\tthis.encryptedKey\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\trid: this.rid.toJSON(),\r\n\t\t\tencryptedKey: this.encryptedKey.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"RecipientEncryptedKey.js"}