{"version":3,"sources":["../src/TSTInfo.js"],"names":["TSTInfo","constructor","parameters","version","defaultValues","policy","messageImprint","serialNumber","genTime","accuracy","ordering","nonce","tsa","extensions","fromSchema","schema","memberName","MessageImprint","asn1js","Integer","Date","Accuracy","GeneralName","Error","compareWithDefault","memberValue","hashAlgorithm","hashedMessage","isEqual","seconds","millis","micros","type","value","length","names","Sequence","name","blockName","ObjectIdentifier","GeneralizedTime","Boolean","optional","Constructed","idBlock","tagClass","tagNumber","Repeated","Extension","extension","asn1","compareSchema","verified","result","valueBlock","valueDec","toString","toDate","Array","from","element","toSchema","outputArray","push","valueDate","toJSON","_object","verify","sequence","Promise","resolve","data","notBefore","notAfter","crypto","reject","shaAlgorithm","algorithmId","then","digest","Uint8Array","valueHex"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;AACA;;AACA;;;AAGe,MAAMA,OAAN,CACf;AACC;;AACA;;;;;AAKAC,EAAAA,WAAW,CAACC,UAAU,GAAG,EAAd,EACX;AACC;;AACA;;;;AAIA,SAAKC,OAAL,GAAe,iCAAmBD,UAAnB,EAA+B,SAA/B,EAA0CF,OAAO,CAACI,aAAR,CAAsB,SAAtB,CAA1C,CAAf;AACA;;;;;AAIA,SAAKC,MAAL,GAAc,iCAAmBH,UAAnB,EAA+B,QAA/B,EAAyCF,OAAO,CAACI,aAAR,CAAsB,QAAtB,CAAzC,CAAd;AACA;;;;;AAIA,SAAKE,cAAL,GAAsB,iCAAmBJ,UAAnB,EAA+B,gBAA/B,EAAiDF,OAAO,CAACI,aAAR,CAAsB,gBAAtB,CAAjD,CAAtB;AACA;;;;;AAIA,SAAKG,YAAL,GAAoB,iCAAmBL,UAAnB,EAA+B,cAA/B,EAA+CF,OAAO,CAACI,aAAR,CAAsB,cAAtB,CAA/C,CAApB;AACA;;;;;AAIA,SAAKI,OAAL,GAAe,iCAAmBN,UAAnB,EAA+B,SAA/B,EAA0CF,OAAO,CAACI,aAAR,CAAsB,SAAtB,CAA1C,CAAf;AAEA,QAAG,cAAcF,UAAjB;AACC;;;;AAIA,WAAKO,QAAL,GAAgB,iCAAmBP,UAAnB,EAA+B,UAA/B,EAA2CF,OAAO,CAACI,aAAR,CAAsB,UAAtB,CAA3C,CAAhB;AAED,QAAG,cAAcF,UAAjB;AACC;;;;AAIA,WAAKQ,QAAL,GAAgB,iCAAmBR,UAAnB,EAA+B,UAA/B,EAA2CF,OAAO,CAACI,aAAR,CAAsB,UAAtB,CAA3C,CAAhB;AAED,QAAG,WAAWF,UAAd;AACC;;;;AAIA,WAAKS,KAAL,GAAa,iCAAmBT,UAAnB,EAA+B,OAA/B,EAAwCF,OAAO,CAACI,aAAR,CAAsB,OAAtB,CAAxC,CAAb;AAED,QAAG,SAASF,UAAZ;AACC;;;;AAIA,WAAKU,GAAL,GAAW,iCAAmBV,UAAnB,EAA+B,KAA/B,EAAsCF,OAAO,CAACI,aAAR,CAAsB,KAAtB,CAAtC,CAAX;AAED,QAAG,gBAAgBF,UAAnB;AACC;;;;AAIA,WAAKW,UAAL,GAAkB,iCAAmBX,UAAnB,EAA+B,YAA/B,EAA6CF,OAAO,CAACI,aAAR,CAAsB,YAAtB,CAA7C,CAAlB,CA7DF,CA8DC;AAEA;;AACA,QAAG,YAAYF,UAAf,EACC,KAAKY,UAAL,CAAgBZ,UAAU,CAACa,MAA3B,EAlEF,CAmEC;AACA,GA5EF,CA6EC;;AACA;;;;;;AAIA,SAAOX,aAAP,CAAqBY,UAArB,EACA;AACC,YAAOA,UAAP;AAEC,WAAK,SAAL;AACC,eAAO,CAAP;;AACD,WAAK,QAAL;AACC,eAAO,EAAP;;AACD,WAAK,gBAAL;AACC,eAAO,IAAIC,uBAAJ,EAAP;;AACD,WAAK,cAAL;AACC,eAAO,IAAIC,MAAM,CAACC,OAAX,EAAP;;AACD,WAAK,SAAL;AACC,eAAO,IAAIC,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,CAAP;;AACD,WAAK,UAAL;AACC,eAAO,IAAIC,iBAAJ,EAAP;;AACD,WAAK,UAAL;AACC,eAAO,KAAP;;AACD,WAAK,OAAL;AACC,eAAO,IAAIH,MAAM,CAACC,OAAX,EAAP;;AACD,WAAK,KAAL;AACC,eAAO,IAAIG,oBAAJ,EAAP;;AACD,WAAK,YAAL;AACC,eAAO,EAAP;;AACD;AACC,cAAM,IAAIC,KAAJ,CAAW,0CAAyCP,UAAW,EAA/D,CAAN;AAvBF;AAyBA,GA7GF,CA8GC;;AACA;;;;;;;AAKA,SAAOQ,kBAAP,CAA0BR,UAA1B,EAAsCS,WAAtC,EACA;AACC,YAAOT,UAAP;AAEC,WAAK,SAAL;AACA,WAAK,QAAL;AACA,WAAK,SAAL;AACA,WAAK,UAAL;AACC,eAAQS,WAAW,KAAKzB,OAAO,CAACI,aAAR,CAAsBY,UAAtB,CAAxB;;AACD,WAAK,gBAAL;AACC,eAASC,wBAAeO,kBAAf,CAAkC,eAAlC,EAAmDC,WAAW,CAACC,aAA/D,CAAD,IACLT,wBAAeO,kBAAf,CAAkC,eAAlC,EAAmDC,WAAW,CAACE,aAA/D,CADH;;AAED,WAAK,cAAL;AACA,WAAK,OAAL;AACC,eAAQF,WAAW,CAACG,OAAZ,CAAoB5B,OAAO,CAACI,aAAR,CAAsBY,UAAtB,CAApB,CAAR;;AACD,WAAK,UAAL;AACC,eAASK,kBAASG,kBAAT,CAA4B,SAA5B,EAAuCC,WAAW,CAACI,OAAnD,CAAD,IACLR,kBAASG,kBAAT,CAA4B,QAA5B,EAAsCC,WAAW,CAACK,MAAlD,CADK,IAELT,kBAASG,kBAAT,CAA4B,QAA5B,EAAsCC,WAAW,CAACM,MAAlD,CAFH;;AAGD,WAAK,KAAL;AACC,eAAST,qBAAYE,kBAAZ,CAA+B,MAA/B,EAAuCC,WAAW,CAACO,IAAnD,CAAD,IACLV,qBAAYE,kBAAZ,CAA+B,OAA/B,EAAwCC,WAAW,CAACQ,KAApD,CADH;;AAED,WAAK,YAAL;AACC,eAAQR,WAAW,CAACS,MAAZ,KAAuB,CAA/B;;AACD;AACC,cAAM,IAAIX,KAAJ,CAAW,0CAAyCP,UAAW,EAA/D,CAAN;AAvBF;AAyBA,GA/IF,CAgJC;;AACA;;;;;;;;;;;;;;;;;;;;;;;AAqBA,SAAOD,MAAP,CAAcb,UAAU,GAAG,EAA3B,EACA;AACC;;;;;;;;;;;;;;AAcA,UAAMiC,KAAK,GAAG,iCAAmBjC,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;AAEA,WAAQ,IAAIgB,MAAM,CAACkB,QAAX,CAAoB;AAC3BC,MAAAA,IAAI,EAAGF,KAAK,CAACG,SAAN,IAAmB,SADC;AAE3BL,MAAAA,KAAK,EAAE,CACN,IAAIf,MAAM,CAACC,OAAX,CAAmB;AAAEkB,QAAAA,IAAI,EAAGF,KAAK,CAAChC,OAAN,IAAiB;AAA1B,OAAnB,CADM,EAEN,IAAIe,MAAM,CAACqB,gBAAX,CAA4B;AAAEF,QAAAA,IAAI,EAAGF,KAAK,CAAC9B,MAAN,IAAgB;AAAzB,OAA5B,CAFM,EAGNY,wBAAeF,MAAf,CAAsBoB,KAAK,CAAC7B,cAAN,IAAwB;AAC7C6B,QAAAA,KAAK,EAAE;AACNG,UAAAA,SAAS,EAAE;AADL;AADsC,OAA9C,CAHM,EAQN,IAAIpB,MAAM,CAACC,OAAX,CAAmB;AAAEkB,QAAAA,IAAI,EAAGF,KAAK,CAAC5B,YAAN,IAAsB;AAA/B,OAAnB,CARM,EASN,IAAIW,MAAM,CAACsB,eAAX,CAA2B;AAAEH,QAAAA,IAAI,EAAGF,KAAK,CAAC3B,OAAN,IAAiB;AAA1B,OAA3B,CATM,EAUNa,kBAASN,MAAT,CAAgBoB,KAAK,CAAC1B,QAAN,IAAkB;AACjC0B,QAAAA,KAAK,EAAE;AACNG,UAAAA,SAAS,EAAE;AADL;AAD0B,OAAlC,CAVM,EAeN,IAAIpB,MAAM,CAACuB,OAAX,CAAmB;AAClBJ,QAAAA,IAAI,EAAGF,KAAK,CAACzB,QAAN,IAAkB,kBADP;AAElBgC,QAAAA,QAAQ,EAAE;AAFQ,OAAnB,CAfM,EAmBN,IAAIxB,MAAM,CAACC,OAAX,CAAmB;AAClBkB,QAAAA,IAAI,EAAGF,KAAK,CAACxB,KAAN,IAAe,eADJ;AAElB+B,QAAAA,QAAQ,EAAE;AAFQ,OAAnB,CAnBM,EAuBN,IAAIxB,MAAM,CAACyB,WAAX,CAAuB;AACtBD,QAAAA,QAAQ,EAAE,IADY;AAEtBE,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AACK;AACbC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAFa;AAMtBb,QAAAA,KAAK,EAAE,CAACX,qBAAYP,MAAZ,CAAmBoB,KAAK,CAACvB,GAAN,IAAa;AACvCuB,UAAAA,KAAK,EAAE;AACNG,YAAAA,SAAS,EAAE;AADL;AADgC,SAAhC,CAAD;AANe,OAAvB,CAvBM,EAmCN,IAAIpB,MAAM,CAACyB,WAAX,CAAuB;AACtBD,QAAAA,QAAQ,EAAE,IADY;AAEtBE,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AACK;AACbC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAFa;AAMtBb,QAAAA,KAAK,EAAE,CACN,IAAIf,MAAM,CAAC6B,QAAX,CAAoB;AACnBV,UAAAA,IAAI,EAAGF,KAAK,CAACtB,UAAN,IAAoB,oBADR;AAEnBoB,UAAAA,KAAK,EAAEe,mBAAUjC,MAAV,CAAiBoB,KAAK,CAACc,SAAN,IAAmB,EAApC;AAFY,SAApB,CADM;AANe,OAAvB,CAnCM,CA+CH;AA/CG;AAFoB,KAApB,CAAR;AAoDA,GA5OF,CA6OC;;AACA;;;;;;AAIAnC,EAAAA,UAAU,CAACC,MAAD,EACV;AACC;AACA,6BAAWA,MAAX,EAAmB,CAClB,iBADkB,EAElB,gBAFkB,EAGlB,wBAHkB,EAIlB,sBAJkB,EAKlB,iBALkB,EAMlB,kBANkB,EAOlB,kBAPkB,EAQlB,eARkB,EASlB,aATkB,EAUlB,oBAVkB,CAAnB,EAFD,CAcC;AAEA;;AACA,UAAMmC,IAAI,GAAGhC,MAAM,CAACiC,aAAP,CAAqBpC,MAArB,EACZA,MADY,EAEZf,OAAO,CAACe,MAAR,EAFY,CAAb;AAKA,QAAGmC,IAAI,CAACE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAI7B,KAAJ,CAAU,iEAAV,CAAN,CAvBF,CAwBC;AAEA;;AACA,SAAKpB,OAAL,GAAe+C,IAAI,CAACG,MAAL,CAAY,iBAAZ,EAA+BC,UAA/B,CAA0CC,QAAzD;AACA,SAAKlD,MAAL,GAAc6C,IAAI,CAACG,MAAL,CAAY,gBAAZ,EAA8BC,UAA9B,CAAyCE,QAAzC,EAAd;AACA,SAAKlD,cAAL,GAAsB,IAAIW,uBAAJ,CAAmB;AAAEF,MAAAA,MAAM,EAAEmC,IAAI,CAACG,MAAL,CAAY,wBAAZ;AAAV,KAAnB,CAAtB;AACA,SAAK9C,YAAL,GAAoB2C,IAAI,CAACG,MAAL,CAAY,sBAAZ,CAApB;AACA,SAAK7C,OAAL,GAAe0C,IAAI,CAACG,MAAL,CAAY,iBAAZ,EAA+BI,MAA/B,EAAf;AACA,QAAG,sBAAsBP,IAAI,CAACG,MAA9B,EACC,KAAK5C,QAAL,GAAgB,IAAIY,iBAAJ,CAAa;AAAEN,MAAAA,MAAM,EAAEmC,IAAI,CAACG,MAAL,CAAY,kBAAZ;AAAV,KAAb,CAAhB;AACD,QAAG,sBAAsBH,IAAI,CAACG,MAA9B,EACC,KAAK3C,QAAL,GAAgBwC,IAAI,CAACG,MAAL,CAAY,kBAAZ,EAAgCC,UAAhC,CAA2CrB,KAA3D;AACD,QAAG,mBAAmBiB,IAAI,CAACG,MAA3B,EACC,KAAK1C,KAAL,GAAauC,IAAI,CAACG,MAAL,CAAY,eAAZ,CAAb;AACD,QAAG,iBAAiBH,IAAI,CAACG,MAAzB,EACC,KAAKzC,GAAL,GAAW,IAAIU,oBAAJ,CAAgB;AAAEP,MAAAA,MAAM,EAAEmC,IAAI,CAACG,MAAL,CAAY,aAAZ;AAAV,KAAhB,CAAX;AACD,QAAG,wBAAwBH,IAAI,CAACG,MAAhC,EACC,KAAKxC,UAAL,GAAkB6C,KAAK,CAACC,IAAN,CAAWT,IAAI,CAACG,MAAL,CAAY,oBAAZ,CAAX,EAA8CO,OAAO,IAAI,IAAIZ,kBAAJ,CAAc;AAAEjC,MAAAA,MAAM,EAAE6C;AAAV,KAAd,CAAzD,CAAlB,CAzCF,CA0CC;AACA,GA9RF,CA+RC;;AACA;;;;;;AAIAC,EAAAA,QAAQ,GACR;AACC;AACA,UAAMC,WAAW,GAAG,EAApB;AAEAA,IAAAA,WAAW,CAACC,IAAZ,CAAiB,IAAI7C,MAAM,CAACC,OAAX,CAAmB;AAAEc,MAAAA,KAAK,EAAE,KAAK9B;AAAd,KAAnB,CAAjB;AACA2D,IAAAA,WAAW,CAACC,IAAZ,CAAiB,IAAI7C,MAAM,CAACqB,gBAAX,CAA4B;AAAEN,MAAAA,KAAK,EAAE,KAAK5B;AAAd,KAA5B,CAAjB;AACAyD,IAAAA,WAAW,CAACC,IAAZ,CAAiB,KAAKzD,cAAL,CAAoBuD,QAApB,EAAjB;AACAC,IAAAA,WAAW,CAACC,IAAZ,CAAiB,KAAKxD,YAAtB;AACAuD,IAAAA,WAAW,CAACC,IAAZ,CAAiB,IAAI7C,MAAM,CAACsB,eAAX,CAA2B;AAAEwB,MAAAA,SAAS,EAAE,KAAKxD;AAAlB,KAA3B,CAAjB;AACA,QAAG,cAAc,IAAjB,EACCsD,WAAW,CAACC,IAAZ,CAAiB,KAAKtD,QAAL,CAAcoD,QAAd,EAAjB;AACD,QAAG,cAAc,IAAjB,EACCC,WAAW,CAACC,IAAZ,CAAiB,IAAI7C,MAAM,CAACuB,OAAX,CAAmB;AAAER,MAAAA,KAAK,EAAE,KAAKvB;AAAd,KAAnB,CAAjB;AACD,QAAG,WAAW,IAAd,EACCoD,WAAW,CAACC,IAAZ,CAAiB,KAAKpD,KAAtB;;AACD,QAAG,SAAS,IAAZ,EACA;AACCmD,MAAAA,WAAW,CAACC,IAAZ,CAAiB,IAAI7C,MAAM,CAACyB,WAAX,CAAuB;AACvCD,QAAAA,QAAQ,EAAE,IAD6B;AAEvCE,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AACK;AACbC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAF8B;AAMvCb,QAAAA,KAAK,EAAE,CAAC,KAAKrB,GAAL,CAASiD,QAAT,EAAD;AANgC,OAAvB,CAAjB;AAQA,KAzBF,CA2BC;;;AACA,QAAG,gBAAgB,IAAnB,EACA;AACCC,MAAAA,WAAW,CAACC,IAAZ,CAAiB,IAAI7C,MAAM,CAACyB,WAAX,CAAuB;AACvCD,QAAAA,QAAQ,EAAE,IAD6B;AAEvCE,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AACK;AACbC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAF8B;AAMvCb,QAAAA,KAAK,EAAEyB,KAAK,CAACC,IAAN,CAAW,KAAK9C,UAAhB,EAA4B+C,OAAO,IAAIA,OAAO,CAACC,QAAR,EAAvC;AANgC,OAAvB,CAAjB;AAQA,KAtCF,CAuCC;AACA;AAEA;;;AACA,WAAQ,IAAI3C,MAAM,CAACkB,QAAX,CAAoB;AAC3BH,MAAAA,KAAK,EAAE6B;AADoB,KAApB,CAAR,CA3CD,CA8CC;AACA,GApVF,CAqVC;;AACA;;;;;;AAIAG,EAAAA,MAAM,GACN;AACC,UAAMC,OAAO,GAAG;AACf/D,MAAAA,OAAO,EAAE,KAAKA,OADC;AAEfE,MAAAA,MAAM,EAAE,KAAKA,MAFE;AAGfC,MAAAA,cAAc,EAAE,KAAKA,cAAL,CAAoB2D,MAApB,EAHD;AAIf1D,MAAAA,YAAY,EAAE,KAAKA,YAAL,CAAkB0D,MAAlB,EAJC;AAKfzD,MAAAA,OAAO,EAAE,KAAKA;AALC,KAAhB;AAQA,QAAG,cAAc,IAAjB,EACC0D,OAAO,CAACzD,QAAR,GAAmB,KAAKA,QAAL,CAAcwD,MAAd,EAAnB;AAED,QAAG,cAAc,IAAjB,EACCC,OAAO,CAACxD,QAAR,GAAmB,KAAKA,QAAxB;AAED,QAAG,WAAW,IAAd,EACCwD,OAAO,CAACvD,KAAR,GAAgB,KAAKA,KAAL,CAAWsD,MAAX,EAAhB;AAED,QAAG,SAAS,IAAZ,EACCC,OAAO,CAACtD,GAAR,GAAc,KAAKA,GAAL,CAASqD,MAAT,EAAd;AAED,QAAG,gBAAgB,IAAnB,EACCC,OAAO,CAACrD,UAAR,GAAqB6C,KAAK,CAACC,IAAN,CAAW,KAAK9C,UAAhB,EAA4B+C,OAAO,IAAIA,OAAO,CAACK,MAAR,EAAvC,CAArB;AAED,WAAOC,OAAP;AACA,GApXF,CAqXC;;AACA;;;;;;;AAKAC,EAAAA,MAAM,CAACjE,UAAU,GAAG,EAAd,EACN;AACC;AACA,QAAIkE,QAAQ,GAAGC,OAAO,CAACC,OAAR,EAAf;AAEA,QAAIC,IAAJ;AAEA,QAAIC,SAAS,GAAG,IAAhB;AACA,QAAIC,QAAQ,GAAG,IAAf,CAPD,CAQC;AAEA;;AACA,UAAMC,MAAM,GAAG,wBAAf;AACA,QAAG,OAAOA,MAAP,KAAkB,WAArB,EACC,OAAOL,OAAO,CAACM,MAAR,CAAe,mCAAf,CAAP,CAbF,CAcC;AAEA;;AACA,QAAG,UAAUzE,UAAb,EACCqE,IAAI,GAAGrE,UAAU,CAACqE,IAAlB,CADD,KAGC,OAAOF,OAAO,CAACM,MAAR,CAAe,6DAAf,CAAP;AAED,QAAG,eAAezE,UAAlB,EACCsE,SAAS,GAAGtE,UAAU,CAACsE,SAAvB;AAED,QAAG,cAActE,UAAjB,EACCuE,QAAQ,GAAGvE,UAAU,CAACuE,QAAtB,CA1BF,CA2BC;AAEA;;AACA,QAAGD,SAAS,KAAK,IAAjB,EACA;AACC,UAAG,KAAKhE,OAAL,GAAegE,SAAlB,EACC,OAAOH,OAAO,CAACM,MAAR,CAAe,iEAAf,CAAP;AACD;;AAED,QAAGF,QAAQ,KAAK,IAAhB,EACA;AACC,UAAG,KAAKjE,OAAL,GAAeiE,QAAlB,EACC,OAAOJ,OAAO,CAACM,MAAR,CAAe,gEAAf,CAAP;AACD,KAxCF,CAyCC;AAEA;;;AACA,UAAMC,YAAY,GAAG,+BAAkB,KAAKtE,cAAL,CAAoBoB,aAApB,CAAkCmD,WAApD,CAArB;AACA,QAAI,UAAUD,YAAX,KAA6B,KAAhC,EACC,OAAOP,OAAO,CAACM,MAAR,CAAgB,oCAAmC,KAAKrE,cAAL,CAAoBoB,aAApB,CAAkCmD,WAAY,EAAjG,CAAP,CA9CF,CA+CC;AAEA;AACA;;AACAT,IAAAA,QAAQ,GAAGA,QAAQ,CAACU,IAAT,CAAc,MACxBJ,MAAM,CAACK,MAAP,CAAcH,YAAY,CAACvC,IAA3B,EAAiC,IAAI2C,UAAJ,CAAeT,IAAf,CAAjC,CADU,EAETO,IAFS,CAGVzB,MAAM,IAAI,4BAAcA,MAAd,EAAsB,KAAK/C,cAAL,CAAoBqB,aAApB,CAAkC2B,UAAlC,CAA6C2B,QAAnE,CAHA,CAAX,CAnDD,CAwDC;;AAEA,WAAOb,QAAP;AACA,GAvbF,CAwbC;;;AAxbD,C,CA0bA","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { getCrypto, getAlgorithmByOID } from \"./common.js\";\r\nimport MessageImprint from \"./MessageImprint.js\";\r\nimport Accuracy from \"./Accuracy.js\";\r\nimport GeneralName from \"./GeneralName.js\";\r\nimport Extension from \"./Extension.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3161\r\n */\r\nexport default class TSTInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for TSTInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", TSTInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc policy\r\n\t\t */\r\n\t\tthis.policy = getParametersValue(parameters, \"policy\", TSTInfo.defaultValues(\"policy\"));\r\n\t\t/**\r\n\t\t * @type {MessageImprint}\r\n\t\t * @desc messageImprint\r\n\t\t */\r\n\t\tthis.messageImprint = getParametersValue(parameters, \"messageImprint\", TSTInfo.defaultValues(\"messageImprint\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", TSTInfo.defaultValues(\"serialNumber\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @desc genTime\r\n\t\t */\r\n\t\tthis.genTime = getParametersValue(parameters, \"genTime\", TSTInfo.defaultValues(\"genTime\"));\r\n\r\n\t\tif(\"accuracy\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Accuracy}\r\n\t\t\t * @desc accuracy\r\n\t\t\t */\r\n\t\t\tthis.accuracy = getParametersValue(parameters, \"accuracy\", TSTInfo.defaultValues(\"accuracy\"));\r\n\r\n\t\tif(\"ordering\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {boolean}\r\n\t\t\t * @desc ordering\r\n\t\t\t */\r\n\t\t\tthis.ordering = getParametersValue(parameters, \"ordering\", TSTInfo.defaultValues(\"ordering\"));\r\n\r\n\t\tif(\"nonce\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Integer}\r\n\t\t\t * @desc nonce\r\n\t\t\t */\r\n\t\t\tthis.nonce = getParametersValue(parameters, \"nonce\", TSTInfo.defaultValues(\"nonce\"));\r\n\r\n\t\tif(\"tsa\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralName}\r\n\t\t\t * @desc tsa\r\n\t\t\t */\r\n\t\t\tthis.tsa = getParametersValue(parameters, \"tsa\", TSTInfo.defaultValues(\"tsa\"));\r\n\r\n\t\tif(\"extensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @desc extensions\r\n\t\t\t */\r\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", TSTInfo.defaultValues(\"extensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"policy\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"messageImprint\":\r\n\t\t\t\treturn new MessageImprint();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"genTime\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tcase \"accuracy\":\r\n\t\t\t\treturn new Accuracy();\r\n\t\t\tcase \"ordering\":\r\n\t\t\t\treturn false;\r\n\t\t\tcase \"nonce\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"tsa\":\r\n\t\t\t\treturn new GeneralName();\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TSTInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\tcase \"policy\":\r\n\t\t\tcase \"genTime\":\r\n\t\t\tcase \"ordering\":\r\n\t\t\t\treturn (memberValue === TSTInfo.defaultValues(memberName));\r\n\t\t\tcase \"messageImprint\":\r\n\t\t\t\treturn ((MessageImprint.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\r\n\t\t\t\t\t\t(MessageImprint.compareWithDefault(\"hashedMessage\", memberValue.hashedMessage)));\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\tcase \"nonce\":\r\n\t\t\t\treturn (memberValue.isEqual(TSTInfo.defaultValues(memberName)));\r\n\t\t\tcase \"accuracy\":\r\n\t\t\t\treturn ((Accuracy.compareWithDefault(\"seconds\", memberValue.seconds)) &&\r\n\t\t\t\t\t\t(Accuracy.compareWithDefault(\"millis\", memberValue.millis)) &&\r\n\t\t\t\t\t\t(Accuracy.compareWithDefault(\"micros\", memberValue.micros)));\r\n\t\t\tcase \"tsa\":\r\n\t\t\t\treturn ((GeneralName.compareWithDefault(\"type\", memberValue.type)) &&\r\n\t\t\t\t\t\t(GeneralName.compareWithDefault(\"value\", memberValue.value)));\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for TSTInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * TSTInfo ::= SEQUENCE  {\r\n\t *   version                      INTEGER  { v1(1) },\r\n\t *   policy                       TSAPolicyId,\r\n\t *   messageImprint               MessageImprint,\r\n\t *   serialNumber                 INTEGER,\r\n\t *   genTime                      GeneralizedTime,\r\n\t *   accuracy                     Accuracy                 OPTIONAL,\r\n\t *   ordering                     BOOLEAN             DEFAULT FALSE,\r\n\t *   nonce                        INTEGER                  OPTIONAL,\r\n\t *   tsa                          [0] GeneralName          OPTIONAL,\r\n\t *   extensions                   [1] IMPLICIT Extensions  OPTIONAL  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [policy]\r\n\t\t * @property {string} [messageImprint]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t * @property {string} [genTime]\r\n\t\t * @property {string} [accuracy]\r\n\t\t * @property {string} [ordering]\r\n\t\t * @property {string} [nonce]\r\n\t\t * @property {string} [tsa]\r\n\t\t * @property {string} [extensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"TSTInfo\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"TSTInfo.version\") }),\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.policy || \"TSTInfo.policy\") }),\r\n\t\t\t\tMessageImprint.schema(names.messageImprint || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TSTInfo.messageImprint\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"TSTInfo.serialNumber\") }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.genTime || \"TSTInfo.genTime\") }),\r\n\t\t\t\tAccuracy.schema(names.accuracy || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"TSTInfo.accuracy\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Boolean({\r\n\t\t\t\t\tname: (names.ordering || \"TSTInfo.ordering\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\tname: (names.nonce || \"TSTInfo.nonce\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [GeneralName.schema(names.tsa || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"TSTInfo.tsa\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.extensions || \"TSTInfo.extensions\"),\r\n\t\t\t\t\t\t\tvalue: Extension.schema(names.extension || {})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}) // IMPLICIT Extensions\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"TSTInfo.version\",\r\n\t\t\t\"TSTInfo.policy\",\r\n\t\t\t\"TSTInfo.messageImprint\",\r\n\t\t\t\"TSTInfo.serialNumber\",\r\n\t\t\t\"TSTInfo.genTime\",\r\n\t\t\t\"TSTInfo.accuracy\",\r\n\t\t\t\"TSTInfo.ordering\",\r\n\t\t\t\"TSTInfo.nonce\",\r\n\t\t\t\"TSTInfo.tsa\",\r\n\t\t\t\"TSTInfo.extensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tTSTInfo.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for TSTInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result[\"TSTInfo.version\"].valueBlock.valueDec;\r\n\t\tthis.policy = asn1.result[\"TSTInfo.policy\"].valueBlock.toString();\r\n\t\tthis.messageImprint = new MessageImprint({ schema: asn1.result[\"TSTInfo.messageImprint\"] });\r\n\t\tthis.serialNumber = asn1.result[\"TSTInfo.serialNumber\"];\r\n\t\tthis.genTime = asn1.result[\"TSTInfo.genTime\"].toDate();\r\n\t\tif(\"TSTInfo.accuracy\" in asn1.result)\r\n\t\t\tthis.accuracy = new Accuracy({ schema: asn1.result[\"TSTInfo.accuracy\"] });\r\n\t\tif(\"TSTInfo.ordering\" in asn1.result)\r\n\t\t\tthis.ordering = asn1.result[\"TSTInfo.ordering\"].valueBlock.value;\r\n\t\tif(\"TSTInfo.nonce\" in asn1.result)\r\n\t\t\tthis.nonce = asn1.result[\"TSTInfo.nonce\"];\r\n\t\tif(\"TSTInfo.tsa\" in asn1.result)\r\n\t\t\tthis.tsa = new GeneralName({ schema: asn1.result[\"TSTInfo.tsa\"] });\r\n\t\tif(\"TSTInfo.extensions\" in asn1.result)\r\n\t\t\tthis.extensions = Array.from(asn1.result[\"TSTInfo.extensions\"], element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.policy }));\r\n\t\toutputArray.push(this.messageImprint.toSchema());\r\n\t\toutputArray.push(this.serialNumber);\r\n\t\toutputArray.push(new asn1js.GeneralizedTime({ valueDate: this.genTime }));\r\n\t\tif(\"accuracy\" in this)\r\n\t\t\toutputArray.push(this.accuracy.toSchema());\r\n\t\tif(\"ordering\" in this)\r\n\t\t\toutputArray.push(new asn1js.Boolean({ value: this.ordering }));\r\n\t\tif(\"nonce\" in this)\r\n\t\t\toutputArray.push(this.nonce);\r\n\t\tif(\"tsa\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.tsa.toSchema()]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\t//region Create array of extensions\r\n\t\tif(\"extensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.extensions, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tpolicy: this.policy,\r\n\t\t\tmessageImprint: this.messageImprint.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON(),\r\n\t\t\tgenTime: this.genTime\r\n\t\t};\r\n\r\n\t\tif(\"accuracy\" in this)\r\n\t\t\t_object.accuracy = this.accuracy.toJSON();\r\n\r\n\t\tif(\"ordering\" in this)\r\n\t\t\t_object.ordering = this.ordering;\r\n\r\n\t\tif(\"nonce\" in this)\r\n\t\t\t_object.nonce = this.nonce.toJSON();\r\n\r\n\t\tif(\"tsa\" in this)\r\n\t\t\t_object.tsa = this.tsa.toJSON();\r\n\r\n\t\tif(\"extensions\" in this)\r\n\t\t\t_object.extensions = Array.from(this.extensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current TST Info value\r\n\t * @param {{data: ArrayBuffer, notBefore: Date, notAfter: Date}} parameters Input parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(parameters = {})\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\r\n\t\tlet data;\r\n\r\n\t\tlet notBefore = null;\r\n\t\tlet notAfter = null;\r\n\t\t//endregion\r\n\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get initial parameters\r\n\t\tif(\"data\" in parameters)\r\n\t\t\tdata = parameters.data;\r\n\t\telse\r\n\t\t\treturn Promise.reject(\"\\\"data\\\" is a mandatory attribute for TST_INFO verification\");\r\n\r\n\t\tif(\"notBefore\" in parameters)\r\n\t\t\tnotBefore = parameters.notBefore;\r\n\r\n\t\tif(\"notAfter\" in parameters)\r\n\t\t\tnotAfter = parameters.notAfter;\r\n\t\t//endregion\r\n\r\n\t\t//region Check date\r\n\t\tif(notBefore !== null)\r\n\t\t{\r\n\t\t\tif(this.genTime < notBefore)\r\n\t\t\t\treturn Promise.reject(\"Generation time for TSTInfo object is less than notBefore value\");\r\n\t\t}\r\n\t\t\r\n\t\tif(notAfter !== null)\r\n\t\t{\r\n\t\t\tif(this.genTime > notAfter)\r\n\t\t\t\treturn Promise.reject(\"Generation time for TSTInfo object is more than notAfter value\");\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find hashing algorithm\r\n\t\tconst shaAlgorithm = getAlgorithmByOID(this.messageImprint.hashAlgorithm.algorithmId);\r\n\t\tif((\"name\" in shaAlgorithm) === false)\r\n\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${this.messageImprint.hashAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\r\n\t\t//region Calculate message digest for input \"data\" buffer\r\n\t\t// noinspection JSCheckFunctionSignatures\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.digest(shaAlgorithm.name, new Uint8Array(data))\r\n\t\t).then(\r\n\t\t\tresult => isEqualBuffer(result, this.messageImprint.hashedMessage.valueBlock.valueHex)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"TSTInfo.js"}