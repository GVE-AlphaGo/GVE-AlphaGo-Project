{"version":3,"sources":["../src/MacData.js"],"names":["MacData","constructor","parameters","mac","defaultValues","macSalt","iterations","fromSchema","schema","memberName","DigestInfo","asn1js","OctetString","Error","compareWithDefault","memberValue","digestAlgorithm","digest","isEqual","names","Sequence","name","blockName","optional","value","Integer","asn1","compareSchema","verified","result","valueBlock","valueDec","toSchema","outputArray","push","toJSON","output"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport DigestInfo from \"./DigestInfo.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class MacData \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for MacData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {DigestInfo}\r\n\t\t * @desc mac\r\n\t\t */\r\n\t\tthis.mac = getParametersValue(parameters, \"mac\", MacData.defaultValues(\"mac\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc macSalt\r\n\t\t */\r\n\t\tthis.macSalt = getParametersValue(parameters, \"macSalt\", MacData.defaultValues(\"macSalt\"));\r\n\t\t\r\n\t\tif(\"iterations\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @desc iterations\r\n\t\t\t */\r\n\t\t\tthis.iterations = getParametersValue(parameters, \"iterations\", MacData.defaultValues(\"iterations\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"mac\":\r\n\t\t\t\treturn new DigestInfo();\r\n\t\t\tcase \"macSalt\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"iterations\":\r\n\t\t\t\treturn 1;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for MacData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"mac\":\r\n\t\t\t\treturn ((DigestInfo.compareWithDefault(\"digestAlgorithm\", memberValue.digestAlgorithm)) &&\r\n\t\t\t\t(DigestInfo.compareWithDefault(\"digest\", memberValue.digest)));\r\n\t\t\tcase \"macSalt\":\r\n\t\t\t\treturn (memberValue.isEqual(MacData.defaultValues(memberName)));\r\n\t\t\tcase \"iterations\":\r\n\t\t\t\treturn (memberValue === MacData.defaultValues(memberName));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for MacData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * MacData ::= SEQUENCE {\r\n\t *    mac \t\tDigestInfo,\r\n\t *    macSalt       OCTET STRING,\r\n\t *    iterations\tINTEGER DEFAULT 1\r\n\t *    -- Note: The default is for historical reasons and its use is\r\n\t *    -- deprecated. A higher value, like 1024 is recommended.\r\n\t *    }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [optional]\r\n\t\t * @property {string} [mac]\r\n\t\t * @property {string} [macSalt]\r\n\t\t * @property {string} [iterations]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: (names.optional || true),\r\n\t\t\tvalue: [\r\n\t\t\t\tDigestInfo.schema(names.mac || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"mac\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.macSalt || \"macSalt\") }),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.iterations || \"iterations\")\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"mac\",\r\n\t\t\t\"macSalt\",\r\n\t\t\t\"iterations\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tMacData.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tmac: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"mac\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmacSalt: \"macSalt\",\r\n\t\t\t\t\titerations: \"iterations\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for MacData\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.mac = new DigestInfo({ schema: asn1.result.mac });\r\n\t\tthis.macSalt = asn1.result.macSalt;\r\n\t\t\r\n\t\tif(\"iterations\" in asn1.result)\r\n\t\t\tthis.iterations = asn1.result.iterations.valueBlock.valueDec;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tconst outputArray = [\r\n\t\t\tthis.mac.toSchema(),\r\n\t\t\tthis.macSalt\r\n\t\t];\r\n\t\t\r\n\t\tif(\"iterations\" in this)\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.iterations }));\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst output = {\r\n\t\t\tmac: this.mac.toJSON(),\r\n\t\t\tmacSalt: this.macSalt.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"iterations\" in this)\r\n\t\t\toutput.iterations = this.iterations.toJSON();\r\n\t\t\r\n\t\treturn output;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"MacData.js"}