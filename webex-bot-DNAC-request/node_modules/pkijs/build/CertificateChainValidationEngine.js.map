{"version":3,"sources":["../src/CertificateChainValidationEngine.js"],"names":["CertificateChainValidationEngine","constructor","parameters","trustedCerts","defaultValues","certs","crls","ocsps","checkDate","findOrigin","findIssuer","defaultFindOrigin","certificate","validationEngine","tbs","byteLength","encodeTBS","localCert","trustedCert","defaultFindIssuer","result","keyIdentifier","authorityCertIssuer","authorityCertSerialNumber","subject","isEqual","issuer","verificationResult","verify","ex","extensions","extension","extnID","parsedValue","checkCertificate","possibleIssuer","extensionFound","valueBlock","valueHex","push","authorityCertSerialNumberEqual","serialNumber","intermediateCert","i","length","splice","memberName","Date","Error","sort","passedWhenNotRevValues","localCerts","_this","buildPath","checkUnique","array","unique","j","findIssuerResult","buildPathResult","copy","slice","findCRL","issuerCertificates","crlsAndCertificates","filter","element","status","statusMessage","nextUpdate","value","issuerCertificate","crl","findOCSP","hashAlgorithm","signatureAlgorithm","algorithmId","getCertificateStatus","isForCertificate","checkForCA","needToCheckCRL","isCA","mustBeCA","keyUsagePresent","cRLSign","critical","resultCode","resultMessage","view","Uint8Array","cA","basicCheck","path","notBefore","notAfter","ocspResult","crlResult","isCertificateRevoked","isCertificateCA","certificatePath","found","k","shortestLength","shortestIndex","compareDNSName","name","constraint","namePrepared","constraintPrepared","nameSplitted","split","constraintSplitted","nameLen","constrLen","localeCompare","compareRFC822Name","ns","cs","compareUniformResourceIdentifier","charAt","nsPort","compareIPAddress","nameView","constraintView","compareDirectoryName","typesAndValues","nameStart","localResult","type","initialPolicySet","initialExplicitPolicy","initialPolicyMappingInhibit","initialInhibitPolicy","initialPermittedSubtreesSet","initialExcludedSubtreesSet","initialRequiredNameForms","explicitPolicyIndicator","policyMappingInhibitIndicator","inhibitAnyPolicyIndicator","pendingConstraints","Array","explicitPolicyPending","policyMappingInhibitPending","inhibitAnyPolicyPending","permittedSubtrees","excludedSubtrees","requiredNameForms","pathDepth","allPolicies","policiesAndCerts","anyPolicyArray","ii","policyMappings","certPolicies","explicitPolicyStart","s","certificatePolicies","policyIndex","policyIdentifier","certArray","requireExplicitPolicy","inhibitPolicyMapping","valueDec","searchAnyPolicy","mappings","issuerDomainPolicy","subjectDomainPolicy","issuerDomainPolicyIndex","subjectDomainPolicyIndex","n","m","authConstrPolicies","anyPolicyFound","userConstrPolicies","policyResult","subjectAltNames","certPermittedSubtrees","certExcludedSubtrees","concat","altNames","formFound","base","constrGroups","p","groupPermitted","valueExists","group","excluded","error","Object","message"],"mappings":"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","sourcesContent":["import { getParametersValue, isEqualBuffer } from \"pvutils\";\r\nimport { getAlgorithmByOID, stringPrep } from \"./common.js\";\r\n//**************************************************************************************\r\nexport default class CertificateChainValidationEngine\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertificateChainValidationEngine class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<Certificate>}\r\n\t\t * @desc Array of pre-defined trusted (by user) certificates\r\n\t\t */\r\n\t\tthis.trustedCerts = getParametersValue(parameters, \"trustedCerts\", this.defaultValues(\"trustedCerts\"));\r\n\t\t/**\r\n\t\t * @type {Array.<Certificate>}\r\n\t\t * @desc Array with certificate chain. Could be only one end-user certificate in there!\r\n\t\t */\r\n\t\tthis.certs = getParametersValue(parameters, \"certs\", this.defaultValues(\"certs\"));\r\n\t\t/**\r\n\t\t * @type {Array.<CertificateRevocationList>}\r\n\t\t * @desc Array of all CRLs for all certificates from certificate chain\r\n\t\t */\r\n\t\tthis.crls = getParametersValue(parameters, \"crls\", this.defaultValues(\"crls\"));\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @desc Array of all OCSP responses\r\n\t\t */\r\n\t\tthis.ocsps = getParametersValue(parameters, \"ocsps\", this.defaultValues(\"ocsps\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @desc The date at which the check would be\r\n\t\t */\r\n\t\tthis.checkDate = getParametersValue(parameters, \"checkDate\", this.defaultValues(\"checkDate\"));\r\n\t\t/**\r\n\t\t * @type {Function}\r\n\t\t * @desc The date at which the check would be\r\n\t\t */\r\n\t\tthis.findOrigin = getParametersValue(parameters, \"findOrigin\", this.defaultValues(\"findOrigin\"));\r\n\t\t/**\r\n\t\t * @type {Function}\r\n\t\t * @desc The date at which the check would be\r\n\t\t */\r\n\t\tthis.findIssuer = getParametersValue(parameters, \"findIssuer\", this.defaultValues(\"findIssuer\"));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\tstatic defaultFindOrigin(certificate, validationEngine)\r\n\t{\r\n\t\t//region Firstly encode TBS for certificate\r\n\t\tif(certificate.tbs.byteLength === 0)\r\n\t\t\tcertificate.tbs = certificate.encodeTBS();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Intermediate Certificates\r\n\t\tfor(const localCert of validationEngine.certs)\r\n\t\t{\r\n\t\t\t//region Firstly encode TBS for certificate\r\n\t\t\tif(localCert.tbs.byteLength === 0)\r\n\t\t\t\tlocalCert.tbs = localCert.encodeTBS();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(isEqualBuffer(certificate.tbs, localCert.tbs))\r\n\t\t\t\treturn \"Intermediate Certificates\";\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Trusted Certificates\r\n\t\tfor(const trustedCert of validationEngine.trustedCerts)\r\n\t\t{\r\n\t\t\t//region Firstly encode TBS for certificate\r\n\t\t\tif(trustedCert.tbs.byteLength === 0)\r\n\t\t\t\ttrustedCert.tbs = trustedCert.encodeTBS();\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(isEqualBuffer(certificate.tbs, trustedCert.tbs))\r\n\t\t\t\treturn \"Trusted Certificates\";\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn \"Unknown\";\r\n\t}\r\n\t//**********************************************************************************\r\n\tasync defaultFindIssuer(certificate, validationEngine)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet result = [];\r\n\t\t\r\n\t\tlet keyIdentifier = null;\r\n\t\t\r\n\t\tlet authorityCertIssuer = null;\r\n\t\tlet authorityCertSerialNumber = null;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Speed-up searching in case of self-signed certificates\r\n\t\tif(certificate.subject.isEqual(certificate.issuer))\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tconst verificationResult = await certificate.verify();\r\n\t\t\t\tif(verificationResult === true)\r\n\t\t\t\t\treturn [certificate];\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find values to speed-up search\r\n\t\tif(\"extensions\" in certificate)\r\n\t\t{\r\n\t\t\tfor(const extension of certificate.extensions)\r\n\t\t\t{\r\n\t\t\t\tif(extension.extnID === \"2.5.29.35\") // AuthorityKeyIdentifier\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"keyIdentifier\" in extension.parsedValue)\r\n\t\t\t\t\t\tkeyIdentifier = extension.parsedValue.keyIdentifier;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"authorityCertIssuer\" in extension.parsedValue)\r\n\t\t\t\t\t\t\tauthorityCertIssuer = extension.parsedValue.authorityCertIssuer;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(\"authorityCertSerialNumber\" in extension.parsedValue)\r\n\t\t\t\t\t\t\tauthorityCertSerialNumber = extension.parsedValue.authorityCertSerialNumber;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Aux function\r\n\t\tfunction checkCertificate(possibleIssuer)\r\n\t\t{\r\n\t\t\t//region Firstly search for appropriate extensions\r\n\t\t\tif(keyIdentifier !== null)\r\n\t\t\t{\r\n\t\t\t\tif(\"extensions\" in possibleIssuer)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet extensionFound = false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(const extension of possibleIssuer.extensions)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(extension.extnID === \"2.5.29.14\") // SubjectKeyIdentifier\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\textensionFound = true;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(isEqualBuffer(extension.parsedValue.valueBlock.valueHex, keyIdentifier.valueBlock.valueHex))\r\n\t\t\t\t\t\t\t\tresult.push(possibleIssuer);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(extensionFound)\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Now search for authorityCertSerialNumber\r\n\t\t\tlet authorityCertSerialNumberEqual = false;\r\n\t\t\t\r\n\t\t\tif(authorityCertSerialNumber !== null)\r\n\t\t\t\tauthorityCertSerialNumberEqual = possibleIssuer.serialNumber.isEqual(authorityCertSerialNumber);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region And at least search for Issuer data\r\n\t\t\tif(authorityCertIssuer !== null)\r\n\t\t\t{\r\n\t\t\t\tif(possibleIssuer.subject.isEqual(authorityCertIssuer))\r\n\t\t\t\t{\r\n\t\t\t\t\tif(authorityCertSerialNumberEqual)\r\n\t\t\t\t\t\tresult.push(possibleIssuer);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif(certificate.issuer.isEqual(possibleIssuer.subject))\r\n\t\t\t\t\tresult.push(possibleIssuer);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Trusted Certificates\r\n\t\tfor(const trustedCert of validationEngine.trustedCerts)\r\n\t\t\tcheckCertificate(trustedCert);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search in Intermediate Certificates\r\n\t\tfor(const intermediateCert of validationEngine.certs)\r\n\t\t\tcheckCertificate(intermediateCert);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Now perform certificate verification checking\r\n\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tconst verificationResult = await certificate.verify(result[i]);\r\n\t\t\t\tif(verificationResult === false)\r\n\t\t\t\t\tresult.splice(i, 1);\r\n\t\t\t}\r\n\t\t\tcatch(ex)\r\n\t\t\t{\r\n\t\t\t\tresult.splice(i, 1); // Something wrong, remove the certificate\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tdefaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"trustedCerts\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"ocsps\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"checkDate\":\r\n\t\t\t\treturn new Date();\r\n\t\t\tcase \"findOrigin\":\r\n\t\t\t\treturn CertificateChainValidationEngine.defaultFindOrigin;\r\n\t\t\tcase \"findIssuer\":\r\n\t\t\t\treturn this.defaultFindIssuer;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificateChainValidationEngine class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\tasync sort(passedWhenNotRevValues = false)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst localCerts = [];\r\n\t\tconst _this = this;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Building certificate path\r\n\t\tasync function buildPath(certificate)\r\n\t\t{\r\n\t\t\tconst result = [];\r\n\t\t\t\r\n\t\t\t//region Aux function checking array for unique elements\r\n\t\t\tfunction checkUnique(array)\r\n\t\t\t{\r\n\t\t\t\tlet unique = true;\r\n\t\t\t\t\r\n\t\t\t\tfor(let i = 0; i < array.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let j = 0; j < array.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(j === i)\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(array[i] === array[j])\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tunique = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(!unique)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn unique;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tconst findIssuerResult = await _this.findIssuer(certificate, _this);\r\n\t\t\tif(findIssuerResult.length === 0)\r\n\t\t\t\tthrow new Error(\"No valid certificate paths found\");\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < findIssuerResult.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif(isEqualBuffer(findIssuerResult[i].tbs, certificate.tbs))\r\n\t\t\t\t{\r\n\t\t\t\t\tresult.push([findIssuerResult[i]]);\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tconst buildPathResult = await buildPath(findIssuerResult[i]);\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < buildPathResult.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst copy = buildPathResult[j].slice();\r\n\t\t\t\t\tcopy.splice(0, 0, findIssuerResult[i]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(checkUnique(copy))\r\n\t\t\t\t\t\tresult.push(copy);\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tresult.push(buildPathResult[j]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find CRL for specific certificate\r\n\t\tasync function findCRL(certificate)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tconst issuerCertificates = [];\r\n\t\t\tconst crls = [];\r\n\t\t\tconst crlsAndCertificates = [];\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find all possible CRL issuers\r\n\t\t\tissuerCertificates.push(...localCerts.filter(element => certificate.issuer.isEqual(element.subject)));\r\n\t\t\tif(issuerCertificates.length === 0)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: 1,\r\n\t\t\t\t\tstatusMessage: \"No certificate's issuers\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find all CRLs for certificate's issuer\r\n\t\t\tcrls.push(..._this.crls.filter(element => element.issuer.isEqual(certificate.issuer)));\r\n\t\t\tif(crls.length === 0)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: 2,\r\n\t\t\t\t\tstatusMessage: \"No CRLs for specific certificate issuer\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find specific certificate of issuer for each CRL\r\n\t\t\tfor(let i = 0; i < crls.length; i++)\r\n\t\t\t{\r\n\t\t\t\t//region Check \"nextUpdate\" for the CRL\r\n\t\t\t\t// The \"nextUpdate\" is older than \"checkDate\".\r\n\t\t\t\t// Thus we should do have another, updated CRL.\r\n\t\t\t\t// Thus the CRL assumed to be invalid.\r\n\t\t\t\tif(crls[i].nextUpdate.value < _this.checkDate)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < issuerCertificates.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst result = await crls[i].verify({ issuerCertificate: issuerCertificates[j] });\r\n\t\t\t\t\t\tif(result)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcrlsAndCertificates.push({\r\n\t\t\t\t\t\t\t\tcrl: crls[i],\r\n\t\t\t\t\t\t\t\tcertificate: issuerCertificates[j]\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(crlsAndCertificates.length)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tstatus: 0,\r\n\t\t\t\t\tstatusMessage: \"\",\r\n\t\t\t\t\tresult: crlsAndCertificates\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tstatus: 3,\r\n\t\t\t\tstatusMessage: \"No valid CRLs found\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find OCSP for specific certificate\r\n\t\tasync function findOCSP(certificate, issuerCertificate)\r\n\t\t{\r\n\t\t\t//region Get hash algorithm from certificate\r\n\t\t\tconst hashAlgorithm = getAlgorithmByOID(certificate.signatureAlgorithm.algorithmId);\r\n\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\treturn 1;\r\n\t\t\tif((\"hash\" in hashAlgorithm) === false)\r\n\t\t\t\treturn 1;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Search for OCSP response for the certificate\r\n\t\t\tfor(let i = 0; i < _this.ocsps.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst result = await _this.ocsps[i].getCertificateStatus(certificate, issuerCertificate);\r\n\t\t\t\tif(result.isForCertificate)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(result.status === 0)\r\n\t\t\t\t\t\treturn 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn 2;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check for certificate to be CA\r\n\t\tasync function checkForCA(certificate, needToCheckCRL = false)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\tlet isCA = false;\r\n\t\t\tlet mustBeCA = false;\r\n\t\t\tlet keyUsagePresent = false;\r\n\t\t\tlet cRLSign = false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(\"extensions\" in certificate)\r\n\t\t\t{\r\n\t\t\t\tfor(let j = 0; j < certificate.extensions.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((certificate.extensions[j].critical === true) &&\r\n\t\t\t\t\t\t((\"parsedValue\" in certificate.extensions[j]) === false))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\tresultCode: 6,\r\n\t\t\t\t\t\t\tresultMessage: `Unable to parse critical certificate extension: ${certificate.extensions[j].extnID}`\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(certificate.extensions[j].extnID === \"2.5.29.15\") // KeyUsage\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tkeyUsagePresent = true;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconst view = new Uint8Array(certificate.extensions[j].parsedValue.valueBlock.valueHex);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif((view[0] & 0x04) === 0x04) // Set flag \"keyCertSign\"\r\n\t\t\t\t\t\t\tmustBeCA = true;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif((view[0] & 0x02) === 0x02) // Set flag \"cRLSign\"\r\n\t\t\t\t\t\t\tcRLSign = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(certificate.extensions[j].extnID === \"2.5.29.19\") // BasicConstraints\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(\"cA\" in certificate.extensions[j].parsedValue)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(certificate.extensions[j].parsedValue.cA === true)\r\n\t\t\t\t\t\t\t\tisCA = true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif((mustBeCA === true) && (isCA === false))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 3,\r\n\t\t\t\t\t\tresultMessage: \"Unable to build certificate chain - using \\\"keyCertSign\\\" flag set without BasicConstaints\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif((keyUsagePresent === true) && (isCA === true) && (mustBeCA === false))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 4,\r\n\t\t\t\t\t\tresultMessage: \"Unable to build certificate chain - \\\"keyCertSign\\\" flag was not set\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\tif((isCA === true) && (keyUsagePresent === true) && ((needToCheckCRL) && (cRLSign === false)))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 5,\r\n\t\t\t\t\t\tresultMessage: \"Unable to build certificate chain - intermediate certificate must have \\\"cRLSign\\\" key usage flag\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(isCA === false)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tresult: false,\r\n\t\t\t\t\tresultCode: 7,\r\n\t\t\t\t\tresultMessage: \"Unable to build certificate chain - more than one possible end-user certificate\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tresult: true,\r\n\t\t\t\tresultCode: 0,\r\n\t\t\t\tresultMessage: \"\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Basic check for certificate path\r\n\t\tasync function basicCheck(path, checkDate)\r\n\t\t{\r\n\t\t\t//region Check that all dates are valid\r\n\t\t\tfor(let i = 0; i < path.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif((path[i].notBefore.value > checkDate) ||\r\n\t\t\t\t\t(path[i].notAfter.value < checkDate))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 8,\r\n\t\t\t\t\t\tresultMessage: \"The certificate is either not yet valid or expired\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check certificate name chain\r\n\t\t\t\r\n\t\t\t// We should have at least two certificates: end entity and trusted root\r\n\t\t\tif(path.length < 2)\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tresult: false,\r\n\t\t\t\t\tresultCode: 9,\r\n\t\t\t\t\tresultMessage: \"Too short certificate path\"\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tfor(let i = (path.length - 2); i >= 0; i--)\r\n\t\t\t{\r\n\t\t\t\t//region Check that we do not have a \"self-signed\" certificate\r\n\t\t\t\tif(path[i].issuer.isEqual(path[i].subject) === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(path[i].issuer.isEqual(path[i + 1].subject) === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\tresultCode: 10,\r\n\t\t\t\t\t\t\tresultMessage: \"Incorrect name chaining\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check each certificate (except \"trusted root\") to be non-revoked\r\n\t\t\tif((_this.crls.length !== 0) || (_this.ocsps.length !== 0)) // If CRLs and OCSPs are empty then we consider all certificates to be valid\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < (path.length - 1); i++)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\tlet ocspResult = 2;\r\n\t\t\t\t\tlet crlResult = {\r\n\t\t\t\t\t\tstatus: 0,\r\n\t\t\t\t\t\tstatusMessage: \"\"\r\n\t\t\t\t\t};\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check OCSPs first\r\n\t\t\t\t\tif(_this.ocsps.length !== 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tocspResult = await findOCSP(path[i], path[i + 1]);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tswitch(ocspResult)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 12,\r\n\t\t\t\t\t\t\t\t\tresultMessage: \"One of certificates was revoked via OCSP response\"\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\tcase 2: // continue to check the certificate with CRL\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check CRLs\r\n\t\t\t\t\tif(_this.crls.length !== 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcrlResult = await findCRL(path[i]);\r\n\r\n\t\t\t\t\t\tif(crlResult.status === 0)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor(let j = 0; j < crlResult.result.length; j++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Check that the CRL issuer certificate have not been revoked\r\n\t\t\t\t\t\t\t\tconst isCertificateRevoked = crlResult.result[j].crl.isCertificateRevoked(path[i]);\r\n\t\t\t\t\t\t\t\tif(isCertificateRevoked)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\t\tresultCode: 12,\r\n\t\t\t\t\t\t\t\t\t\tresultMessage: \"One of certificates had been revoked\"\r\n\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Check that the CRL issuer certificate is a CA certificate\r\n\t\t\t\t\t\t\t\tconst isCertificateCA = await checkForCA(crlResult.result[j].certificate, true);\r\n\t\t\t\t\t\t\t\tif(isCertificateCA.result === false)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\t\tresultCode: 13,\r\n\t\t\t\t\t\t\t\t\t\tresultMessage: \"CRL issuer certificate is not a CA certificate or does not have crlSign flag\"\r\n\t\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(passedWhenNotRevValues === false)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tthrow {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 11,\r\n\t\t\t\t\t\t\t\t\tresultMessage: `No revocation values found for one of certificates: ${crlResult.statusMessage}`\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(ocspResult === 2)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\tresultCode: 11,\r\n\t\t\t\t\t\t\t\tresultMessage: \"No revocation values found for one of certificates\"\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t//region Check we do have links to revocation values inside issuer's certificate\r\n\t\t\t\t\tif((ocspResult === 2) && (crlResult.status === 2) && passedWhenNotRevValues)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst issuerCertificate = path[i + 1];\r\n\t\t\t\t\t\tlet extensionFound = false;\r\n\r\n\t\t\t\t\t\tif(\"extensions\" in issuerCertificate)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfor(const extension of issuerCertificate.extensions)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tswitch(extension.extnID)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcase \"2.5.29.31\": // CRLDistributionPoints\r\n\t\t\t\t\t\t\t\t\tcase \"2.5.29.46\": // FreshestCRL\r\n\t\t\t\t\t\t\t\t\tcase \"1.3.6.1.5.5.7.1.1\": // AuthorityInfoAccess\r\n\t\t\t\t\t\t\t\t\t\textensionFound = true;\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(extensionFound)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthrow {\r\n\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\tresultCode: 11,\r\n\t\t\t\t\t\t\t\tresultMessage: `No revocation values found for one of certificates: ${crlResult.statusMessage}`\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check each certificate (except \"end entity\") in the path to be a CA certificate\r\n\t\t\tfor(let i = 1; i < path.length; i++)\r\n\t\t\t{\r\n\t\t\t\tconst result = await checkForCA(path[i]);\r\n\t\t\t\tif(result.result === false)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: 14,\r\n\t\t\t\t\t\tresultMessage: \"One of intermediate certificates is not a CA certificate\"\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tresult: true\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Do main work\r\n\t\t//region Initialize \"localCerts\" by value of \"_this.certs\" + \"_this.trustedCerts\" arrays\r\n\t\tlocalCerts.push(..._this.trustedCerts);\r\n\t\tlocalCerts.push(..._this.certs);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check all certificates for been unique\r\n\t\tfor(let i = 0; i < localCerts.length; i++)\r\n\t\t{\r\n\t\t\tfor(let j = 0; j < localCerts.length; j++)\r\n\t\t\t{\r\n\t\t\t\tif(i === j)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t\r\n\t\t\t\tif(isEqualBuffer(localCerts[i].tbs, localCerts[j].tbs))\r\n\t\t\t\t{\r\n\t\t\t\t\tlocalCerts.splice(j, 1);\r\n\t\t\t\t\ti = 0;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet result;\r\n\t\tconst certificatePath = [localCerts[localCerts.length - 1]]; // The \"end entity\" certificate must be the least in \"certs\" array\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Build path for \"end entity\" certificate\r\n\t\tresult = await buildPath(localCerts[localCerts.length - 1]);\r\n\t\tif(result.length === 0)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tresult: false,\r\n\t\t\t\tresultCode: 60,\r\n\t\t\t\tresultMessage: \"Unable to find certificate path\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Exclude certificate paths not ended with \"trusted roots\"\r\n\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t{\r\n\t\t\tlet found = false;\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < (result[i]).length; j++)\r\n\t\t\t{\r\n\t\t\t\tconst certificate = (result[i])[j];\r\n\t\t\t\t\r\n\t\t\t\tfor(let k = 0; k < _this.trustedCerts.length; k++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(isEqualBuffer(certificate.tbs, _this.trustedCerts[k].tbs))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(found)\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(!found)\r\n\t\t\t{\r\n\t\t\t\tresult.splice(i, 1);\r\n\t\t\t\ti = 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tif(result.length === 0)\r\n\t\t{\r\n\t\t\tthrow {\r\n\t\t\t\tresult: false,\r\n\t\t\t\tresultCode: 97,\r\n\t\t\t\tresultMessage: \"No valid certificate paths found\"\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find shortest certificate path (for the moment it is the only criteria)\r\n\t\tlet shortestLength = result[0].length;\r\n\t\tlet shortestIndex = 0;\r\n\t\t\r\n\t\tfor(let i = 0; i < result.length; i++)\r\n\t\t{\r\n\t\t\tif(result[i].length < shortestLength)\r\n\t\t\t{\r\n\t\t\t\tshortestLength = result[i].length;\r\n\t\t\t\tshortestIndex = i;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create certificate path for basic check\r\n\t\tfor(let i = 0; i < result[shortestIndex].length; i++)\r\n\t\t\tcertificatePath.push((result[shortestIndex])[i]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Perform basic checking for all certificates in the path\r\n\t\tresult = await basicCheck(certificatePath, _this.checkDate);\r\n\t\tif(result.result === false)\r\n\t\t\tthrow result;\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn certificatePath;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Major verification function for certificate chain.\r\n\t * @param {{initialPolicySet, initialExplicitPolicy, initialPolicyMappingInhibit, initialInhibitPolicy, initialPermittedSubtreesSet, initialExcludedSubtreesSet, initialRequiredNameForms}} [parameters]\r\n\t * @returns {Promise}\r\n\t */\r\n\tasync verify(parameters = {})\r\n\t{\r\n\t\t//region Auxiliary functions for name constraints checking\r\n\t\tfunction compareDNSName(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two dNSName values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"String\">DNS from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"String\">Constraint for DNS from name</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Make a \"string preparation\" for both name and constrain\r\n\t\t\tconst namePrepared = stringPrep(name);\r\n\t\t\tconst constraintPrepared = stringPrep(constraint);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Make a \"splitted\" versions of \"constraint\" and \"name\"\r\n\t\t\tconst nameSplitted = namePrepared.split(\".\");\r\n\t\t\tconst constraintSplitted = constraintPrepared.split(\".\");\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Length calculation and additional check\r\n\t\t\tconst nameLen = nameSplitted.length;\r\n\t\t\tconst constrLen = constraintSplitted.length;\r\n\t\t\t\r\n\t\t\tif((nameLen === 0) || (constrLen === 0) || (nameLen < constrLen))\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check that no part of \"name\" has zero length\r\n\t\t\tfor(let i = 0; i < nameLen; i++)\r\n\t\t\t{\r\n\t\t\t\tif(nameSplitted[i].length === 0)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check that no part of \"constraint\" has zero length\r\n\t\t\tfor(let i = 0; i < constrLen; i++)\r\n\t\t\t{\r\n\t\t\t\tif(constraintSplitted[i].length === 0)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(i === 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(constrLen === 1)\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check that \"name\" has a tail as \"constraint\"\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < constrLen; i++)\r\n\t\t\t{\r\n\t\t\t\tif(constraintSplitted[constrLen - 1 - i].length === 0)\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t\r\n\t\t\t\tif(nameSplitted[nameLen - 1 - i].localeCompare(constraintSplitted[constrLen - 1 - i]) !== 0)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tfunction compareRFC822Name(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two rfc822Name values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"String\">E-mail address from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"String\">Constraint for e-mail address from name</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Make a \"string preparation\" for both name and constrain\r\n\t\t\tconst namePrepared = stringPrep(name);\r\n\t\t\tconst constraintPrepared = stringPrep(constraint);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Make a \"splitted\" versions of \"constraint\" and \"name\"\r\n\t\t\tconst nameSplitted = namePrepared.split(\"@\");\r\n\t\t\tconst constraintSplitted = constraintPrepared.split(\"@\");\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Splitted array length checking\r\n\t\t\tif((nameSplitted.length === 0) || (constraintSplitted.length === 0) || (nameSplitted.length < constraintSplitted.length))\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tif(constraintSplitted.length === 1)\r\n\t\t\t{\r\n\t\t\t\tconst result = compareDNSName(nameSplitted[1], constraintSplitted[0]);\r\n\t\t\t\t\r\n\t\t\t\tif(result)\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Make a \"splitted\" versions of domain name from \"constraint\" and \"name\"\r\n\t\t\t\t\tconst ns = nameSplitted[1].split(\".\");\r\n\t\t\t\t\tconst cs = constraintSplitted[0].split(\".\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(cs[0].length === 0)\r\n\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn ns.length === cs.length;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn (namePrepared.localeCompare(constraintPrepared) === 0);\r\n\t\t}\r\n\t\t\r\n\t\tfunction compareUniformResourceIdentifier(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two uniformResourceIdentifier values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"String\">uniformResourceIdentifier from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"String\">Constraint for uniformResourceIdentifier from name</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Make a \"string preparation\" for both name and constrain\r\n\t\t\tlet namePrepared = stringPrep(name);\r\n\t\t\tconst constraintPrepared = stringPrep(constraint);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Find out a major URI part to compare with\r\n\t\t\tconst ns = namePrepared.split(\"/\");\r\n\t\t\tconst cs = constraintPrepared.split(\"/\");\r\n\t\t\t\r\n\t\t\tif(cs.length > 1) // Malformed constraint\r\n\t\t\t\treturn false;\r\n\t\t\t\r\n\t\t\tif(ns.length > 1) // Full URI string\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < ns.length; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((ns[i].length > 0) && (ns[i].charAt(ns[i].length - 1) !== \":\"))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst nsPort = ns[i].split(\":\");\r\n\t\t\t\t\t\tnamePrepared = nsPort[0];\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tconst result = compareDNSName(namePrepared, constraintPrepared);\r\n\t\t\t\r\n\t\t\tif(result)\r\n\t\t\t{\r\n\t\t\t\t//region Make a \"splitted\" versions of \"constraint\" and \"name\"\r\n\t\t\t\tconst nameSplitted = namePrepared.split(\".\");\r\n\t\t\t\tconst constraintSplitted = constraintPrepared.split(\".\");\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tif(constraintSplitted[0].length === 0)\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t\r\n\t\t\t\treturn nameSplitted.length === constraintSplitted.length;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tfunction compareIPAddress(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two iPAddress values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"in_window.org.pkijs.asn1.OCTETSTRING\">iPAddress from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"in_window.org.pkijs.asn1.OCTETSTRING\">Constraint for iPAddress from name</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Common variables\r\n\t\t\tconst nameView = new Uint8Array(name.valueBlock.valueHex);\r\n\t\t\tconst constraintView = new Uint8Array(constraint.valueBlock.valueHex);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with IPv4 addresses\r\n\t\t\tif((nameView.length === 4) && (constraintView.length === 8))\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < 4; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((nameView[i] ^ constraintView[i]) & constraintView[i + 4])\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with IPv6 addresses\r\n\t\t\tif((nameView.length === 16) && (constraintView.length === 32))\r\n\t\t\t{\r\n\t\t\t\tfor(let i = 0; i < 16; i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((nameView[i] ^ constraintView[i]) & constraintView[i + 16])\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\t\r\n\t\tfunction compareDirectoryName(name, constraint)\r\n\t\t{\r\n\t\t\t/// <summary>Compare two directoryName values</summary>\r\n\t\t\t/// <param name=\"name\" type=\"in_window.org.pkijs.simpl.RDN\">directoryName from name</param>\r\n\t\t\t/// <param name=\"constraint\" type=\"in_window.org.pkijs.simpl.RDN\">Constraint for directoryName from name</param>\r\n\t\t\t/// <param name=\"any\" type=\"Boolean\">Boolean flag - should be comparision interrupted after first match or we need to match all \"constraints\" parts</param>\r\n\t\t\t/// <returns type=\"Boolean\">Boolean result - valid or invalid the \"name\" against the \"constraint\"</returns>\r\n\t\t\t\r\n\t\t\t//region Initial check\r\n\t\t\tif((name.typesAndValues.length === 0) || (constraint.typesAndValues.length === 0))\r\n\t\t\t\treturn true;\r\n\t\t\t\r\n\t\t\tif(name.typesAndValues.length < constraint.typesAndValues.length)\r\n\t\t\t\treturn false;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Initial variables\r\n\t\t\tlet result = true;\r\n\t\t\tlet nameStart = 0;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < constraint.typesAndValues.length; i++)\r\n\t\t\t{\r\n\t\t\t\tlet localResult = false;\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = nameStart; j < name.typesAndValues.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlocalResult = name.typesAndValues[j].isEqual(constraint.typesAndValues[i]);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(name.typesAndValues[j].type === constraint.typesAndValues[i].type)\r\n\t\t\t\t\t\tresult = result && localResult;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(localResult === true)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((nameStart === 0) || (nameStart === j))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tnameStart = j + 1;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse // Structure of \"name\" must be the same with \"constraint\"\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(localResult === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn (nameStart === 0) ? false : result;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\t//region Initial checks\r\n\t\t\tif(this.certs.length === 0)\r\n\t\t\t\tthrow \"Empty certificate array\";\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Get input variables\r\n\t\t\tlet passedWhenNotRevValues = false;\r\n\r\n\t\t\tif(\"passedWhenNotRevValues\" in parameters)\r\n\t\t\t\tpassedWhenNotRevValues = parameters.passedWhenNotRevValues;\r\n\r\n\t\t\tlet initialPolicySet = [];\r\n\t\t\tinitialPolicySet.push(\"2.5.29.32.0\"); // \"anyPolicy\"\r\n\t\t\t\r\n\t\t\tlet initialExplicitPolicy = false;\r\n\t\t\tlet initialPolicyMappingInhibit = false;\r\n\t\t\tlet initialInhibitPolicy = false;\r\n\t\t\t\r\n\t\t\tlet initialPermittedSubtreesSet = []; // Array of \"simpl.x509.GeneralSubtree\"\r\n\t\t\tlet initialExcludedSubtreesSet = [];  // Array of \"simpl.x509.GeneralSubtree\"\r\n\t\t\tlet initialRequiredNameForms = [];    // Array of \"simpl.x509.GeneralSubtree\"\r\n\t\t\t\r\n\t\t\tif(\"initialPolicySet\" in parameters)\r\n\t\t\t\tinitialPolicySet = parameters.initialPolicySet;\r\n\t\t\t\r\n\t\t\tif(\"initialExplicitPolicy\" in parameters)\r\n\t\t\t\tinitialExplicitPolicy = parameters.initialExplicitPolicy;\r\n\t\t\t\r\n\t\t\tif(\"initialPolicyMappingInhibit\" in parameters)\r\n\t\t\t\tinitialPolicyMappingInhibit = parameters.initialPolicyMappingInhibit;\r\n\t\t\t\r\n\t\t\tif(\"initialInhibitPolicy\" in parameters)\r\n\t\t\t\tinitialInhibitPolicy = parameters.initialInhibitPolicy;\r\n\t\t\t\r\n\t\t\tif(\"initialPermittedSubtreesSet\" in parameters)\r\n\t\t\t\tinitialPermittedSubtreesSet = parameters.initialPermittedSubtreesSet;\r\n\t\t\t\r\n\t\t\tif(\"initialExcludedSubtreesSet\" in parameters)\r\n\t\t\t\tinitialExcludedSubtreesSet = parameters.initialExcludedSubtreesSet;\r\n\t\t\t\r\n\t\t\tif(\"initialRequiredNameForms\" in parameters)\r\n\t\t\t\tinitialRequiredNameForms = parameters.initialRequiredNameForms;\r\n\t\t\t\r\n\t\t\tlet explicitPolicyIndicator = initialExplicitPolicy;\r\n\t\t\tlet policyMappingInhibitIndicator = initialPolicyMappingInhibit;\r\n\t\t\tlet inhibitAnyPolicyIndicator = initialInhibitPolicy;\r\n\t\t\t\r\n\t\t\tconst pendingConstraints = new Array(3);\r\n\t\t\tpendingConstraints[0] = false; // For \"explicitPolicyPending\"\r\n\t\t\tpendingConstraints[1] = false; // For \"policyMappingInhibitPending\"\r\n\t\t\tpendingConstraints[2] = false; // For \"inhibitAnyPolicyPending\"\r\n\t\t\t\r\n\t\t\tlet explicitPolicyPending = 0;\r\n\t\t\tlet policyMappingInhibitPending = 0;\r\n\t\t\tlet inhibitAnyPolicyPending = 0;\r\n\t\t\t\r\n\t\t\tlet permittedSubtrees = initialPermittedSubtreesSet;\r\n\t\t\tlet excludedSubtrees = initialExcludedSubtreesSet;\r\n\t\t\tconst requiredNameForms = initialRequiredNameForms;\r\n\t\t\t\r\n\t\t\tlet pathDepth = 1;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Sorting certificates in the chain array\r\n\t\t\tthis.certs = await this.sort(passedWhenNotRevValues);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with policies\r\n\t\t\t//region Support variables\r\n\t\t\tconst allPolicies = []; // Array of all policies (string values)\r\n\t\t\tallPolicies.push(\"2.5.29.32.0\"); // Put \"anyPolicy\" at first place\r\n\t\t\t\r\n\t\t\tconst policiesAndCerts = []; // In fact \"array of array\" where rows are for each specific policy, column for each certificate and value is \"true/false\"\r\n\t\t\t\r\n\t\t\tconst anyPolicyArray = new Array(this.certs.length - 1); // Minus \"trusted anchor\"\r\n\t\t\tfor(let ii = 0; ii < (this.certs.length - 1); ii++)\r\n\t\t\t\tanyPolicyArray[ii] = true;\r\n\t\t\t\r\n\t\t\tpoliciesAndCerts.push(anyPolicyArray);\r\n\t\t\t\r\n\t\t\tconst policyMappings = new Array(this.certs.length - 1); // Array of \"PolicyMappings\" for each certificate\r\n\t\t\tconst certPolicies = new Array(this.certs.length - 1); // Array of \"CertificatePolicies\" for each certificate\r\n\t\t\t\r\n\t\t\tlet explicitPolicyStart = (explicitPolicyIndicator) ? (this.certs.length - 1) : (-1);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Gather all neccessary information from certificate chain\r\n\t\t\tfor(let i = (this.certs.length - 2); i >= 0; i--, pathDepth++)\r\n\t\t\t{\r\n\t\t\t\tif(\"extensions\" in this.certs[i])\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Get information about certificate extensions\r\n\t\t\t\t\tfor(let j = 0; j < this.certs[i].extensions.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region CertificatePolicies\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.32\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tcertPolicies[i] = this.certs[i].extensions[j].parsedValue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//region Remove entry from \"anyPolicies\" for the certificate\r\n\t\t\t\t\t\t\tfor(let s = 0; s < allPolicies.length; s++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(allPolicies[s] === \"2.5.29.32.0\")\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tdelete (policiesAndCerts[s])[i];\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].extensions[j].parsedValue.certificatePolicies.length; k++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tlet policyIndex = (-1);\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Try to find extension in \"allPolicies\" array\r\n\t\t\t\t\t\t\t\tfor(let s = 0; s < allPolicies.length; s++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.certificatePolicies[k].policyIdentifier === allPolicies[s])\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpolicyIndex = s;\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(policyIndex === (-1))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tallPolicies.push(this.certs[i].extensions[j].parsedValue.certificatePolicies[k].policyIdentifier);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tconst certArray = new Array(this.certs.length - 1);\r\n\t\t\t\t\t\t\t\t\tcertArray[i] = true;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tpoliciesAndCerts.push(certArray);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t(policiesAndCerts[policyIndex])[i] = true;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region PolicyMappings\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.33\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(policyMappingInhibitIndicator)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\t\tresultCode: 98,\r\n\t\t\t\t\t\t\t\t\tresultMessage: \"Policy mapping prohibited\"\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tpolicyMappings[i] = this.certs[i].extensions[j].parsedValue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region PolicyConstraints\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.36\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(explicitPolicyIndicator === false)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region requireExplicitPolicy\r\n\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.requireExplicitPolicy === 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\texplicitPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\t\texplicitPolicyStart = i;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(pendingConstraints[0] === false)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpendingConstraints[0] = true;\r\n\t\t\t\t\t\t\t\t\t\texplicitPolicyPending = this.certs[i].extensions[j].parsedValue.requireExplicitPolicy;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\texplicitPolicyPending = (explicitPolicyPending > this.certs[i].extensions[j].parsedValue.requireExplicitPolicy) ? this.certs[i].extensions[j].parsedValue.requireExplicitPolicy : explicitPolicyPending;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region inhibitPolicyMapping\r\n\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping === 0)\r\n\t\t\t\t\t\t\t\t\tpolicyMappingInhibitIndicator = true;\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(pendingConstraints[1] === false)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpendingConstraints[1] = true;\r\n\t\t\t\t\t\t\t\t\t\tpolicyMappingInhibitPending = this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\tpolicyMappingInhibitPending = (policyMappingInhibitPending > (this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1)) ? (this.certs[i].extensions[j].parsedValue.inhibitPolicyMapping + 1) : policyMappingInhibitPending;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region InhibitAnyPolicy\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.54\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(inhibitAnyPolicyIndicator === false)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(this.certs[i].extensions[j].parsedValue.valueBlock.valueDec === 0)\r\n\t\t\t\t\t\t\t\t\tinhibitAnyPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(pendingConstraints[2] === false)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tpendingConstraints[2] = true;\r\n\t\t\t\t\t\t\t\t\t\tinhibitAnyPolicyPending = this.certs[i].extensions[j].parsedValue.valueBlock.valueDec;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t\t\tinhibitAnyPolicyPending = (inhibitAnyPolicyPending > this.certs[i].extensions[j].parsedValue.valueBlock.valueDec) ? this.certs[i].extensions[j].parsedValue.valueBlock.valueDec : inhibitAnyPolicyPending;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check \"inhibitAnyPolicyIndicator\"\r\n\t\t\t\t\tif(inhibitAnyPolicyIndicator === true)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlet policyIndex = (-1);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Find \"anyPolicy\" index\r\n\t\t\t\t\t\tfor(let searchAnyPolicy = 0; searchAnyPolicy < allPolicies.length; searchAnyPolicy++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(allPolicies[searchAnyPolicy] === \"2.5.29.32.0\")\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpolicyIndex = searchAnyPolicy;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(policyIndex !== (-1))\r\n\t\t\t\t\t\t\tdelete (policiesAndCerts[0])[i]; // Unset value to \"undefined\" for \"anyPolicies\" value for current certificate\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Process with \"pending constraints\"\r\n\t\t\t\t\tif(explicitPolicyIndicator === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(pendingConstraints[0] === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\texplicitPolicyPending--;\r\n\t\t\t\t\t\t\tif(explicitPolicyPending === 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\texplicitPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\texplicitPolicyStart = i;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tpendingConstraints[0] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(policyMappingInhibitIndicator === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(pendingConstraints[1] === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tpolicyMappingInhibitPending--;\r\n\t\t\t\t\t\t\tif(policyMappingInhibitPending === 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tpolicyMappingInhibitIndicator = true;\r\n\t\t\t\t\t\t\t\tpendingConstraints[1] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(inhibitAnyPolicyIndicator === false)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(pendingConstraints[2] === true)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tinhibitAnyPolicyPending--;\r\n\t\t\t\t\t\t\tif(inhibitAnyPolicyPending === 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tinhibitAnyPolicyIndicator = true;\r\n\t\t\t\t\t\t\t\tpendingConstraints[2] = false;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Working with policy mappings\r\n\t\t\tfor(let i = 0; i < (this.certs.length - 1); i++)\r\n\t\t\t{\r\n\t\t\t\t//region Check that there is \"policy mapping\" for level \"i + 1\"\r\n\t\t\t\tif((i < (this.certs.length - 2)) && (typeof policyMappings[i + 1] !== \"undefined\"))\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let k = 0; k < policyMappings[i + 1].mappings.length; k++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Check that we do not have \"anyPolicy\" in current mapping\r\n\t\t\t\t\t\tif((policyMappings[i + 1].mappings[k].issuerDomainPolicy === \"2.5.29.32.0\") || (policyMappings[i + 1].mappings[k].subjectDomainPolicy === \"2.5.29.32.0\"))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\t\t\tresultCode: 99,\r\n\t\t\t\t\t\t\t\tresultMessage: \"The \\\"anyPolicy\\\" should not be a part of policy mapping scheme\"\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tlet issuerDomainPolicyIndex = (-1);\r\n\t\t\t\t\t\tlet subjectDomainPolicyIndex = (-1);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Search for index of policies indedes\r\n\t\t\t\t\t\tfor(let n = 0; n < allPolicies.length; n++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(allPolicies[n] === policyMappings[i + 1].mappings[k].issuerDomainPolicy)\r\n\t\t\t\t\t\t\t\tissuerDomainPolicyIndex = n;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(allPolicies[n] === policyMappings[i + 1].mappings[k].subjectDomainPolicy)\r\n\t\t\t\t\t\t\t\tsubjectDomainPolicyIndex = n;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Delete existing \"issuerDomainPolicy\" because on the level we mapped the policy to another one\r\n\t\t\t\t\t\tif(typeof (policiesAndCerts[issuerDomainPolicyIndex])[i] !== \"undefined\")\r\n\t\t\t\t\t\t\tdelete (policiesAndCerts[issuerDomainPolicyIndex])[i];\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Check all policies for the certificate\r\n\t\t\t\t\t\tfor(let j = 0; j < certPolicies[i].certificatePolicies.length; j++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(policyMappings[i + 1].mappings[k].subjectDomainPolicy === certPolicies[i].certificatePolicies[j].policyIdentifier)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Set mapped policy for current certificate\r\n\t\t\t\t\t\t\t\tif((issuerDomainPolicyIndex !== (-1)) && (subjectDomainPolicyIndex !== (-1)))\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let m = 0; m <= i; m++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(typeof (policiesAndCerts[subjectDomainPolicyIndex])[m] !== \"undefined\")\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t(policiesAndCerts[issuerDomainPolicyIndex])[m] = true;\r\n\t\t\t\t\t\t\t\t\t\t\tdelete (policiesAndCerts[subjectDomainPolicyIndex])[m];\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Working with \"explicitPolicyIndicator\" and \"anyPolicy\"\r\n\t\t\tfor(let i = 0; i < allPolicies.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif(allPolicies[i] === \"2.5.29.32.0\")\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let j = 0; j < explicitPolicyStart; j++)\r\n\t\t\t\t\t\tdelete (policiesAndCerts[i])[j];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Create \"set of authorities-constrained policies\"\r\n\t\t\tconst authConstrPolicies = [];\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < policiesAndCerts.length; i++)\r\n\t\t\t{\r\n\t\t\t\tlet found = true;\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < (this.certs.length - 1); j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet anyPolicyFound = false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((j < explicitPolicyStart) && (allPolicies[i] === \"2.5.29.32.0\") && (allPolicies.length > 1))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfound = false;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(typeof (policiesAndCerts[i])[j] === \"undefined\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif(j >= explicitPolicyStart)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Search for \"anyPolicy\" in the policy set\r\n\t\t\t\t\t\t\tfor(let k = 0; k < allPolicies.length; k++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(allPolicies[k] === \"2.5.29.32.0\")\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif((policiesAndCerts[k])[j] === true)\r\n\t\t\t\t\t\t\t\t\t\tanyPolicyFound = true;\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(!anyPolicyFound)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tfound = false;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(found === true)\r\n\t\t\t\t\tauthConstrPolicies.push(allPolicies[i]);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Create \"set of user-constrained policies\"\r\n\t\t\tlet userConstrPolicies = [];\r\n\t\t\t\r\n\t\t\tif((initialPolicySet.length === 1) && (initialPolicySet[0] === \"2.5.29.32.0\") && (explicitPolicyIndicator === false))\r\n\t\t\t\tuserConstrPolicies = initialPolicySet;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tif((authConstrPolicies.length === 1) && (authConstrPolicies[0] === \"2.5.29.32.0\"))\r\n\t\t\t\t\tuserConstrPolicies = initialPolicySet;\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let i = 0; i < authConstrPolicies.length; i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(let j = 0; j < initialPolicySet.length; j++)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif((initialPolicySet[j] === authConstrPolicies[i]) || (initialPolicySet[j] === \"2.5.29.32.0\"))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tuserConstrPolicies.push(authConstrPolicies[i]);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Combine output object\r\n\t\t\tconst policyResult = {\r\n\t\t\t\tresult: (userConstrPolicies.length > 0),\r\n\t\t\t\tresultCode: 0,\r\n\t\t\t\tresultMessage: (userConstrPolicies.length > 0) ? \"\" : \"Zero \\\"userConstrPolicies\\\" array, no intersections with \\\"authConstrPolicies\\\"\",\r\n\t\t\t\tauthConstrPolicies,\r\n\t\t\t\tuserConstrPolicies,\r\n\t\t\t\texplicitPolicyIndicator,\r\n\t\t\t\tpolicyMappings,\r\n\t\t\t\tcertificatePath: this.certs\r\n\t\t\t};\r\n\t\t\t\r\n\t\t\tif(userConstrPolicies.length === 0)\r\n\t\t\t\treturn policyResult;\r\n\t\t\t//endregion\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Work with name constraints\r\n\t\t\t//region Check a result from \"policy checking\" part\r\n\t\t\tif(policyResult.result === false)\r\n\t\t\t\treturn policyResult;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check all certificates, excluding \"trust anchor\"\r\n\t\t\tpathDepth = 1;\r\n\t\t\t\r\n\t\t\tfor(let i = (this.certs.length - 2); i >= 0; i--, pathDepth++)\r\n\t\t\t{\r\n\t\t\t\t//region Support variables\r\n\t\t\t\tlet subjectAltNames = [];\r\n\t\t\t\t\r\n\t\t\t\tlet certPermittedSubtrees = [];\r\n\t\t\t\tlet certExcludedSubtrees = [];\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tif(\"extensions\" in this.certs[i])\r\n\t\t\t\t{\r\n\t\t\t\t\tfor(let j = 0; j < this.certs[i].extensions.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region NameConstraints\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.30\")\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(\"permittedSubtrees\" in this.certs[i].extensions[j].parsedValue)\r\n\t\t\t\t\t\t\t\tcertPermittedSubtrees = certPermittedSubtrees.concat(this.certs[i].extensions[j].parsedValue.permittedSubtrees);\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(\"excludedSubtrees\" in this.certs[i].extensions[j].parsedValue)\r\n\t\t\t\t\t\t\t\tcertExcludedSubtrees = certExcludedSubtrees.concat(this.certs[i].extensions[j].parsedValue.excludedSubtrees);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region SubjectAltName\r\n\t\t\t\t\t\tif(this.certs[i].extensions[j].extnID === \"2.5.29.17\")\r\n\t\t\t\t\t\t\tsubjectAltNames = subjectAltNames.concat(this.certs[i].extensions[j].parsedValue.altNames);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t//region Checking for \"required name forms\"\r\n\t\t\t\tlet formFound = (requiredNameForms.length <= 0);\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < requiredNameForms.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(requiredNameForms[j].base.type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase 4: // directoryName\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(requiredNameForms[j].base.value.typesAndValues.length !== this.certs[i].subject.typesAndValues.length)\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tformFound = true;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].subject.typesAndValues.length; k++)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(this.certs[i].subject.typesAndValues[k].type !== requiredNameForms[j].base.value.typesAndValues[k].type)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tformFound = false;\r\n\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif(formFound === true)\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault: // ??? Probably here we should reject the certificate ???\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(formFound === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tpolicyResult.result = false;\r\n\t\t\t\t\tpolicyResult.resultCode = 21;\r\n\t\t\t\t\tpolicyResult.resultMessage = \"No neccessary name form found\";\r\n\t\t\t\t\t\r\n\t\t\t\t\tthrow policyResult;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Checking for \"permited sub-trees\"\r\n\t\t\t\t//region Make groups for all types of constraints\r\n\t\t\t\tconst constrGroups = []; // Array of array for groupped constraints\r\n\t\t\t\tconstrGroups[0] = []; // rfc822Name\r\n\t\t\t\tconstrGroups[1] = []; // dNSName\r\n\t\t\t\tconstrGroups[2] = []; // directoryName\r\n\t\t\t\tconstrGroups[3] = []; // uniformResourceIdentifier\r\n\t\t\t\tconstrGroups[4] = []; // iPAddress\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < permittedSubtrees.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(permittedSubtrees[j].base.type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region rfc822Name\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tconstrGroups[0].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region dNSName\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tconstrGroups[1].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region directoryName\r\n\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\tconstrGroups[2].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region uniformResourceIdentifier\r\n\t\t\t\t\t\tcase 6:\r\n\t\t\t\t\t\t\tconstrGroups[3].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region iPAddress\r\n\t\t\t\t\t\tcase 7:\r\n\t\t\t\t\t\t\tconstrGroups[4].push(permittedSubtrees[j]);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Check name constraints groupped by type, one-by-one\r\n\t\t\t\tfor(let p = 0; p < 5; p++)\r\n\t\t\t\t{\r\n\t\t\t\t\tlet groupPermitted = false;\r\n\t\t\t\t\tlet valueExists = false;\r\n\t\t\t\t\tconst group = constrGroups[p];\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor(let j = 0; j < group.length; j++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tswitch(p)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region rfc822Name\r\n\t\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 1) // rfc822Name\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareRFC822Name(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\telse // Try to find out \"emailAddress\" inside \"subject\"\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].subject.typesAndValues.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif((this.certs[i].subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||    // PKCS#9 e-mail address\r\n\t\t\t\t\t\t\t\t\t\t\t(this.certs[i].subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\")) // RFC1274 \"rfc822Mailbox\" e-mail address\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareRFC822Name(this.certs[i].subject.typesAndValues[k].value.valueBlock.value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region dNSName\r\n\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 2) // dNSName\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareDNSName(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region directoryName\r\n\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\tgroupPermitted = compareDirectoryName(this.certs[i].subject, group[j].base.value);\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region uniformResourceIdentifier\r\n\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 6) // uniformResourceIdentifier\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareUniformResourceIdentifier(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region iPAddress\r\n\t\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 7) // iPAddress\r\n\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\tvalueExists = true;\r\n\t\t\t\t\t\t\t\t\t\t\tgroupPermitted = groupPermitted || compareIPAddress(subjectAltNames[k].value, group[j].base.value);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(groupPermitted)\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((groupPermitted === false) && (group.length > 0) && valueExists)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpolicyResult.result = false;\r\n\t\t\t\t\t\tpolicyResult.resultCode = 41;\r\n\t\t\t\t\t\tpolicyResult.resultMessage = \"Failed to meet \\\"permitted sub-trees\\\" name constraint\";\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tthrow policyResult;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Checking for \"excluded sub-trees\"\r\n\t\t\t\tlet excluded = false;\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < excludedSubtrees.length; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\tswitch(excludedSubtrees[j].base.type)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region rfc822Name\r\n\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length >= 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 1) // rfc822Name\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareRFC822Name(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telse // Try to find out \"emailAddress\" inside \"subject\"\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < this.certs[i].subject.typesAndValues.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif((this.certs[i].subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||    // PKCS#9 e-mail address\r\n\t\t\t\t\t\t\t\t\t\t(this.certs[i].subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\")) // RFC1274 \"rfc822Mailbox\" e-mail address\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareRFC822Name(this.certs[i].subject.typesAndValues[k].value.valueBlock.value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region dNSName\r\n\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 2) // dNSName\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareDNSName(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region directoryName\r\n\t\t\t\t\t\tcase 4:\r\n\t\t\t\t\t\t\texcluded = excluded || compareDirectoryName(this.certs[i].subject, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region uniformResourceIdentifier\r\n\t\t\t\t\t\tcase 6:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 6) // uniformResourceIdentifier\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareUniformResourceIdentifier(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region iPAddress\r\n\t\t\t\t\t\tcase 7:\r\n\t\t\t\t\t\t\tif(subjectAltNames.length > 0)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tfor(let k = 0; k < subjectAltNames.length; k++)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(subjectAltNames[k].type === 7) // iPAddress\r\n\t\t\t\t\t\t\t\t\t\texcluded = excluded || compareIPAddress(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t//region default\r\n\t\t\t\t\t\tdefault: // No action, but probably here we need to create a warning for \"malformed constraint\"\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(excluded)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(excluded === true)\r\n\t\t\t\t{\r\n\t\t\t\t\tpolicyResult.result = false;\r\n\t\t\t\t\tpolicyResult.resultCode = 42;\r\n\t\t\t\t\tpolicyResult.resultMessage = \"Failed to meet \\\"excluded sub-trees\\\" name constraint\";\r\n\t\t\t\t\t\r\n\t\t\t\t\tthrow policyResult;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t//region Append \"cert_..._subtrees\" to \"..._subtrees\"\r\n\t\t\t\tpermittedSubtrees = permittedSubtrees.concat(certPermittedSubtrees);\r\n\t\t\t\texcludedSubtrees = excludedSubtrees.concat(certExcludedSubtrees);\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn policyResult;\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\tcatch(error)\r\n\t\t{\r\n\t\t\tif(error instanceof Object)\r\n\t\t\t{\r\n\t\t\t\tif(\"resultMessage\" in error)\r\n\t\t\t\t\treturn error;\r\n\t\t\t\t\r\n\t\t\t\tif(\"message\" in error)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tresult: false,\r\n\t\t\t\t\t\tresultCode: -1,\r\n\t\t\t\t\t\tresultMessage: error.message\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tresult: false,\r\n\t\t\t\tresultCode: -1,\r\n\t\t\t\tresultMessage: error\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"CertificateChainValidationEngine.js"}