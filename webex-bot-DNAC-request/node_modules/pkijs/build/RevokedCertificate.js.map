{"version":3,"sources":["../src/RevokedCertificate.js"],"names":["RevokedCertificate","constructor","parameters","userCertificate","defaultValues","revocationDate","crlEntryExtensions","fromSchema","schema","memberName","asn1js","Integer","Time","Extensions","Error","names","Sequence","name","blockName","value","utcTimeName","generalTimeName","asn1","compareSchema","verified","result","toSchema","outputArray","push","toJSON","object"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AACA;;AACA;;;AAGe,MAAMA,kBAAN,CACf;AACC;;AACA;;;;;AAKAC,EAAAA,WAAW,CAACC,UAAU,GAAG,EAAd,EACX;AACC;;AACA;;;;AAIA,SAAKC,eAAL,GAAuB,iCAAmBD,UAAnB,EAA+B,iBAA/B,EAAkDF,kBAAkB,CAACI,aAAnB,CAAiC,iBAAjC,CAAlD,CAAvB;AACA;;;;;AAIA,SAAKC,cAAL,GAAsB,iCAAmBH,UAAnB,EAA+B,gBAA/B,EAAiDF,kBAAkB,CAACI,aAAnB,CAAiC,gBAAjC,CAAjD,CAAtB;AAEA,QAAG,wBAAwBF,UAA3B;AACC;;;;AAIA,WAAKI,kBAAL,GAA0B,iCAAmBJ,UAAnB,EAA+B,oBAA/B,EAAqDF,kBAAkB,CAACI,aAAnB,CAAiC,oBAAjC,CAArD,CAA1B,CAlBF,CAmBC;AAEA;;AACA,QAAG,YAAYF,UAAf,EACC,KAAKK,UAAL,CAAgBL,UAAU,CAACM,MAA3B,EAvBF,CAwBC;AACA,GAjCF,CAkCC;;AACA;;;;;;AAIA,SAAOJ,aAAP,CAAqBK,UAArB,EACA;AACC,YAAOA,UAAP;AAEC,WAAK,iBAAL;AACC,eAAO,IAAIC,MAAM,CAACC,OAAX,EAAP;;AACD,WAAK,gBAAL;AACC,eAAO,IAAIC,aAAJ,EAAP;;AACD,WAAK,oBAAL;AACC,eAAO,IAAIC,mBAAJ,EAAP;;AACD;AACC,cAAM,IAAIC,KAAJ,CAAW,qDAAoDL,UAAW,EAA1E,CAAN;AATF;AAWA,GApDF,CAqDC;;AACA;;;;;;;;;;;;;;;;;;AAgBA,SAAOD,MAAP,CAAcN,UAAU,GAAG,EAA3B,EACA;AACC;;;;;;;AAOA,UAAMa,KAAK,GAAG,iCAAmBb,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;AAEA,WAAO,IAAIQ,MAAM,CAACM,QAAX,CAAoB;AAC1BC,MAAAA,IAAI,EAAGF,KAAK,CAACG,SAAN,IAAmB,EADA;AAE1BC,MAAAA,KAAK,EAAE,CACN,IAAIT,MAAM,CAACC,OAAX,CAAmB;AAAEM,QAAAA,IAAI,EAAGF,KAAK,CAACZ,eAAN,IAAyB;AAAlC,OAAnB,CADM,EAENS,cAAKJ,MAAL,CAAY;AACXO,QAAAA,KAAK,EAAE;AACNK,UAAAA,WAAW,EAAGL,KAAK,CAACV,cAAN,IAAwB,gBADhC;AAENgB,UAAAA,eAAe,EAAGN,KAAK,CAACV,cAAN,IAAwB;AAFpC;AADI,OAAZ,CAFM,EAQNQ,oBAAWL,MAAX,CAAkB;AACjBO,QAAAA,KAAK,EAAE;AACNG,UAAAA,SAAS,EAAGH,KAAK,CAACT,kBAAN,IAA4B;AADlC;AADU,OAAlB,EAIG,IAJH,CARM;AAFmB,KAApB,CAAP;AAiBA,GAlGF,CAmGC;;AACA;;;;;;AAIAC,EAAAA,UAAU,CAACC,MAAD,EACV;AACC;AACA,6BAAWA,MAAX,EAAmB,CAClB,iBADkB,EAElB,gBAFkB,EAGlB,oBAHkB,CAAnB,EAFD,CAOC;AAEA;;AACA,UAAMc,IAAI,GAAGZ,MAAM,CAACa,aAAP,CAAqBf,MAArB,EACZA,MADY,EAEZR,kBAAkB,CAACQ,MAAnB,EAFY,CAAb;AAKA,QAAGc,IAAI,CAACE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIV,KAAJ,CAAU,4EAAV,CAAN,CAhBF,CAiBC;AAEA;;AACA,SAAKX,eAAL,GAAuBmB,IAAI,CAACG,MAAL,CAAYtB,eAAnC;AACA,SAAKE,cAAL,GAAsB,IAAIO,aAAJ,CAAS;AAAEJ,MAAAA,MAAM,EAAEc,IAAI,CAACG,MAAL,CAAYpB;AAAtB,KAAT,CAAtB;AAEA,QAAG,wBAAwBiB,IAAI,CAACG,MAAhC,EACC,KAAKnB,kBAAL,GAA0B,IAAIO,mBAAJ,CAAe;AAAEL,MAAAA,MAAM,EAAEc,IAAI,CAACG,MAAL,CAAYnB;AAAtB,KAAf,CAA1B,CAxBF,CAyBC;AACA,GAnIF,CAoIC;;AACA;;;;;;AAIAoB,EAAAA,QAAQ,GACR;AACC;AACA,UAAMC,WAAW,GAAG,CACnB,KAAKxB,eADc,EAEnB,KAAKE,cAAL,CAAoBqB,QAApB,EAFmB,CAApB;AAKA,QAAG,wBAAwB,IAA3B,EACCC,WAAW,CAACC,IAAZ,CAAiB,KAAKtB,kBAAL,CAAwBoB,QAAxB,EAAjB,EARF,CASC;AAEA;;AACA,WAAQ,IAAIhB,MAAM,CAACM,QAAX,CAAoB;AAC3BG,MAAAA,KAAK,EAAEQ;AADoB,KAApB,CAAR,CAZD,CAeC;AACA,GA1JF,CA2JC;;AACA;;;;;;AAIAE,EAAAA,MAAM,GACN;AACC,UAAMC,MAAM,GAAG;AACd3B,MAAAA,eAAe,EAAE,KAAKA,eAAL,CAAqB0B,MAArB,EADH;AAEdxB,MAAAA,cAAc,EAAE,KAAKA,cAAL,CAAoBwB;AAFtB,KAAf;AAKA,QAAG,wBAAwB,IAA3B,EACCC,MAAM,CAACxB,kBAAP,GAA4B,KAAKA,kBAAL,CAAwBuB,MAAxB,EAA5B;AAED,WAAOC,MAAP;AACA,GA3KF,CA4KC;;;AA5KD,C,CA8KA","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport Time from \"./Time.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class RevokedCertificate\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RevokedCertificate class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc userCertificate\r\n\t\t */\r\n\t\tthis.userCertificate = getParametersValue(parameters, \"userCertificate\", RevokedCertificate.defaultValues(\"userCertificate\"));\r\n\t\t/**\r\n\t\t * @type {Time}\r\n\t\t * @desc revocationDate\r\n\t\t */\r\n\t\tthis.revocationDate = getParametersValue(parameters, \"revocationDate\", RevokedCertificate.defaultValues(\"revocationDate\"));\r\n\r\n\t\tif(\"crlEntryExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Extensions}\r\n\t\t\t * @desc crlEntryExtensions\r\n\t\t\t */\r\n\t\t\tthis.crlEntryExtensions = getParametersValue(parameters, \"crlEntryExtensions\", RevokedCertificate.defaultValues(\"crlEntryExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"userCertificate\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"revocationDate\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"crlEntryExtensions\":\r\n\t\t\t\treturn new Extensions();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RevokedCertificate class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * revokedCertificates     SEQUENCE OF SEQUENCE  {\r\n     *        userCertificate         CertificateSerialNumber,\r\n     *        revocationDate          Time,\r\n     *        crlEntryExtensions      Extensions OPTIONAL\r\n     *                                 -- if present, version MUST be v2\r\n     *                             }  OPTIONAL,\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [userCertificate]\r\n\t\t * @property {string} [revocationDate]\r\n\t\t * @property {string} [crlEntryExtensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.userCertificate || \"userCertificate\") }),\r\n\t\t\t\tTime.schema({\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tutcTimeName: (names.revocationDate || \"revocationDate\"),\r\n\t\t\t\t\t\tgeneralTimeName: (names.revocationDate || \"revocationDate\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tExtensions.schema({\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: (names.crlEntryExtensions || \"crlEntryExtensions\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}, true)\r\n\t\t\t]\r\n\t\t});\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"userCertificate\",\r\n\t\t\t\"revocationDate\",\r\n\t\t\t\"crlEntryExtensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRevokedCertificate.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RevokedCertificate\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.userCertificate = asn1.result.userCertificate;\r\n\t\tthis.revocationDate = new Time({ schema: asn1.result.revocationDate });\r\n\r\n\t\tif(\"crlEntryExtensions\" in asn1.result)\r\n\t\t\tthis.crlEntryExtensions = new Extensions({ schema: asn1.result.crlEntryExtensions });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [\r\n\t\t\tthis.userCertificate,\r\n\t\t\tthis.revocationDate.toSchema()\r\n\t\t];\r\n\r\n\t\tif(\"crlEntryExtensions\" in this)\r\n\t\t\toutputArray.push(this.crlEntryExtensions.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tuserCertificate: this.userCertificate.toJSON(),\r\n\t\t\trevocationDate: this.revocationDate.toJSON\r\n\t\t};\r\n\r\n\t\tif(\"crlEntryExtensions\" in this)\r\n\t\t\tobject.crlEntryExtensions = this.crlEntryExtensions.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"RevokedCertificate.js"}