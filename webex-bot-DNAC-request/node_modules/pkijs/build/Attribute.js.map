{"version":3,"sources":["../src/Attribute.js"],"names":["Attribute","constructor","parameters","type","defaultValues","values","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","length","names","asn1js","Sequence","name","blockName","value","ObjectIdentifier","Set","setName","Repeated","Any","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","toJSON","Array","from","element"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC2986\r\n */\r\nexport default class Attribute {\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Attribute class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc ObjectIdentifier for attribute (string representation)\r\n\t\t */\r\n\t\tthis.type = getParametersValue(parameters, \"type\", Attribute.defaultValues(\"type\"));\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @desc Any attribute values\r\n\t\t */\r\n\t\tthis.values = getParametersValue(parameters, \"values\", Attribute.defaultValues(\"values\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"values\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Attribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"values\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Attribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Attribute { ATTRIBUTE:IOSet } ::= SEQUENCE {\r\n\t *    type   ATTRIBUTE.&id({IOSet}),\r\n\t *    values SET SIZE(1..MAX) OF ATTRIBUTE.&Type({IOSet}{@type})\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [type]\r\n\t\t * @property {string} [setName]\r\n\t\t * @property {string} [values]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.type || \"\") }),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tname: (names.setName || \"\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.values || \"\"),\r\n\t\t\t\t\t\t\tvalue: new asn1js.Any()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"type\",\r\n\t\t\t\"values\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttribute.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttype: \"type\",\r\n\t\t\t\t\tvalues: \"values\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Attribute\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.type = asn1.result.type.valueBlock.toString();\r\n\t\tthis.values = asn1.result.values;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.type }),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: this.values\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\ttype: this.type,\r\n\t\t\tvalues: Array.from(this.values, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"Attribute.js"}