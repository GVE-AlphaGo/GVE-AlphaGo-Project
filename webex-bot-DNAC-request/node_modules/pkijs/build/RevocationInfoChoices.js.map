{"version":3,"sources":["../src/RevocationInfoChoices.js"],"names":["RevocationInfoChoices","constructor","parameters","crls","defaultValues","otherRevocationInfos","fromSchema","schema","memberName","Error","names","asn1js","Set","name","blockName","value","Repeated","Choice","CertificateRevocationList","Constructed","idBlock","tagClass","tagNumber","ObjectIdentifier","Any","asn1","compareSchema","verified","result","element","push","OtherRevocationInfoFormat","toSchema","outputArray","Array","from","toJSON"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;AACA;;AACA;;;AAGe,MAAMA,qBAAN,CACf;AACC;;AACA;;;;;AAKAC,EAAAA,WAAW,CAACC,UAAU,GAAG,EAAd,EACX;AACC;;AACA;;;;AAIA,SAAKC,IAAL,GAAY,iCAAmBD,UAAnB,EAA+B,MAA/B,EAAuCF,qBAAqB,CAACI,aAAtB,CAAoC,MAApC,CAAvC,CAAZ;AACA;;;;;AAIA,SAAKC,oBAAL,GAA4B,iCAAmBH,UAAnB,EAA+B,sBAA/B,EAAuDF,qBAAqB,CAACI,aAAtB,CAAoC,sBAApC,CAAvD,CAA5B,CAXD,CAYC;AAEA;;AACA,QAAG,YAAYF,UAAf,EACC,KAAKI,UAAL,CAAgBJ,UAAU,CAACK,MAA3B,EAhBF,CAiBC;AACA,GA1BF,CA2BC;;AACA;;;;;;AAIA,SAAOH,aAAP,CAAqBI,UAArB,EACA;AACC,YAAOA,UAAP;AAEC,WAAK,MAAL;AACC,eAAO,EAAP;;AACD,WAAK,sBAAL;AACC,eAAO,EAAP;;AACD;AACC,cAAM,IAAIC,KAAJ,CAAW,wDAAuDD,UAAW,EAA7E,CAAN;AAPF;AASA,GA3CF,CA4CC;;AACA;;;;;;;;;;;;;;;;;AAeA,SAAOD,MAAP,CAAcL,UAAU,GAAG,EAA3B,EACA;AACC;;;;;AAKA,UAAMQ,KAAK,GAAG,iCAAmBR,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;AAEA,WAAQ,IAAIS,MAAM,CAACC,GAAX,CAAe;AACtBC,MAAAA,IAAI,EAAGH,KAAK,CAACI,SAAN,IAAmB,EADJ;AAEtBC,MAAAA,KAAK,EAAE,CACN,IAAIJ,MAAM,CAACK,QAAX,CAAoB;AACnBH,QAAAA,IAAI,EAAGH,KAAK,CAACP,IAAN,IAAc,EADF;AAEnBY,QAAAA,KAAK,EAAE,IAAIJ,MAAM,CAACM,MAAX,CAAkB;AACxBF,UAAAA,KAAK,EAAE,CACNG,mCAA0BX,MAA1B,EADM,EAEN,IAAII,MAAM,CAACQ,WAAX,CAAuB;AACtBC,YAAAA,OAAO,EAAE;AACRC,cAAAA,QAAQ,EAAE,CADF;AACK;AACbC,cAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,aADa;AAKtBP,YAAAA,KAAK,EAAE,CACN,IAAIJ,MAAM,CAACY,gBAAX,EADM,EAEN,IAAIZ,MAAM,CAACa,GAAX,EAFM;AALe,WAAvB,CAFM;AADiB,SAAlB;AAFY,OAApB,CADM;AAFe,KAAf,CAAR;AAuBA,GA5FF,CA6FC;;AACA;;;;;;AAIAlB,EAAAA,UAAU,CAACC,MAAD,EACV;AACC;AACA,6BAAWA,MAAX,EAAmB,CAClB,MADkB,CAAnB,EAFD,CAKC;AAEA;;AACA,UAAMkB,IAAI,GAAGd,MAAM,CAACe,aAAP,CAAqBnB,MAArB,EACZA,MADY,EAEZP,qBAAqB,CAACO,MAAtB,CAA6B;AAC5BG,MAAAA,KAAK,EAAE;AACNP,QAAAA,IAAI,EAAE;AADA;AADqB,KAA7B,CAFY,CAAb;AASA,QAAGsB,IAAI,CAACE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIlB,KAAJ,CAAU,+EAAV,CAAN,CAlBF,CAmBC;AAEA;;AArBD;AAAA;AAAA;;AAAA;AAsBC,2BAAqBgB,IAAI,CAACG,MAAL,CAAYzB,IAAjC,8HACA;AAAA,cADU0B,OACV;AACC,YAAGA,OAAO,CAACT,OAAR,CAAgBC,QAAhB,KAA6B,CAAhC,EACC,KAAKlB,IAAL,CAAU2B,IAAV,CAAe,IAAIZ,kCAAJ,CAA8B;AAAEX,UAAAA,MAAM,EAAEsB;AAAV,SAA9B,CAAf,EADD,KAGC,KAAKxB,oBAAL,CAA0ByB,IAA1B,CAA+B,IAAIC,kCAAJ,CAA8B;AAAExB,UAAAA,MAAM,EAAEsB;AAAV,SAA9B,CAA/B;AACD,OA5BF,CA8BC;;AA9BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA+BC,GAlIF,CAmIC;;AACA;;;;;;AAIAG,EAAAA,QAAQ,GACR;AACC;AACA,UAAMC,WAAW,GAAG,EAApB;AAEAA,IAAAA,WAAW,CAACH,IAAZ,CAAiB,GAAGI,KAAK,CAACC,IAAN,CAAW,KAAKhC,IAAhB,EAAsB0B,OAAO,IAAIA,OAAO,CAACG,QAAR,EAAjC,CAApB;AAEAC,IAAAA,WAAW,CAACH,IAAZ,CAAiB,GAAGI,KAAK,CAACC,IAAN,CAAW,KAAK9B,oBAAhB,EAAsCwB,OAAO,IACjE;AACC,YAAMtB,MAAM,GAAGsB,OAAO,CAACG,QAAR,EAAf;AAEAzB,MAAAA,MAAM,CAACa,OAAP,CAAeC,QAAf,GAA0B,CAA1B;AACAd,MAAAA,MAAM,CAACa,OAAP,CAAeE,SAAf,GAA2B,CAA3B;AAEA,aAAOf,MAAP;AACA,KARmB,CAApB,EAND,CAeC;AAEA;;AACA,WAAQ,IAAII,MAAM,CAACC,GAAX,CAAe;AACtBG,MAAAA,KAAK,EAAEkB;AADe,KAAf,CAAR,CAlBD,CAqBC;AACA,GA/JF,CAgKC;;AACA;;;;;;AAIAG,EAAAA,MAAM,GACN;AACC,WAAO;AACNjC,MAAAA,IAAI,EAAE+B,KAAK,CAACC,IAAN,CAAW,KAAKhC,IAAhB,EAAsB0B,OAAO,IAAIA,OAAO,CAACO,MAAR,EAAjC,CADA;AAEN/B,MAAAA,oBAAoB,EAAE6B,KAAK,CAACC,IAAN,CAAW,KAAK9B,oBAAhB,EAAsCwB,OAAO,IAAIA,OAAO,CAACO,MAAR,EAAjD;AAFhB,KAAP;AAIA,GA3KF,CA4KC;;;AA5KD,C,CA8KA","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport CertificateRevocationList from \"./CertificateRevocationList.js\";\r\nimport OtherRevocationInfoFormat from \"./OtherRevocationInfoFormat.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class RevocationInfoChoices \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RevocationInfoChoices class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<CertificateRevocationList>}\r\n\t\t * @desc crls\r\n\t\t */\r\n\t\tthis.crls = getParametersValue(parameters, \"crls\", RevocationInfoChoices.defaultValues(\"crls\"));\r\n\t\t/**\r\n\t\t * @type {Array.<OtherRevocationInfoFormat>}\r\n\t\t * @desc otherRevocationInfos\r\n\t\t */\r\n\t\tthis.otherRevocationInfos = getParametersValue(parameters, \"otherRevocationInfos\", RevocationInfoChoices.defaultValues(\"otherRevocationInfos\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"otherRevocationInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RevocationInfoChoices class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RevocationInfoChoices ::= SET OF RevocationInfoChoice\r\n\t *\r\n\t * RevocationInfoChoice ::= CHOICE {\r\n\t *    crl CertificateList,\r\n\t *    other [1] IMPLICIT OtherRevocationInfoFormat }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [crls]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Set({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.crls || \"\"),\r\n\t\t\t\t\tvalue: new asn1js.Choice({\r\n\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\tCertificateRevocationList.schema(),\r\n\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.ObjectIdentifier(),\r\n\t\t\t\t\t\t\t\t\tnew asn1js.Any()\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"crls\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRevocationInfoChoices.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcrls: \"crls\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RevocationInfoChoices\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tfor(const element of asn1.result.crls)\r\n\t\t{\r\n\t\t\tif(element.idBlock.tagClass === 1)\r\n\t\t\t\tthis.crls.push(new CertificateRevocationList({ schema: element }));\r\n\t\t\telse\r\n\t\t\t\tthis.otherRevocationInfos.push(new OtherRevocationInfoFormat({ schema: element }));\r\n\t\t}\r\n\t\t\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output set\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(...Array.from(this.crls, element => element.toSchema()));\r\n\t\t\r\n\t\toutputArray.push(...Array.from(this.otherRevocationInfos, element =>\r\n\t\t{\r\n\t\t\tconst schema = element.toSchema();\r\n\t\t\t\r\n\t\t\tschema.idBlock.tagClass = 3;\r\n\t\t\tschema.idBlock.tagNumber = 1;\r\n\t\t\t\r\n\t\t\treturn schema;\r\n\t\t}));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Set({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcrls: Array.from(this.crls, element => element.toJSON()),\r\n\t\t\totherRevocationInfos: Array.from(this.otherRevocationInfos, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"RevocationInfoChoices.js"}