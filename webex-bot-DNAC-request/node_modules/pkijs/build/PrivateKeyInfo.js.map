{"version":3,"sources":["../src/PrivateKeyInfo.js"],"names":["PrivateKeyInfo","constructor","parameters","version","defaultValues","privateKeyAlgorithm","privateKey","attributes","parsedKey","fromSchema","schema","fromJSON","json","memberName","AlgorithmIdentifier","asn1js","OctetString","Error","names","Sequence","name","blockName","value","Integer","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","Attribute","asn1","compareSchema","verified","result","valueBlock","valueDec","Array","from","element","algorithmId","privateKeyASN1","fromBER","valueHex","offset","RSAPrivateKey","algorithmParams","ObjectIdentifier","ECPrivateKey","namedCurve","toString","toSchema","outputArray","push","toJSON","object","jwk","kty","publicKeyJWK","Object","keys","key","toUpperCase","Null","toBER"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport ECPrivateKey from \"./ECPrivateKey.js\";\r\nimport RSAPrivateKey from \"./RSAPrivateKey.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5208\r\n */\r\nexport default class PrivateKeyInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PrivateKeyInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", PrivateKeyInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc privateKeyAlgorithm\r\n\t\t */\r\n\t\tthis.privateKeyAlgorithm = getParametersValue(parameters, \"privateKeyAlgorithm\", PrivateKeyInfo.defaultValues(\"privateKeyAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc privateKey\r\n\t\t */\r\n\t\tthis.privateKey = getParametersValue(parameters, \"privateKey\", PrivateKeyInfo.defaultValues(\"privateKey\"));\r\n\r\n\t\tif(\"attributes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @desc attributes\r\n\t\t\t */\r\n\t\t\tthis.attributes = getParametersValue(parameters, \"attributes\", PrivateKeyInfo.defaultValues(\"attributes\"));\r\n\r\n\t\tif(\"parsedKey\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ECPrivateKey|RSAPrivateKey}\r\n\t\t\t * @desc Parsed public key value\r\n\t\t\t */\r\n\t\t\tthis.parsedKey = getParametersValue(parameters, \"parsedKey\", PrivateKeyInfo.defaultValues(\"parsedKey\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"privateKeyAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"privateKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"parsedKey\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PrivateKeyInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PrivateKeyInfo ::= SEQUENCE {\r\n\t *    version Version,\r\n\t *    privateKeyAlgorithm AlgorithmIdentifier {{PrivateKeyAlgorithms}},\r\n\t *    privateKey PrivateKey,\r\n\t *    attributes [0] Attributes OPTIONAL }\r\n\t *\r\n\t * Version ::= INTEGER {v1(0)} (v1,...)\r\n\t *\r\n\t * PrivateKey ::= OCTET STRING\r\n\t *\r\n\t * Attributes ::= SET OF Attribute\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [privateKeyAlgorithm]\r\n\t\t * @property {string} [privateKey]\r\n\t\t * @property {string} [attributes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.privateKeyAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.privateKey || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.attributes || \"\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"privateKeyAlgorithm\",\r\n\t\t\t\"privateKey\",\r\n\t\t\t\"attributes\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPrivateKeyInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tprivateKeyAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"privateKeyAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tprivateKey: \"privateKey\",\r\n\t\t\t\t\tattributes: \"attributes\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PrivateKeyInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.privateKeyAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.privateKeyAlgorithm });\r\n\t\tthis.privateKey = asn1.result.privateKey;\r\n\r\n\t\tif(\"attributes\" in asn1.result)\r\n\t\t\tthis.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\r\n\r\n\t\tswitch(this.privateKeyAlgorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHex);\r\n\t\t\t\t\tif(privateKeyASN1.offset !== (-1))\r\n\t\t\t\t\t\tthis.parsedKey = new RSAPrivateKey({ schema: privateKeyASN1.result });\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tif(\"algorithmParams\" in this.privateKeyAlgorithm)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.privateKeyAlgorithm.algorithmParams instanceof asn1js.ObjectIdentifier)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHex);\r\n\t\t\t\t\t\tif(privateKeyASN1.offset !== (-1))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.parsedKey = new ECPrivateKey({\r\n\t\t\t\t\t\t\t\tnamedCurve: this.privateKeyAlgorithm.algorithmParams.valueBlock.toString(),\r\n\t\t\t\t\t\t\t\tschema: privateKeyASN1.result\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.privateKeyAlgorithm.toSchema(),\r\n\t\t\tthis.privateKey\r\n\t\t];\r\n\r\n\t\tif(\"attributes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\t//region Return common value in case we do not have enough info fo making JWK\r\n\t\tif((\"parsedKey\" in this) === false)\r\n\t\t{\r\n\t\t\tconst object = {\r\n\t\t\t\tversion: this.version,\r\n\t\t\t\tprivateKeyAlgorithm: this.privateKeyAlgorithm.toJSON(),\r\n\t\t\t\tprivateKey: this.privateKey.toJSON()\r\n\t\t\t};\r\n\r\n\t\t\tif(\"attributes\" in this)\r\n\t\t\t\tobject.attributes = Array.from(this.attributes, element => element.toJSON());\r\n\r\n\t\t\treturn object;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Making JWK\r\n\t\tconst jwk = {};\r\n\r\n\t\tswitch(this.privateKeyAlgorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tjwk.kty = \"EC\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\tconst publicKeyJWK = this.parsedKey.toJSON();\r\n\r\n\t\tfor(const key of Object.keys(publicKeyJWK))\r\n\t\t\tjwk[key] = publicKeyJWK[key];\r\n\r\n\t\treturn jwk;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"kty\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.kty.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"EC\":\r\n\t\t\t\t\tthis.parsedKey = new ECPrivateKey({ json });\r\n\r\n\t\t\t\t\tthis.privateKeyAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.10045.2.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"RSA\":\r\n\t\t\t\t\tthis.parsedKey = new RSAPrivateKey({ json });\r\n\r\n\t\t\t\t\tthis.privateKeyAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\r\n\t\t\t}\r\n\r\n\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: this.parsedKey.toSchema().toBER(false) });\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"PrivateKeyInfo.js"}