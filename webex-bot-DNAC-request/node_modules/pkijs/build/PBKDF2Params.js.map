{"version":3,"sources":["../src/PBKDF2Params.js"],"names":["PBKDF2Params","constructor","parameters","salt","defaultValues","iterationCount","keyLength","prf","fromSchema","schema","memberName","AlgorithmIdentifier","algorithmId","algorithmParams","asn1js","Null","Error","names","Sequence","name","blockName","value","Choice","OctetString","saltPrimitive","saltConstructed","Integer","optional","asn1","compareSchema","verified","result","valueBlock","valueDec","toSchema","outputArray","push","isEqual","toJSON","_object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC2898\r\n */\r\nexport default class PBKDF2Params\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PBKDF2Params class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc salt\r\n\t\t */\r\n\t\tthis.salt = getParametersValue(parameters, \"salt\", PBKDF2Params.defaultValues(\"salt\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc iterationCount\r\n\t\t */\r\n\t\tthis.iterationCount = getParametersValue(parameters, \"iterationCount\", PBKDF2Params.defaultValues(\"iterationCount\"));\r\n\t\t\r\n\t\tif(\"keyLength\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @desc keyLength\r\n\t\t\t */\r\n\t\t\tthis.keyLength = getParametersValue(parameters, \"keyLength\", PBKDF2Params.defaultValues(\"keyLength\"));\r\n\t\t\r\n\t\tif(\"prf\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {AlgorithmIdentifier}\r\n\t\t\t * @desc prf\r\n\t\t\t */\r\n\t\t\tthis.prf = getParametersValue(parameters, \"prf\", PBKDF2Params.defaultValues(\"prf\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"salt\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"iterationCount\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"keyLength\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"prf\":\r\n\t\t\t\treturn new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: \"1.3.14.3.2.26\", // SHA-1\r\n\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t});\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PBKDF2Params class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PBKDF2-params ::= SEQUENCE {\r\n\t *    salt CHOICE {\r\n\t *        specified OCTET STRING,\r\n\t *        otherSource AlgorithmIdentifier },\r\n\t *  iterationCount INTEGER (1..MAX),\r\n\t *  keyLength INTEGER (1..MAX) OPTIONAL,\r\n\t *  prf AlgorithmIdentifier\r\n\t *    DEFAULT { algorithm hMAC-SHA1, parameters NULL } }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [saltPrimitive]\r\n\t\t * @property {string} [saltConstructed]\r\n\t\t * @property {string} [iterationCount]\r\n\t\t * @property {string} [keyLength]\r\n\t\t * @property {string} [prf]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.OctetString({ name: (names.saltPrimitive || \"\") }),\r\n\t\t\t\t\t\tAlgorithmIdentifier.schema(names.saltConstructed || {})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.iterationCount || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\tname: (names.keyLength || \"\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.prf || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"salt\",\r\n\t\t\t\"iterationCount\",\r\n\t\t\t\"keyLength\",\r\n\t\t\t\"prf\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPBKDF2Params.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tsaltPrimitive: \"salt\",\r\n\t\t\t\t\tsaltConstructed: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"salt\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\titerationCount: \"iterationCount\",\r\n\t\t\t\t\tkeyLength: \"keyLength\",\r\n\t\t\t\t\tprf: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"prf\",\r\n\t\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PBKDF2Params\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.salt = asn1.result.salt;\r\n\t\tthis.iterationCount = asn1.result.iterationCount.valueBlock.valueDec;\r\n\r\n\t\tif(\"keyLength\" in asn1.result)\r\n\t\t\tthis.keyLength = asn1.result.keyLength.valueBlock.valueDec;\r\n\r\n\t\tif(\"prf\" in asn1.result)\r\n\t\t\tthis.prf = new AlgorithmIdentifier({ schema: asn1.result.prf });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.salt);\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.iterationCount }));\r\n\t\t\r\n\t\tif(\"keyLength\" in this)\r\n\t\t{\r\n\t\t\tif(PBKDF2Params.defaultValues(\"keyLength\") !== this.keyLength)\r\n\t\t\t\toutputArray.push(new asn1js.Integer({ value: this.keyLength }));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"prf\" in this)\r\n\t\t{\r\n\t\t\tif(PBKDF2Params.defaultValues(\"prf\").isEqual(this.prf) === false)\r\n\t\t\t\toutputArray.push(this.prf.toSchema());\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tsalt: this.salt.toJSON(),\r\n\t\t\titerationCount: this.iterationCount\r\n\t\t};\r\n\t\t\r\n\t\tif(\"keyLength\" in this)\r\n\t\t{\r\n\t\t\tif(PBKDF2Params.defaultValues(\"keyLength\") !== this.keyLength)\r\n\t\t\t\t_object.keyLength = this.keyLength;\r\n\t\t}\r\n\t\t\r\n\t\tif(\"prf\" in this)\r\n\t\t{\r\n\t\t\tif(PBKDF2Params.defaultValues(\"prf\").isEqual(this.prf) === false)\r\n\t\t\t\t_object.prf = this.prf.toJSON();\r\n\t\t}\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"PBKDF2Params.js"}