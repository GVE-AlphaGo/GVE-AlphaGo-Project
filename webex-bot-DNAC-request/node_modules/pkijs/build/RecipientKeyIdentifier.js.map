{"version":3,"sources":["../src/RecipientKeyIdentifier.js"],"names":["RecipientKeyIdentifier","constructor","parameters","subjectKeyIdentifier","defaultValues","date","other","fromSchema","schema","memberName","asn1js","OctetString","GeneralizedTime","OtherKeyAttribute","Error","compareWithDefault","memberValue","isEqual","year","month","day","hour","minute","second","millisecond","keyAttrId","names","Sequence","name","blockName","value","optional","asn1","compareSchema","verified","result","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport OtherKeyAttribute from \"./OtherKeyAttribute.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class RecipientKeyIdentifier\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RecipientKeyIdentifier class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc subjectKeyIdentifier\r\n\t\t */\r\n\t\tthis.subjectKeyIdentifier = getParametersValue(parameters, \"subjectKeyIdentifier\", RecipientKeyIdentifier.defaultValues(\"subjectKeyIdentifier\"));\r\n\r\n\t\tif(\"date\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralizedTime}\r\n\t\t\t * @desc date\r\n\t\t\t */\r\n\t\t\tthis.date = getParametersValue(parameters, \"date\", RecipientKeyIdentifier.defaultValues(\"date\"));\r\n\r\n\t\tif(\"other\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OtherKeyAttribute}\r\n\t\t\t * @desc other\r\n\t\t\t */\r\n\t\t\tthis.other = getParametersValue(parameters, \"other\", RecipientKeyIdentifier.defaultValues(\"other\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"subjectKeyIdentifier\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"date\":\r\n\t\t\t\treturn new asn1js.GeneralizedTime();\r\n\t\t\tcase \"other\":\r\n\t\t\t\treturn new OtherKeyAttribute();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RecipientKeyIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"subjectKeyIdentifier\":\r\n\t\t\t\treturn (memberValue.isEqual(RecipientKeyIdentifier.defaultValues(\"subjectKeyIdentifier\")));\r\n\t\t\tcase \"date\":\r\n\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\treturn ((memberValue.year === 0) &&\r\n\t\t\t\t(memberValue.month === 0) &&\r\n\t\t\t\t(memberValue.day === 0) &&\r\n\t\t\t\t(memberValue.hour === 0) &&\r\n\t\t\t\t(memberValue.minute === 0) &&\r\n\t\t\t\t(memberValue.second === 0) &&\r\n\t\t\t\t(memberValue.millisecond === 0));\r\n\t\t\tcase \"other\":\r\n\t\t\t\treturn ((memberValue.keyAttrId === \"\") && ((\"keyAttr\" in memberValue) === false));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RecipientKeyIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RecipientKeyIdentifier ::= SEQUENCE {\r\n\t *    subjectKeyIdentifier SubjectKeyIdentifier,\r\n\t *    date GeneralizedTime OPTIONAL,\r\n\t *    other OtherKeyAttribute OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [type]\r\n\t\t * @property {string} [setName]\r\n\t\t * @property {string} [values]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.subjectKeyIdentifier || \"\") }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.date || \"\")\r\n\t\t\t\t}),\r\n\t\t\t\tOtherKeyAttribute.schema(names.other || {})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"subjectKeyIdentifier\",\r\n\t\t\t\"date\",\r\n\t\t\t\"other\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRecipientKeyIdentifier.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tsubjectKeyIdentifier: \"subjectKeyIdentifier\",\r\n\t\t\t\t\tdate: \"date\",\r\n\t\t\t\t\tother: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"other\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RecipientKeyIdentifier\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.subjectKeyIdentifier = asn1.result.subjectKeyIdentifier;\r\n\r\n\t\tif(\"date\" in asn1.result)\r\n\t\t\tthis.date = asn1.result.date;\r\n\r\n\t\tif(\"other\" in asn1.result)\r\n\t\t\tthis.other = new OtherKeyAttribute({ schema: asn1.result.other });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.subjectKeyIdentifier);\r\n\r\n\t\tif(\"date\" in this)\r\n\t\t\toutputArray.push(this.date);\r\n\r\n\t\tif(\"other\" in this)\r\n\t\t\toutputArray.push(this.other.toSchema());\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tsubjectKeyIdentifier: this.subjectKeyIdentifier.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"date\" in this)\r\n\t\t\t_object.date = this.date;\r\n\r\n\t\tif(\"other\" in this)\r\n\t\t\t_object.other = this.other.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"RecipientKeyIdentifier.js"}