{"version":3,"sources":["../src/KEKRecipientInfo.js"],"names":["KEKRecipientInfo","constructor","parameters","version","defaultValues","kekid","keyEncryptionAlgorithm","encryptedKey","preDefinedKEK","fromSchema","schema","memberName","KEKIdentifier","AlgorithmIdentifier","asn1js","OctetString","ArrayBuffer","Error","compareWithDefault","memberValue","keyIdentifier","algorithmId","isEqual","byteLength","names","Sequence","name","blockName","value","Integer","asn1","compareSchema","verified","result","valueBlock","valueDec","toSchema","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport KEKIdentifier from \"./KEKIdentifier.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class KEKRecipientInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for KEKRecipientInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", KEKRecipientInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {KEKIdentifier}\r\n\t\t * @desc kekid\r\n\t\t */\r\n\t\tthis.kekid = getParametersValue(parameters, \"kekid\", KEKRecipientInfo.defaultValues(\"kekid\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc keyEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.keyEncryptionAlgorithm = getParametersValue(parameters, \"keyEncryptionAlgorithm\", KEKRecipientInfo.defaultValues(\"keyEncryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc encryptedKey\r\n\t\t */\r\n\t\tthis.encryptedKey = getParametersValue(parameters, \"encryptedKey\", KEKRecipientInfo.defaultValues(\"encryptedKey\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc preDefinedKEK KEK using to encrypt CEK\r\n\t\t */\r\n\t\tthis.preDefinedKEK = getParametersValue(parameters, \"preDefinedKEK\", KEKRecipientInfo.defaultValues(\"preDefinedKEK\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"kekid\":\r\n\t\t\t\treturn new KEKIdentifier();\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"preDefinedKEK\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KEKRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"KEKRecipientInfo\":\r\n\t\t\t\treturn (memberValue === KEKRecipientInfo.defaultValues(\"version\"));\r\n\t\t\tcase \"kekid\":\r\n\t\t\t\treturn ((memberValue.compareWithDefault(\"keyIdentifier\", memberValue.keyIdentifier)) &&\r\n\t\t\t\t\t\t((\"date\" in memberValue) === false) &&\r\n\t\t\t\t\t\t((\"other\" in memberValue) === false));\r\n\t\t\tcase \"keyEncryptionAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedKey\":\r\n\t\t\t\treturn (memberValue.isEqual(KEKRecipientInfo.defaultValues(\"encryptedKey\")));\r\n\t\t\tcase \"preDefinedKEK\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for KEKRecipientInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * KEKRecipientInfo ::= SEQUENCE {\r\n\t *    version CMSVersion,  -- always set to 4\r\n\t *    kekid KEKIdentifier,\r\n\t *    keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,\r\n\t *    encryptedKey EncryptedKey }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [kekid]\r\n\t\t * @property {string} [keyEncryptionAlgorithm]\r\n\t\t * @property {string} [encryptedKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tKEKIdentifier.schema(names.kekid || {}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedKey || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"kekid\",\r\n\t\t\t\"keyEncryptionAlgorithm\",\r\n\t\t\t\"encryptedKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tKEKRecipientInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tkekid: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"kekid\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tkeyEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedKey: \"encryptedKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for KEKRecipientInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.kekid = new KEKIdentifier({ schema: asn1.result.kekid });\r\n\t\tthis.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\r\n\t\tthis.encryptedKey = asn1.result.encryptedKey;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\t\tthis.kekid.toSchema(),\r\n\t\t\t\tthis.keyEncryptionAlgorithm.toSchema(),\r\n\t\t\t\tthis.encryptedKey\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tversion: this.version,\r\n\t\t\tkekid: this.kekid.toJSON(),\r\n\t\t\tkeyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\r\n\t\t\tencryptedKey: this.encryptedKey.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"KEKRecipientInfo.js"}