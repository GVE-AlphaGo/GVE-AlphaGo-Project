{"version":3,"sources":["../src/OCSPResponse.js"],"names":["OCSPResponse","constructor","parameters","responseStatus","defaultValues","responseBytes","fromSchema","schema","memberName","asn1js","Enumerated","ResponseBytes","Error","compareWithDefault","memberValue","isEqual","responseType","response","names","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","asn1","compareSchema","verified","result","toSchema","outputArray","push","toJSON","_object","getCertificateStatus","certificate","issuerCertificate","basicResponse","isForCertificate","status","asn1Basic","fromBER","valueBlock","valueHex","BasicOCSPResponse","ex","sign","privateKey","hashAlgorithm","Promise","reject","verify","certs"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport ResponseBytes from \"./ResponseBytes.js\";\r\nimport BasicOCSPResponse from \"./BasicOCSPResponse.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class OCSPResponse\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OCSPResponse class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Enumerated}\r\n\t\t * @desc responseStatus\r\n\t\t */\r\n\t\tthis.responseStatus = getParametersValue(parameters, \"responseStatus\", OCSPResponse.defaultValues(\"responseStatus\"));\r\n\r\n\t\tif(\"responseBytes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ResponseBytes}\r\n\t\t\t * @desc responseBytes\r\n\t\t\t */\r\n\t\t\tthis.responseBytes = getParametersValue(parameters, \"responseBytes\", OCSPResponse.defaultValues(\"responseBytes\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"responseStatus\":\r\n\t\t\t\treturn new asn1js.Enumerated();\r\n\t\t\tcase \"responseBytes\":\r\n\t\t\t\treturn new ResponseBytes();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"responseStatus\":\r\n\t\t\t\treturn (memberValue.isEqual(OCSPResponse.defaultValues(memberName)));\r\n\t\t\tcase \"responseBytes\":\r\n\t\t\t\treturn ((ResponseBytes.compareWithDefault(\"responseType\", memberValue.responseType)) &&\r\n\t\t\t\t\t\t(ResponseBytes.compareWithDefault(\"response\", memberValue.response)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OCSPResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OCSPResponse ::= SEQUENCE {\r\n\t *    responseStatus         OCSPResponseStatus,\r\n\t *    responseBytes          [0] EXPLICIT ResponseBytes OPTIONAL }\r\n\t *\r\n\t * OCSPResponseStatus ::= ENUMERATED {\r\n\t *    successful            (0),  -- Response has valid confirmations\r\n\t *    malformedRequest      (1),  -- Illegal confirmation request\r\n\t *    internalError         (2),  -- Internal error in issuer\r\n\t *    tryLater              (3),  -- Try again later\r\n\t *    -- (4) is not used\r\n\t *    sigRequired           (5),  -- Must sign the request\r\n\t *    unauthorized          (6)   -- Request unauthorized\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [responseStatus]\r\n\t\t * @property {string} [responseBytes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"OCSPResponse\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Enumerated({ name: (names.responseStatus || \"responseStatus\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tResponseBytes.schema(names.responseBytes || {\r\n\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\tblockName: \"responseBytes\"\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"responseStatus\",\r\n\t\t\t\"responseBytes\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOCSPResponse.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OCSPResponse\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.responseStatus = asn1.result.responseStatus;\r\n\t\tif(\"responseBytes\" in asn1.result)\r\n\t\t\tthis.responseBytes = new ResponseBytes({ schema: asn1.result.responseBytes });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.responseStatus);\r\n\t\tif(\"responseBytes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.responseBytes.toSchema()]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tresponseStatus: this.responseStatus.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"responseBytes\" in this)\r\n\t\t\t_object.responseBytes = this.responseBytes.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get OCSP response status for specific certificate\r\n\t * @param {Certificate} certificate\r\n\t * @param {Certificate} issuerCertificate\r\n\t * @returns {*}\r\n\t */\r\n\tgetCertificateStatus(certificate, issuerCertificate)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet basicResponse;\r\n\r\n\t\tconst result = {\r\n\t\t\tisForCertificate: false,\r\n\t\t\tstatus: 2 // 0 = good, 1 = revoked, 2 = unknown\r\n\t\t};\r\n\t\t//endregion\r\n\r\n\t\t//region Check that \"ResponseBytes\" contain \"OCSP_BASIC_RESPONSE\"\r\n\t\tif((\"responseBytes\" in this) === false)\r\n\t\t\treturn result;\r\n\r\n\t\tif(this.responseBytes.responseType !== \"1.3.6.1.5.5.7.48.1.1\") // id-pkix-ocsp-basic\r\n\t\t\treturn result;\r\n\r\n\t\ttry\r\n\t\t{\r\n\t\t\tconst asn1Basic = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\r\n\t\t\tbasicResponse = new BasicOCSPResponse({ schema: asn1Basic.result });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn basicResponse.getCertificateStatus(certificate, issuerCertificate);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make a signature for current OCSP Response\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(privateKey, hashAlgorithm)\r\n\t{\r\n\t\t//region Check that ResponseData has type BasicOCSPResponse and sign it\r\n\t\tif(this.responseBytes.responseType === \"1.3.6.1.5.5.7.48.1.1\")\r\n\t\t{\r\n\t\t\tconst asn1 = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\r\n\t\t\tconst basicResponse = new BasicOCSPResponse({ schema: asn1.result });\r\n\r\n\t\t\treturn basicResponse.sign(privateKey, hashAlgorithm);\r\n\t\t}\r\n\r\n\t\treturn Promise.reject(`Unknown ResponseBytes type: ${this.responseBytes.responseType}`);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify current OCSP Response\r\n\t * @param {Certificate|null} issuerCertificate In order to decrease size of resp issuer cert could be ommited. In such case you need manually provide it.\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(issuerCertificate = null)\r\n\t{\r\n\t\t//region Check that ResponseBytes exists in the object\r\n\t\tif((\"responseBytes\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Empty ResponseBytes field\");\r\n\t\t//endregion\r\n\r\n\t\t//region Check that ResponceData has type BasicOCSPResponse and verify it\r\n\t\tif(this.responseBytes.responseType === \"1.3.6.1.5.5.7.48.1.1\")\r\n\t\t{\r\n\t\t\tconst asn1 = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHex);\r\n\t\t\tconst basicResponse = new BasicOCSPResponse({ schema: asn1.result });\r\n\r\n\t\t\tif(issuerCertificate !== null)\r\n\t\t\t{\r\n\t\t\t\tif((\"certs\" in basicResponse) === false)\r\n\t\t\t\t\tbasicResponse.certs = [];\r\n\t\t\t\t\r\n\t\t\t\tbasicResponse.certs.push(issuerCertificate);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\treturn basicResponse.verify();\r\n\t\t}\r\n\r\n\t\treturn Promise.reject(`Unknown ResponseBytes type: ${this.responseBytes.responseType}`);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"OCSPResponse.js"}