{"version":3,"sources":["../src/AttributeCertificateV1.js"],"names":["AttCertValidityPeriod","constructor","parameters","notBeforeTime","defaultValues","notAfterTime","fromSchema","schema","memberName","Date","Error","names","asn1js","Sequence","name","blockName","value","GeneralizedTime","asn1","compareSchema","verified","result","toDate","toSchema","valueDate","toJSON","IssuerSerial","issuer","serialNumber","issuerUID","GeneralNames","Integer","BitString","optional","valueBlock","push","AttributeCertificateInfoV1","version","baseCertificateID","subjectName","signature","attrCertValidityPeriod","attributes","issuerUniqueID","extensions","AlgorithmIdentifier","Extensions","Choice","Constructed","idBlock","tagClass","tagNumber","Repeated","Attribute","valueDec","Array","from","element","AttributeCertificateV1","acinfo","signatureAlgorithm","signatureValue"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralNames from \"./GeneralNames.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class AttCertValidityPeriod\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttCertValidityPeriod class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {GeneralizedTime}\r\n\t\t * @desc notBeforeTime\r\n\t\t */\r\n\t\tthis.notBeforeTime = getParametersValue(parameters, \"notBeforeTime\", AttCertValidityPeriod.defaultValues(\"notBeforeTime\"));\r\n\t\t/**\r\n\t\t * @type {GeneralizedTime}\r\n\t\t * @desc notAfterTime\r\n\t\t */\r\n\t\tthis.notAfterTime = getParametersValue(parameters, \"notAfterTime\", AttCertValidityPeriod.defaultValues(\"notAfterTime\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"notBeforeTime\":\r\n\t\t\tcase \"notAfterTime\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttCertValidityPeriod class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AttCertValidityPeriod  ::= SEQUENCE {\r\n\t *   notBeforeTime  GeneralizedTime,\r\n\t *   notAfterTime   GeneralizedTime\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [notBeforeTime]\r\n\t\t * @property {string} [notAfterTime]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.notBeforeTime || \"\") }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.notAfterTime || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"notBeforeTime\",\r\n\t\t\t\"notAfterTime\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttCertValidityPeriod.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tnotBeforeTime: \"notBeforeTime\",\r\n\t\t\t\t\tnotAfterTime: \"notAfterTime\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttCertValidityPeriod\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.notBeforeTime = asn1.result.notBeforeTime.toDate();\r\n\t\tthis.notAfterTime = asn1.result.notAfterTime.toDate();\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.GeneralizedTime({ valueDate: this.notBeforeTime }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ valueDate: this.notAfterTime }),\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tnotBeforeTime: this.notBeforeTime,\r\n\t\t\tnotAfterTime: this.notAfterTime\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class IssuerSerial\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for IssuerSerial class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @desc issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", IssuerSerial.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", IssuerSerial.defaultValues(\"serialNumber\"));\r\n\t\t\r\n\t\tif(\"issuerUID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {BitString}\r\n\t\t\t * @desc issuerUID\r\n\t\t\t */\r\n\t\t\tthis.issuerUID = getParametersValue(parameters, \"issuerUID\", IssuerSerial.defaultValues(\"issuerUID\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn new GeneralNames();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"issuerUID\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for IssuerSerial class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * IssuerSerial  ::=  SEQUENCE {\r\n\t *   \tissuer         GeneralNames,\r\n\t * \t\tserial         CertificateSerialNumber,\r\n\t * \t\tissuerUID      UniqueIdentifier OPTIONAL\r\n\t * }\r\n\t *\r\n\t * CertificateSerialNumber ::= INTEGER\r\n\t * UniqueIdentifier  ::=  BIT STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [issuer]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t * @property {string} [issuerUID]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tGeneralNames.schema(names.issuer || {}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") }),\r\n\t\t\t\tnew asn1js.BitString({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.issuerUID || \"\")\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"issuer\",\r\n\t\t\t\"serialNumber\",\r\n\t\t\t\"issuerUID\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tIssuerSerial.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tissuer: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"issuer\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tserialNumber: \"serialNumber\",\r\n\t\t\t\t\tissuerUID: \"issuerUID\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for IssuerSerial\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.issuer = new GeneralNames({ schema: asn1.result.issuer });\r\n\t\tthis.serialNumber = asn1.result.serialNumber;\r\n\t\t\r\n\t\tif(\"issuerUID\" in asn1.result)\r\n\t\t\tthis.issuerUID = asn1.result.issuerUID;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst result = new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.issuer.toSchema(),\r\n\t\t\t\tthis.serialNumber\r\n\t\t\t]\r\n\t\t});\r\n\t\t\r\n\t\tif(\"issuerUID\" in this)\r\n\t\t\tresult.valueBlock.value.push(this.issuerUID);\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn result;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst result = {\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"issuerUID\" in this)\r\n\t\t\tresult.issuerUID = this.issuerUID.toJSON();\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5755\r\n */\r\nexport class AttributeCertificateInfoV1\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttributeCertificateInfoV1 class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", AttributeCertificateInfoV1.defaultValues(\"version\"));\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {IssuerSerial}\r\n\t\t\t * @desc baseCertificateID\r\n\t\t\t */\r\n\t\t\tthis.baseCertificateID = getParametersValue(parameters, \"baseCertificateID\", AttributeCertificateInfoV1.defaultValues(\"baseCertificateID\"));\r\n\t\t\r\n\t\tif(\"subjectName\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {GeneralNames}\r\n\t\t\t * @desc subjectName\r\n\t\t\t */\r\n\t\t\tthis.subjectName = getParametersValue(parameters, \"subjectName\", AttributeCertificateInfoV1.defaultValues(\"subjectName\"));\r\n\r\n\t\t/**\r\n\t\t * @type {GeneralNames}\r\n\t\t * @desc issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", AttributeCertificateInfoV1.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", AttributeCertificateInfoV1.defaultValues(\"signature\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", AttributeCertificateInfoV1.defaultValues(\"serialNumber\"));\r\n\t\t/**\r\n\t\t * @type {AttCertValidityPeriod}\r\n\t\t * @desc attrCertValidityPeriod\r\n\t\t */\r\n\t\tthis.attrCertValidityPeriod = getParametersValue(parameters, \"attrCertValidityPeriod\", AttributeCertificateInfoV1.defaultValues(\"attrCertValidityPeriod\"));\r\n\t\t/**\r\n\t\t * @type {Array.<Attribute>}\r\n\t\t * @desc attributes\r\n\t\t */\r\n\t\tthis.attributes = getParametersValue(parameters, \"attributes\", AttributeCertificateInfoV1.defaultValues(\"attributes\"));\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {BitString}\r\n\t\t\t * @desc issuerUniqueID\r\n\t\t\t */\r\n\t\t\tthis.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", AttributeCertificateInfoV1.defaultValues(\"issuerUniqueID\"));\r\n\t\t\t\r\n\t\tif(\"extensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Extensions}\r\n\t\t\t * @desc extensions\r\n\t\t\t */\r\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", AttributeCertificateInfoV1.defaultValues(\"extensions\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"baseCertificateID\":\r\n\t\t\t\treturn new IssuerSerial();\r\n\t\t\tcase \"subjectName\":\r\n\t\t\t\treturn new GeneralNames();\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"attrCertValidityPeriod\":\r\n\t\t\t\treturn new AttCertValidityPeriod();\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"issuerUniqueID\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn new Extensions();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateInfoV1 class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AttributeCertificateInfo ::= SEQUENCE {\r\n\t * \tversion Version DEFAULT v1,\r\n\t * \tsubject CHOICE {\r\n\t * \t\tbaseCertificateID [0] IssuerSerial, -- associated with a Public Key Certificate\r\n\t * \t\tsubjectName [1] GeneralNames }, -- associated with a name\r\n\t * \tissuer GeneralNames, -- CA issuing the attribute certificate\r\n\t * \tsignature AlgorithmIdentifier,\r\n\t * \tserialNumber CertificateSerialNumber,\r\n\t * \tattrCertValidityPeriod AttCertValidityPeriod,\r\n\t * \tattributes SEQUENCE OF Attribute,\r\n\t * \tissuerUniqueID UniqueIdentifier OPTIONAL,\r\n\t * \textensions Extensions OPTIONAL\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [issuer]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.baseCertificateID || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: IssuerSerial.schema().valueBlock.value\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.subjectName || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\t\t\t\ttagNumber: 1 // [2]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: GeneralNames.schema().valueBlock.value\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tGeneralNames.schema({\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: (names.issuer || \"\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signature || {}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") }),\r\n\t\t\t\tAttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tname: (names.attributes || \"\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.issuerUniqueID || \"\")\r\n\t\t\t\t}),\r\n\t\t\t\tExtensions.schema(names.extensions || {}, true)\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"baseCertificateID\",\r\n\t\t\t\"subjectName\",\r\n\t\t\t\"issuer\",\r\n\t\t\t\"signature\",\r\n\t\t\t\"serialNumber\",\r\n\t\t\t\"attrCertValidityPeriod\",\r\n\t\t\t\"attributes\",\r\n\t\t\t\"issuerUniqueID\",\r\n\t\t\t\"extensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttributeCertificateInfoV1.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tbaseCertificateID: \"baseCertificateID\",\r\n\t\t\t\t\tsubjectName: \"subjectName\",\r\n\t\t\t\t\tissuer: \"issuer\",\r\n\t\t\t\t\tsignature: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"signature\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tserialNumber: \"serialNumber\",\r\n\t\t\t\t\tattrCertValidityPeriod: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"attrCertValidityPeriod\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tattributes: \"attributes\",\r\n\t\t\t\t\tissuerUniqueID: \"issuerUniqueID\",\r\n\t\t\t\t\textensions: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"extensions\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateInfoV1\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.baseCertificateID = new IssuerSerial({\r\n\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\tvalue: asn1.result.baseCertificateID.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tif(\"subjectName\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.subjectName = new GeneralNames({\r\n\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\tvalue: asn1.result.subjectName.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tthis.issuer = asn1.result.issuer;\r\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\r\n\t\tthis.serialNumber = asn1.result.serialNumber;\r\n\t\tthis.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\r\n\t\tthis.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in asn1.result)\r\n\t\t\tthis.issuerUniqueID = asn1.result.issuerUniqueID;\r\n\t\t\r\n\t\tif(\"extensions\" in asn1.result)\r\n\t\t\tthis.extensions = new Extensions({ schema: asn1.result.extensions });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst result = new asn1js.Sequence({\r\n\t\t\tvalue: [new asn1js.Integer({ value: this.version })]\r\n\t\t});\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in this)\r\n\t\t{\r\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.baseCertificateID.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"subjectName\" in this)\r\n\t\t{\r\n\t\t\tresult.valueBlock.value.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3,\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.subjectName.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tresult.valueBlock.value.push(this.issuer.toSchema());\r\n\t\tresult.valueBlock.value.push(this.signature.toSchema());\r\n\t\tresult.valueBlock.value.push(this.serialNumber);\r\n\t\tresult.valueBlock.value.push(this.attrCertValidityPeriod.toSchema());\r\n\t\tresult.valueBlock.value.push(new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t}));\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t\tresult.valueBlock.value.push(this.issuerUniqueID);\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t\tresult.valueBlock.value.push(this.extensions.toSchema());\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst result = {\r\n\t\t\tversion: this.version\r\n\t\t};\r\n\t\t\r\n\t\tif(\"baseCertificateID\" in this)\r\n\t\t\tresult.baseCertificateID = this.baseCertificateID.toJSON();\r\n\t\t\r\n\t\tif(\"subjectName\" in this)\r\n\t\t\tresult.subjectName = this.subjectName.toJSON();\r\n\r\n\t\tresult.issuer = this.issuer.toJSON();\r\n\t\tresult.signature = this.signature.toJSON();\r\n\t\tresult.serialNumber = this.serialNumber.toJSON();\r\n\t\tresult.attrCertValidityPeriod = this.attrCertValidityPeriod.toJSON();\r\n\t\tresult.attributes = Array.from(this.attributes, element => element.toJSON());\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t\tresult.issuerUniqueID = this.issuerUniqueID.toJSON();\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t\tresult.extensions = this.extensions.toJSON();\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from X.509:1997\r\n */\r\nexport default class AttributeCertificateV1\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttributeCertificateV1 class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AttributeCertificateInfoV1}\r\n\t\t * @desc acinfo\r\n\t\t */\r\n\t\tthis.acinfo = getParametersValue(parameters, \"acinfo\", AttributeCertificateV1.defaultValues(\"acinfo\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", AttributeCertificateV1.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc signatureValue\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", AttributeCertificateV1.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"acinfo\":\r\n\t\t\t\treturn new AttributeCertificateInfoV1();\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttributeCertificateV1 class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AttributeCertificate ::= SEQUENCE {\r\n\t *   acinfo               AttributeCertificateInfoV1,\r\n\t *   signatureAlgorithm   AlgorithmIdentifier,\r\n\t *   signatureValue       BIT STRING\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {Object} [acinfo]\r\n\t\t * @property {Object} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAttributeCertificateInfoV1.schema(names.acinfo || {}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"acinfo\",\r\n\t\t\t\"signatureValue\",\r\n\t\t\t\"signatureAlgorithm\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttributeCertificateV1.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tacinfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"acinfo\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsignatureAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsignatureValue: \"signatureValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeCertificateV1\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.acinfo = new AttributeCertificateInfoV1({ schema: asn1.result.acinfo });\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.acinfo.toSchema(),\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tacinfo: this.acinfo.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"AttributeCertificateV1.js"}