{"version":3,"sources":["../src/Request.js"],"names":["Request","constructor","parameters","reqCert","defaultValues","singleRequestExtensions","fromSchema","schema","memberName","CertID","Error","compareWithDefault","memberValue","isEqual","length","names","asn1js","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","Extension","extensions","asn1","compareSchema","verified","result","Array","from","valueBlock","element","toSchema","outputArray","push","toJSON","_object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport CertID from \"./CertID.js\";\r\nimport Extension from \"./Extension.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class Request\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Request class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {CertID}\r\n\t\t * @desc reqCert\r\n\t\t */\r\n\t\tthis.reqCert = getParametersValue(parameters, \"reqCert\", Request.defaultValues(\"reqCert\"));\r\n\r\n\t\tif(\"singleRequestExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @desc singleRequestExtensions\r\n\t\t\t */\r\n\t\t\tthis.singleRequestExtensions = getParametersValue(parameters, \"singleRequestExtensions\", Request.defaultValues(\"singleRequestExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"reqCert\":\r\n\t\t\t\treturn new CertID();\r\n\t\t\tcase \"singleRequestExtensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Request class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"reqCert\":\r\n\t\t\t\treturn (memberValue.isEqual(Request.defaultValues(memberName)));\r\n\t\t\tcase \"singleRequestExtensions\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Request class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Request         ::=     SEQUENCE {\r\n\t *    reqCert                     CertID,\r\n\t *    singleRequestExtensions     [0] EXPLICIT Extensions OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [reqCert]\r\n\t\t * @property {string} [extensions]\r\n\t\t * @property {string} [singleRequestExtensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tCertID.schema(names.reqCert || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [Extension.schema(names.extensions || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: (names.singleRequestExtensions || \"\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"reqCert\",\r\n\t\t\t\"singleRequestExtensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRequest.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\treqCert: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"reqCert\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsingleRequestExtensions: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"singleRequestExtensions\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Request\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.reqCert = new CertID({ schema: asn1.result.reqCert });\r\n\r\n\t\tif(\"singleRequestExtensions\" in asn1.result)\r\n\t\t\tthis.singleRequestExtensions = Array.from(asn1.result.singleRequestExtensions.valueBlock.value, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.reqCert.toSchema());\r\n\r\n\t\tif(\"singleRequestExtensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: Array.from(this.singleRequestExtensions, element => element.toSchema())\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\treqCert: this.reqCert.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"singleRequestExtensions\" in this)\r\n\t\t\t_object.singleRequestExtensions = Array.from(this.singleRequestExtensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"Request.js"}