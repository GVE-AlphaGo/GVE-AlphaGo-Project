{"version":3,"sources":["../src/PolicyMappings.js"],"names":["PolicyMappings","constructor","parameters","mappings","defaultValues","fromSchema","schema","memberName","Error","names","asn1js","Sequence","name","blockName","value","Repeated","PolicyMapping","asn1","compareSchema","verified","Array","from","result","element","toSchema","toJSON"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;AACA;;AACA;;;AAGe,MAAMA,cAAN,CACf;AACC;;AACA;;;;;AAKAC,EAAAA,WAAW,CAACC,UAAU,GAAG,EAAd,EACX;AACC;;AACA;;;;AAIA,SAAKC,QAAL,GAAgB,iCAAmBD,UAAnB,EAA+B,UAA/B,EAA2CF,cAAc,CAACI,aAAf,CAA6B,UAA7B,CAA3C,CAAhB,CAND,CAOC;AAEA;;AACA,QAAG,YAAYF,UAAf,EACC,KAAKG,UAAL,CAAgBH,UAAU,CAACI,MAA3B,EAXF,CAYC;AACA,GArBF,CAsBC;;AACA;;;;;;AAIA,SAAOF,aAAP,CAAqBG,UAArB,EACA;AACC,YAAOA,UAAP;AAEC,WAAK,UAAL;AACC,eAAO,EAAP;;AACD;AACC,cAAM,IAAIC,KAAJ,CAAW,iDAAgDD,UAAW,EAAtE,CAAN;AALF;AAOA,GApCF,CAqCC;;AACA;;;;;;;;;;;;;AAWA,SAAOD,MAAP,CAAcJ,UAAU,GAAG,EAA3B,EACA;AACC;;;;;;AAMA,UAAMO,KAAK,GAAG,iCAAmBP,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;AAEA,WAAQ,IAAIQ,MAAM,CAACC,QAAX,CAAoB;AAC3BC,MAAAA,IAAI,EAAGH,KAAK,CAACI,SAAN,IAAmB,EADC;AAE3BC,MAAAA,KAAK,EAAE,CACN,IAAIJ,MAAM,CAACK,QAAX,CAAoB;AACnBH,QAAAA,IAAI,EAAGH,KAAK,CAACN,QAAN,IAAkB,EADN;AAEnBW,QAAAA,KAAK,EAAEE,uBAAcV,MAAd;AAFY,OAApB,CADM;AAFoB,KAApB,CAAR;AASA,GApEF,CAqEC;;AACA;;;;;;AAIAD,EAAAA,UAAU,CAACC,MAAD,EACV;AACC;AACA,6BAAWA,MAAX,EAAmB,CAClB,UADkB,CAAnB,EAFD,CAKC;AAEA;;AACA,UAAMW,IAAI,GAAGP,MAAM,CAACQ,aAAP,CAAqBZ,MAArB,EACZA,MADY,EAEZN,cAAc,CAACM,MAAf,CAAsB;AACrBG,MAAAA,KAAK,EAAE;AACNN,QAAAA,QAAQ,EAAE;AADJ;AADc,KAAtB,CAFY,CAAb;AASA,QAAGc,IAAI,CAACE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAIX,KAAJ,CAAU,wEAAV,CAAN,CAlBF,CAmBC;AAEA;;AACA,SAAKL,QAAL,GAAgBiB,KAAK,CAACC,IAAN,CAAWJ,IAAI,CAACK,MAAL,CAAYnB,QAAvB,EAAiCoB,OAAO,IAAI,IAAIP,sBAAJ,CAAkB;AAAEV,MAAAA,MAAM,EAAEiB;AAAV,KAAlB,CAA5C,CAAhB,CAtBD,CAuBC;AACA,GAnGF,CAoGC;;AACA;;;;;;AAIAC,EAAAA,QAAQ,GACR;AACC;AACA,WAAQ,IAAId,MAAM,CAACC,QAAX,CAAoB;AAC3BG,MAAAA,KAAK,EAAEM,KAAK,CAACC,IAAN,CAAW,KAAKlB,QAAhB,EAA0BoB,OAAO,IAAIA,OAAO,CAACC,QAAR,EAArC;AADoB,KAApB,CAAR,CAFD,CAKC;AACA,GAhHF,CAiHC;;AACA;;;;;;AAIAC,EAAAA,MAAM,GACN;AACC,WAAO;AACNtB,MAAAA,QAAQ,EAAEiB,KAAK,CAACC,IAAN,CAAW,KAAKlB,QAAhB,EAA0BoB,OAAO,IAAIA,OAAO,CAACE,MAAR,EAArC;AADJ,KAAP;AAGA,GA3HF,CA4HC;;;AA5HD,C,CA8HA","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport PolicyMapping from \"./PolicyMapping.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class PolicyMappings\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PolicyMappings class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<PolicyMapping>}\r\n\t\t * @desc mappings\r\n\t\t */\r\n\t\tthis.mappings = getParametersValue(parameters, \"mappings\", PolicyMappings.defaultValues(\"mappings\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"mappings\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PolicyMappings class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PolicyMappings ::= SEQUENCE SIZE (1..MAX) OF PolicyMapping\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [utcTimeName] Name for \"utcTimeName\" choice\r\n\t\t * @property {string} [generalTimeName] Name for \"generalTimeName\" choice\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.mappings || \"\"),\r\n\t\t\t\t\tvalue: PolicyMapping.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"mappings\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPolicyMappings.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tmappings: \"mappings\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PolicyMappings\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.mappings = Array.from(asn1.result.mappings, element => new PolicyMapping({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.mappings, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tmappings: Array.from(this.mappings, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"PolicyMappings.js"}