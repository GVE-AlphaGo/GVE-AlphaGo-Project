{"version":3,"sources":["../src/CertificateRevocationList.js"],"names":["tbsCertList","parameters","names","asn1js","Sequence","name","blockName","value","Integer","optional","tbsCertListVersion","AlgorithmIdentifier","schema","signature","RelativeDistinguishedNames","issuer","Time","tbsCertListThisUpdate","utcTimeName","generalTimeName","tbsCertListNextUpdate","Repeated","tbsCertListRevokedCertificates","Extensions","Constructed","idBlock","tagClass","tagNumber","crlExtensions","CertificateRevocationList","constructor","tbs","defaultValues","version","thisUpdate","nextUpdate","revokedCertificates","signatureAlgorithm","signatureValue","fromSchema","memberName","ArrayBuffer","BitString","Error","asn1","compareSchema","verified","result","valueBeforeDecode","valueBlock","valueDec","Array","from","element","RevokedCertificate","encodeTBS","outputArray","push","toSchema","encodeFlag","tbsSchema","length","fromBER","toJSON","object","byteLength","isCertificateRevoked","certificate","isEqual","revokedCertificate","userCertificate","serialNumber","sign","privateKey","hashAlgorithm","Promise","reject","sequence","resolve","engine","then","subtle","getSignatureParameters","toBER","signWithPrivateKey","valueHex","verify","subjectPublicKeyInfo","issuerCertificate","subject","publicKeyInfo","extensions","extension","critical","verifyWithPublicKey"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, bufferToHexCodes, clearProps } from \"pvutils\";\r\nimport { getEngine } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport Time from \"./Time.js\";\r\nimport RevokedCertificate from \"./RevokedCertificate.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\nfunction tbsCertList(parameters = {})\r\n{\r\n\t//TBSCertList  ::=  SEQUENCE  {\r\n\t//    version                 Version OPTIONAL,\r\n\t//                                 -- if present, MUST be v2\r\n\t//    signature               AlgorithmIdentifier,\r\n\t//    issuer                  Name,\r\n\t//    thisUpdate              Time,\r\n\t//    nextUpdate              Time OPTIONAL,\r\n\t//    revokedCertificates     SEQUENCE OF SEQUENCE  {\r\n\t//        userCertificate         CertificateSerialNumber,\r\n\t//        revocationDate          Time,\r\n\t//        crlEntryExtensions      Extensions OPTIONAL\r\n\t//        -- if present, version MUST be v2\r\n\t//    }  OPTIONAL,\r\n\t//    crlExtensions           [0]  EXPLICIT Extensions OPTIONAL\r\n\t//    -- if present, version MUST be v2\r\n\t//}\r\n\t\r\n\t/**\r\n\t * @type {Object}\r\n\t * @property {string} [blockName]\r\n\t * @property {string} [tbsCertListVersion]\r\n\t * @property {string} [signature]\r\n\t * @property {string} [issuer]\r\n\t * @property {string} [tbsCertListThisUpdate]\r\n\t * @property {string} [tbsCertListNextUpdate]\r\n\t * @property {string} [tbsCertListRevokedCertificates]\r\n\t * @property {string} [crlExtensions]\r\n\t */\r\n\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\r\n\treturn (new asn1js.Sequence({\r\n\t\tname: (names.blockName || \"tbsCertList\"),\r\n\t\tvalue: [\r\n\t\t\tnew asn1js.Integer({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tname: (names.tbsCertListVersion || \"tbsCertList.version\"),\r\n\t\t\t\tvalue: 2\r\n\t\t\t}), // EXPLICIT integer value (v2)\r\n\t\t\tAlgorithmIdentifier.schema(names.signature || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertList.signature\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tRelativeDistinguishedNames.schema(names.issuer || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertList.issuer\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tTime.schema(names.tbsCertListThisUpdate || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tutcTimeName: \"tbsCertList.thisUpdate\",\r\n\t\t\t\t\tgeneralTimeName: \"tbsCertList.thisUpdate\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tTime.schema(names.tbsCertListNextUpdate || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tutcTimeName: \"tbsCertList.nextUpdate\",\r\n\t\t\t\t\tgeneralTimeName: \"tbsCertList.nextUpdate\"\r\n\t\t\t\t}\r\n\t\t\t}, true),\r\n\t\t\tnew asn1js.Sequence({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\tname: (names.tbsCertListRevokedCertificates || \"tbsCertList.revokedCertificates\"),\r\n\t\t\t\t\t\tvalue: new asn1js.Sequence({\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.Integer(),\r\n\t\t\t\t\t\t\t\tTime.schema(),\r\n\t\t\t\t\t\t\t\tExtensions.schema({}, true)\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [Extensions.schema(names.crlExtensions || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"tbsCertList.extensions\"\r\n\t\t\t\t\t}\r\n\t\t\t\t})]\r\n\t\t\t}) // EXPLICIT SEQUENCE value\r\n\t\t]\r\n\t}));\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class CertificateRevocationList {\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Attribute class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc tbs\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", CertificateRevocationList.defaultValues(\"tbs\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", CertificateRevocationList.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signature\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", CertificateRevocationList.defaultValues(\"signature\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @desc issuer\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", CertificateRevocationList.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {Time}\r\n\t\t * @desc thisUpdate\r\n\t\t */\r\n\t\tthis.thisUpdate = getParametersValue(parameters, \"thisUpdate\", CertificateRevocationList.defaultValues(\"thisUpdate\"));\r\n\t\t\r\n\t\tif(\"nextUpdate\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Time}\r\n\t\t\t * @desc nextUpdate\r\n\t\t\t */\r\n\t\t\tthis.nextUpdate = getParametersValue(parameters, \"nextUpdate\", CertificateRevocationList.defaultValues(\"nextUpdate\"));\r\n\t\t\r\n\t\tif(\"revokedCertificates\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<RevokedCertificate>}\r\n\t\t\t * @desc revokedCertificates\r\n\t\t\t */\r\n\t\t\tthis.revokedCertificates = getParametersValue(parameters, \"revokedCertificates\", CertificateRevocationList.defaultValues(\"revokedCertificates\"));\r\n\t\t\r\n\t\tif(\"crlExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Extensions}\r\n\t\t\t * @desc crlExtensions\r\n\t\t\t */\r\n\t\t\tthis.crlExtensions = getParametersValue(parameters, \"crlExtensions\", CertificateRevocationList.defaultValues(\"crlExtensions\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", CertificateRevocationList.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc signatureValue\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", CertificateRevocationList.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 1;\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"thisUpdate\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"nextUpdate\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"revokedCertificates\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"crlExtensions\":\r\n\t\t\t\treturn new Extensions();\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificateRevocationList class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * CertificateList  ::=  SEQUENCE  {\r\n\t *    tbsCertList          TBSCertList,\r\n\t *    signatureAlgorithm   AlgorithmIdentifier,\r\n\t *    signatureValue       BIT STRING  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"CertificateList\"),\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsCertList(parameters),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"signatureValue\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"tbsCertList\",\r\n\t\t\t\"tbsCertList.version\",\r\n\t\t\t\"tbsCertList.signature\",\r\n\t\t\t\"tbsCertList.issuer\",\r\n\t\t\t\"tbsCertList.thisUpdate\",\r\n\t\t\t\"tbsCertList.nextUpdate\",\r\n\t\t\t\"tbsCertList.revokedCertificates\",\r\n\t\t\t\"tbsCertList.extensions\",\r\n\t\t\t\"signatureAlgorithm\",\r\n\t\t\t\"signatureValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificateRevocationList.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertificateRevocationList\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tthis.tbs = asn1.result.tbsCertList.valueBeforeDecode;\r\n\t\t\r\n\t\tif(\"tbsCertList.version\" in asn1.result)\r\n\t\t\tthis.version = asn1.result[\"tbsCertList.version\"].valueBlock.valueDec;\r\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result[\"tbsCertList.signature\"] });\r\n\t\tthis.issuer = new RelativeDistinguishedNames({ schema: asn1.result[\"tbsCertList.issuer\"] });\r\n\t\tthis.thisUpdate = new Time({ schema: asn1.result[\"tbsCertList.thisUpdate\"] });\r\n\t\tif(\"tbsCertList.nextUpdate\" in asn1.result)\r\n\t\t\tthis.nextUpdate = new Time({ schema: asn1.result[\"tbsCertList.nextUpdate\"] });\r\n\t\tif(\"tbsCertList.revokedCertificates\" in asn1.result)\r\n\t\t\tthis.revokedCertificates = Array.from(asn1.result[\"tbsCertList.revokedCertificates\"], element => new RevokedCertificate({ schema: element }));\r\n\t\tif(\"tbsCertList.extensions\" in asn1.result)\r\n\t\t\tthis.crlExtensions = new Extensions({ schema: asn1.result[\"tbsCertList.extensions\"] });\r\n\t\t\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\tencodeTBS()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(this.version !== CertificateRevocationList.defaultValues(\"version\"))\r\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\t\r\n\t\toutputArray.push(this.signature.toSchema());\r\n\t\toutputArray.push(this.issuer.toSchema());\r\n\t\toutputArray.push(this.thisUpdate.toSchema());\r\n\t\t\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t\toutputArray.push(this.nextUpdate.toSchema());\r\n\t\t\r\n\t\tif(\"revokedCertificates\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.revokedCertificates, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"crlExtensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tthis.crlExtensions.toSchema()\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tlet tbsSchema;\r\n\t\t\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.length === 0) // No stored TBS part\r\n\t\t\t\treturn CertificateRevocationList.schema();\r\n\t\t\t\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t\ttbsSchema = this.encodeTBS();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsSchema,\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\ttbs: bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\r\n\t\t\tsignature: this.signature.toJSON(),\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tthisUpdate: this.thisUpdate.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(this.version !== CertificateRevocationList.defaultValues(\"version\"))\r\n\t\t\tobject.version = this.version;\r\n\t\t\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t\tobject.nextUpdate = this.nextUpdate.toJSON();\r\n\t\t\r\n\t\tif(\"revokedCertificates\" in this)\r\n\t\t\tobject.revokedCertificates = Array.from(this.revokedCertificates, element => element.toJSON());\r\n\t\t\r\n\t\tif(\"crlExtensions\" in this)\r\n\t\t\tobject.crlExtensions = this.crlExtensions.toJSON();\r\n\t\t\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\tisCertificateRevoked(certificate)\r\n\t{\r\n\t\t//region Check that issuer of the input certificate is the same with issuer of this CRL\r\n\t\tif(this.issuer.isEqual(certificate.issuer) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check that there are revoked certificates in this CRL\r\n\t\tif((\"revokedCertificates\" in this) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search for input certificate in revoked certificates array\r\n\t\tfor(const revokedCertificate of this.revokedCertificates)\r\n\t\t{\r\n\t\t\tif(revokedCertificate.userCertificate.isEqual(certificate.serialNumber))\r\n\t\t\t\treturn true;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make a signature for existing CRL data\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm] Hashing algorithm. Default SHA-1\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Get a private key from function parameter\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signature = result.signatureAlgorithm;\r\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbs = this.encodeTBS().toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signatureValue = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify existing signature\r\n\t * @param {{[issuerCertificate]: Object, [publicKeyInfo]: Object}} parameters\r\n\t * @returns {*}\r\n\t */\r\n\tverify(parameters = {})\r\n\t{\r\n\t\t//region Global variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet subjectPublicKeyInfo = -1;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get information about CRL issuer certificate\r\n\t\tif(\"issuerCertificate\" in parameters) // \"issuerCertificate\" must be of type \"Certificate\"\r\n\t\t{\r\n\t\t\tsubjectPublicKeyInfo = parameters.issuerCertificate.subjectPublicKeyInfo;\r\n\t\t\t\r\n\t\t\t// The CRL issuer name and \"issuerCertificate\" subject name are not equal\r\n\t\t\tif(this.issuer.isEqual(parameters.issuerCertificate.subject) === false)\r\n\t\t\t\treturn Promise.resolve(false);\r\n\t\t}\r\n\t\t\r\n\t\t//region In case if there is only public key during verification\r\n\t\tif(\"publicKeyInfo\" in parameters)\r\n\t\t\tsubjectPublicKeyInfo = parameters.publicKeyInfo; // Must be of type \"PublicKeyInfo\"\r\n\t\t//endregion\r\n\t\t\r\n\t\tif((\"subjectPublicKey\" in subjectPublicKeyInfo) === false)\r\n\t\t\treturn Promise.reject(\"Issuer's certificate must be provided as an input parameter\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the CRL for unknown critical extensions\r\n\t\tif(\"crlExtensions\" in this)\r\n\t\t{\r\n\t\t\tfor(const extension of this.crlExtensions.extensions)\r\n\t\t\t{\r\n\t\t\t\tif(extension.critical)\r\n\t\t\t\t{\r\n\t\t\t\t\t// We can not be sure that unknown extension has no value for CRL signature\r\n\t\t\t\t\tif((\"parsedValue\" in extension) === false)\r\n\t\t\t\t\t\treturn Promise.resolve(false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\tsequence = sequence.then(() => engine.subtle.verifyWithPublicKey(this.tbs, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm));\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"CertificateRevocationList.js"}