{"version":3,"sources":["../src/SignedAndUnsignedAttributes.js"],"names":["SignedAndUnsignedAttributes","constructor","parameters","type","defaultValues","attributes","encodedValue","fromSchema","schema","memberName","ArrayBuffer","Error","compareWithDefault","memberValue","length","byteLength","names","asn1js","Constructed","name","blockName","optional","idBlock","tagClass","tagNumber","value","Repeated","Attribute","asn1","compareSchema","verified","result","valueBeforeDecode","encodedView","Uint8Array","Array","from","element","toSchema","toJSON"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport Attribute from \"./Attribute.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class SignedAndUnsignedAttributes\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SignedAndUnsignedAttributes class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc type\r\n\t\t */\r\n\t\tthis.type = getParametersValue(parameters, \"type\", SignedAndUnsignedAttributes.defaultValues(\"type\"));\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @desc attributes\r\n\t\t */\r\n\t\tthis.attributes = getParametersValue(parameters, \"attributes\", SignedAndUnsignedAttributes.defaultValues(\"attributes\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc encodedValue Need to have it in order to successfully process with signature verification\r\n\t\t */\r\n\t\tthis.encodedValue = getParametersValue(parameters, \"encodedValue\", SignedAndUnsignedAttributes.defaultValues(\"encodedValue\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"encodedValue\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedAndUnsignedAttributes class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn (memberValue === SignedAndUnsignedAttributes.defaultValues(\"type\"));\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"encodedValue\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SignedAndUnsignedAttributes class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SignedAttributes ::= SET SIZE (1..MAX) OF Attribute\r\n\t *\r\n\t * UnsignedAttributes ::= SET SIZE (1..MAX) OF Attribute\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {number} [tagNumber]\r\n\t\t * @property {string} [attributes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Constructed({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: true,\r\n\t\t\tidBlock: {\r\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\ttagNumber: names.tagNumber // \"SignedAttributes\" = 0, \"UnsignedAttributes\" = 1\r\n\t\t\t},\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.attributes || \"\"),\r\n\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"attributes\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSignedAndUnsignedAttributes.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttagNumber: this.type,\r\n\t\t\t\t\tattributes: \"attributes\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedAndUnsignedAttributes\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.type = asn1.result.idBlock.tagNumber;\r\n\t\tthis.encodedValue = asn1.result.valueBeforeDecode;\r\n\r\n\t\t//region Change type from \"[0]\" to \"SET\" accordingly to standard\r\n\t\tconst encodedView = new Uint8Array(this.encodedValue);\r\n\t\tencodedView[0] = 0x31;\r\n\t\t//endregion\r\n\r\n\t\tif((\"attributes\" in asn1.result) === false)\r\n\t\t{\r\n\t\t\tif(this.type === 0)\r\n\t\t\t\tthrow new Error(\"Wrong structure of SignedUnsignedAttributes\");\r\n\t\t\telse\r\n\t\t\t\treturn; // Not so important in case of \"UnsignedAttributes\"\r\n\t\t}\r\n\r\n\t\tthis.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tif(SignedAndUnsignedAttributes.compareWithDefault(\"type\", this.type) || SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", this.attributes))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"SignedAndUnsignedAttributes\\\" class\");\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Constructed({\r\n\t\t\toptional: true,\r\n\t\t\tidBlock: {\r\n\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\ttagNumber: this.type // \"SignedAttributes\" = 0, \"UnsignedAttributes\" = 1\r\n\t\t\t},\r\n\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tif(SignedAndUnsignedAttributes.compareWithDefault(\"type\", this.type) || SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", this.attributes))\r\n\t\t\tthrow new Error(\"Incorrectly initialized \\\"SignedAndUnsignedAttributes\\\" class\");\r\n\t\t\r\n\t\treturn {\r\n\t\t\ttype: this.type,\r\n\t\t\tattributes: Array.from(this.attributes, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"SignedAndUnsignedAttributes.js"}