{"version":3,"sources":["../src/SingleResponse.js"],"names":["SingleResponse","constructor","parameters","certID","defaultValues","certStatus","thisUpdate","nextUpdate","singleExtensions","fromSchema","schema","memberName","CertID","Date","Error","compareWithDefault","memberValue","hashAlgorithm","issuerNameHash","issuerKeyHash","serialNumber","Object","keys","length","names","asn1js","Sequence","name","blockName","value","Choice","Primitive","idBlock","tagClass","tagNumber","lenBlockLength","Constructed","GeneralizedTime","optional","Enumerated","lenBlock","Extensions","asn1","compareSchema","verified","result","toDate","Array","from","valueBlock","element","Extension","toSchema","outputArray","push","valueDate","toJSON","_object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport CertID from \"./CertID.js\";\r\nimport Extension from \"./Extension.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class SingleResponse\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SingleResponse class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {CertID}\r\n\t\t * @desc certID\r\n\t\t */\r\n\t\tthis.certID = getParametersValue(parameters, \"certID\", SingleResponse.defaultValues(\"certID\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc certStatus\r\n\t\t */\r\n\t\tthis.certStatus = getParametersValue(parameters, \"certStatus\", SingleResponse.defaultValues(\"certStatus\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @desc thisUpdate\r\n\t\t */\r\n\t\tthis.thisUpdate = getParametersValue(parameters, \"thisUpdate\", SingleResponse.defaultValues(\"thisUpdate\"));\r\n\r\n\t\tif(\"nextUpdate\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Date}\r\n\t\t\t * @desc nextUpdate\r\n\t\t\t */\r\n\t\t\tthis.nextUpdate = getParametersValue(parameters, \"nextUpdate\", SingleResponse.defaultValues(\"nextUpdate\"));\r\n\r\n\t\tif(\"singleExtensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Extension>}\r\n\t\t\t * @desc singleExtensions\r\n\t\t\t */\r\n\t\t\tthis.singleExtensions = getParametersValue(parameters, \"singleExtensions\", SingleResponse.defaultValues(\"singleExtensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certID\":\r\n\t\t\t\treturn new CertID();\r\n\t\t\tcase \"certStatus\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"thisUpdate\":\r\n\t\t\tcase \"nextUpdate\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tcase \"singleExtensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SingleResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certID\":\r\n\t\t\t\t// noinspection OverlyComplexBooleanExpressionJS\r\n\t\t\t\treturn ((CertID.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\r\n\t\t\t\t\t\t(CertID.compareWithDefault(\"issuerNameHash\", memberValue.issuerNameHash)) &&\r\n\t\t\t\t\t\t(CertID.compareWithDefault(\"issuerKeyHash\", memberValue.issuerKeyHash)) &&\r\n\t\t\t\t\t\t(CertID.compareWithDefault(\"serialNumber\", memberValue.serialNumber)));\r\n\t\t\tcase \"certStatus\":\r\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\r\n\t\t\tcase \"thisUpdate\":\r\n\t\t\tcase \"nextUpdate\":\r\n\t\t\t\treturn (memberValue === SingleResponse.defaultValues(memberName));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SingleResponse class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SingleResponse ::= SEQUENCE {\r\n\t *    certID                       CertID,\r\n\t *    certStatus                   CertStatus,\r\n\t *    thisUpdate                   GeneralizedTime,\r\n\t *    nextUpdate         [0]       EXPLICIT GeneralizedTime OPTIONAL,\r\n\t *    singleExtensions   [1]       EXPLICIT Extensions OPTIONAL }\r\n\t *\r\n\t * CertStatus ::= CHOICE {\r\n\t *    good        [0]     IMPLICIT NULL,\r\n\t *    revoked     [1]     IMPLICIT RevokedInfo,\r\n\t *    unknown     [2]     IMPLICIT UnknownInfo }\r\n\t *\r\n\t * RevokedInfo ::= SEQUENCE {\r\n\t *    revocationTime              GeneralizedTime,\r\n\t *    revocationReason    [0]     EXPLICIT CRLReason OPTIONAL }\r\n\t *\r\n\t * UnknownInfo ::= NULL\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [certID]\r\n\t\t * @property {string} [certStatus]\r\n\t\t * @property {string} [thisUpdate]\r\n\t\t * @property {string} [nextUpdate]\r\n\t\t * @property {string} [singleExtensions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tCertID.schema(names.certID || {}),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\t\t\tname: (names.certStatus || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tlenBlockLength: 1 // The length contains one byte 0x00\r\n\t\t\t\t\t\t}), // IMPLICIT NULL (no \"valueBlock\")\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.certStatus || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.GeneralizedTime(),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\toptional: true,\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: [new asn1js.Enumerated()]\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\t\t\tname: (names.certStatus || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tlenBlock: { length: 1 }\r\n\t\t\t\t\t\t}) // IMPLICIT NULL (no \"valueBlock\")\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.thisUpdate || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.GeneralizedTime({ name: (names.nextUpdate || \"\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [Extensions.schema(names.singleExtensions || {})]\r\n\t\t\t\t}) // EXPLICIT SEQUENCE value\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"certID\",\r\n\t\t\t\"certStatus\",\r\n\t\t\t\"thisUpdate\",\r\n\t\t\t\"nextUpdate\",\r\n\t\t\t\"singleExtensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSingleResponse.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcertID: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"certID\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tcertStatus: \"certStatus\",\r\n\t\t\t\t\tthisUpdate: \"thisUpdate\",\r\n\t\t\t\t\tnextUpdate: \"nextUpdate\",\r\n\t\t\t\t\tsingleExtensions: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName:\r\n\t\t\t\t\t\t\t\t\"singleExtensions\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SingleResponse\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.certID = new CertID({ schema: asn1.result.certID });\r\n\t\tthis.certStatus = asn1.result.certStatus;\r\n\t\tthis.thisUpdate = asn1.result.thisUpdate.toDate();\r\n\t\tif(\"nextUpdate\" in asn1.result)\r\n\t\t\tthis.nextUpdate = asn1.result.nextUpdate.toDate();\r\n\r\n\t\tif(\"singleExtensions\" in asn1.result)\r\n\t\t\tthis.singleExtensions = Array.from(asn1.result.singleExtensions.valueBlock.value, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create value array for output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(this.certID.toSchema());\r\n\t\toutputArray.push(this.certStatus);\r\n\t\toutputArray.push(new asn1js.GeneralizedTime({ valueDate: this.thisUpdate }));\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.GeneralizedTime({ valueDate: this.nextUpdate })]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif(\"singleExtensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.singleExtensions, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tcertID: this.certID.toJSON(),\r\n\t\t\tcertStatus: this.certStatus.toJSON(),\r\n\t\t\tthisUpdate: this.thisUpdate\r\n\t\t};\r\n\r\n\t\tif(\"nextUpdate\" in this)\r\n\t\t\t_object.nextUpdate = this.nextUpdate;\r\n\r\n\t\tif(\"singleExtensions\" in this)\r\n\t\t\t_object.singleExtensions = Array.from(this.singleExtensions, element => element.toJSON());\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"SingleResponse.js"}