{"version":3,"sources":["../src/ECPublicKey.js"],"names":["ECPublicKey","constructor","parameters","x","defaultValues","y","namedCurve","fromSchema","schema","fromJSON","json","memberName","ArrayBuffer","Error","compareWithDefault","memberValue","asn1js","RawData","view","Uint8Array","coordinateLength","byteLength","slice","toSchema","data","buffer","toJSON","crvName","crv","coodinateLength","toUpperCase","convertBuffer","convertBufferView","set"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, isEqualBuffer, toBase64, fromBase64, arrayBufferToString, stringToArrayBuffer } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5480\r\n */\r\nexport default class ECPublicKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ECCPublicKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc type\r\n\t\t */\r\n\t\tthis.x = getParametersValue(parameters, \"x\", ECPublicKey.defaultValues(\"x\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc values\r\n\t\t */\r\n\t\tthis.y = getParametersValue(parameters, \"y\", ECPublicKey.defaultValues(\"y\"));\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc namedCurve\r\n\t\t */\r\n\t\tthis.namedCurve = getParametersValue(parameters, \"namedCurve\", ECPublicKey.defaultValues(\"namedCurve\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"x\":\r\n\t\t\tcase \"y\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"x\":\r\n\t\t\tcase \"y\":\r\n\t\t\t\treturn (isEqualBuffer(memberValue, ECPublicKey.defaultValues(memberName)));\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\treturn new asn1js.RawData();\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert ArrayBuffer into current class\r\n\t * @param {!ArrayBuffer} schema Special case: schema is an ArrayBuffer\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tif((schema instanceof ArrayBuffer) === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n\r\n\t\tconst view = new Uint8Array(schema);\r\n\t\tif(view[0] !== 0x04)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tlet coordinateLength;\r\n\r\n\t\tswitch(this.namedCurve)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.3.1.7\": // P-256\r\n\t\t\t\tcoordinateLength = 32;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.34\": // P-384\r\n\t\t\t\tcoordinateLength = 48;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.35\": // P-521\r\n\t\t\t\tcoordinateLength = 66;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Incorrect curve OID: ${this.namedCurve}`);\r\n\t\t}\r\n\r\n\t\tif(schema.byteLength !== (coordinateLength * 2 + 1))\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n\t\t\r\n\t\tthis.x = schema.slice(1, coordinateLength + 1);\r\n\t\tthis.y = schema.slice(1 + coordinateLength, coordinateLength * 2 + 1);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\treturn new asn1js.RawData({ data: utilConcatBuf(\r\n\t\t\t(new Uint8Array([0x04])).buffer,\r\n\t\t\tthis.x,\r\n\t\t\tthis.y\r\n\t\t)\r\n\t\t});\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tlet crvName = \"\";\r\n\r\n\t\tswitch(this.namedCurve)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.3.1.7\": // P-256\r\n\t\t\t\tcrvName = \"P-256\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.34\": // P-384\r\n\t\t\t\tcrvName = \"P-384\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.35\": // P-521\r\n\t\t\t\tcrvName = \"P-521\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\tcrv: crvName,\r\n\t\t\tx: toBase64(arrayBufferToString(this.x), true, true, false),\r\n\t\t\ty: toBase64(arrayBufferToString(this.y), true, true, false)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tlet coodinateLength = 0;\r\n\r\n\t\tif(\"crv\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.crv.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"P-256\":\r\n\t\t\t\t\tthis.namedCurve = \"1.2.840.10045.3.1.7\";\r\n\t\t\t\t\tcoodinateLength = 32;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"P-384\":\r\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.34\";\r\n\t\t\t\t\tcoodinateLength = 48;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"P-521\":\r\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.35\";\r\n\t\t\t\t\tcoodinateLength = 66;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"crv\\\"\");\r\n\r\n\t\tif(\"x\" in json)\r\n\t\t{\r\n\t\t\tconst convertBuffer = stringToArrayBuffer(fromBase64(json.x, true));\r\n\t\t\t\r\n\t\t\tif(convertBuffer.byteLength < coodinateLength)\r\n\t\t\t{\r\n\t\t\t\tthis.x = new ArrayBuffer(coodinateLength);\r\n\t\t\t\tconst view = new Uint8Array(this.x);\r\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\r\n\t\t\t\tview.set(convertBufferView, 1);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tthis.x = convertBuffer.slice(0, coodinateLength);\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"x\\\"\");\r\n\r\n\t\tif(\"y\" in json)\r\n\t\t{\r\n\t\t\tconst convertBuffer = stringToArrayBuffer(fromBase64(json.y, true));\r\n\t\t\t\r\n\t\t\tif(convertBuffer.byteLength < coodinateLength)\r\n\t\t\t{\r\n\t\t\t\tthis.y = new ArrayBuffer(coodinateLength);\r\n\t\t\t\tconst view = new Uint8Array(this.y);\r\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\r\n\t\t\t\tview.set(convertBufferView, 1);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tthis.y = convertBuffer.slice(0, coodinateLength);\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"y\\\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"ECPublicKey.js"}