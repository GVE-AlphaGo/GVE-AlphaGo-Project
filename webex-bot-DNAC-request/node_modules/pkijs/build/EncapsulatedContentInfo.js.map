{"version":3,"sources":["../src/EncapsulatedContentInfo.js"],"names":["EncapsulatedContentInfo","constructor","parameters","eContentType","defaultValues","eContent","idBlock","tagClass","tagNumber","isConstructed","constrString","asn1js","OctetString","offset","length","valueBlock","valueHex","byteLength","pieceView","Uint8Array","_array","ArrayBuffer","_view","i","value","push","fromSchema","schema","memberName","Error","compareWithDefault","memberValue","isEqual","names","Sequence","name","blockName","ObjectIdentifier","Constructed","optional","Any","asn1","compareSchema","verified","result","toString","toSchema","outputArray","toJSON","_object"],"mappings":";;;;;;;AAAA;;AACA;;;;AACA;;AACA;;;AAGe,MAAMA,uBAAN,CACf;AACC;;AACA;;;;;AAKAC,EAAAA,WAAW,CAACC,UAAU,GAAG,EAAd,EACX;AACC;;AACA;;;;AAIA,SAAKC,YAAL,GAAoB,iCAAmBD,UAAnB,EAA+B,cAA/B,EAA+CF,uBAAuB,CAACI,aAAxB,CAAsC,cAAtC,CAA/C,CAApB;;AAEA,QAAG,cAAcF,UAAjB,EACA;AACC;;;;AAIA,WAAKG,QAAL,GAAgB,iCAAmBH,UAAnB,EAA+B,UAA/B,EAA2CF,uBAAuB,CAACI,aAAxB,CAAsC,UAAtC,CAA3C,CAAhB;;AACA,UAAI,KAAKC,QAAL,CAAcC,OAAd,CAAsBC,QAAtB,KAAmC,CAApC,IACD,KAAKF,QAAL,CAAcC,OAAd,CAAsBE,SAAtB,KAAoC,CADtC,EAEA;AACC;AACA,YAAG,KAAKH,QAAL,CAAcC,OAAd,CAAsBG,aAAtB,KAAwC,KAA3C,EACA;AACC,gBAAMC,YAAY,GAAG,IAAIC,MAAM,CAACC,WAAX,CAAuB;AAC3CN,YAAAA,OAAO,EAAE;AAAEG,cAAAA,aAAa,EAAE;AAAjB,aADkC;AAE3CA,YAAAA,aAAa,EAAE;AAF4B,WAAvB,CAArB;AAKA,cAAII,MAAM,GAAG,CAAb;AACA,cAAIC,MAAM,GAAG,KAAKT,QAAL,CAAcU,UAAd,CAAyBC,QAAzB,CAAkCC,UAA/C;;AAEA,iBAAMH,MAAM,GAAG,CAAf,EACA;AACC,kBAAMI,SAAS,GAAG,IAAIC,UAAJ,CAAe,KAAKd,QAAL,CAAcU,UAAd,CAAyBC,QAAxC,EAAkDH,MAAlD,EAA4DA,MAAM,GAAG,KAAV,GAAmB,KAAKR,QAAL,CAAcU,UAAd,CAAyBC,QAAzB,CAAkCC,UAAtD,GAAqE,KAAKZ,QAAL,CAAcU,UAAd,CAAyBC,QAAzB,CAAkCC,UAAlC,GAA+CJ,MAApH,GAA8H,KAAxL,CAAlB;;AACA,kBAAMO,MAAM,GAAG,IAAIC,WAAJ,CAAgBH,SAAS,CAACJ,MAA1B,CAAf;;AACA,kBAAMQ,KAAK,GAAG,IAAIH,UAAJ,CAAeC,MAAf,CAAd;;AAEA,iBAAI,IAAIG,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGD,KAAK,CAACR,MAAzB,EAAiCS,CAAC,EAAlC,EACCD,KAAK,CAACC,CAAD,CAAL,GAAWL,SAAS,CAACK,CAAD,CAApB;;AAEDb,YAAAA,YAAY,CAACK,UAAb,CAAwBS,KAAxB,CAA8BC,IAA9B,CAAmC,IAAId,MAAM,CAACC,WAAX,CAAuB;AAAEI,cAAAA,QAAQ,EAAEI;AAAZ,aAAvB,CAAnC;AAEAN,YAAAA,MAAM,IAAII,SAAS,CAACJ,MAApB;AACAD,YAAAA,MAAM,IAAIK,SAAS,CAACJ,MAApB;AACA;;AAED,eAAKT,QAAL,GAAgBK,YAAhB;AACA,SA5BF,CA6BC;;AACA;AACD,KAhDF,CAiDC;AAEA;;;AACA,QAAG,YAAYR,UAAf,EACC,KAAKwB,UAAL,CAAgBxB,UAAU,CAACyB,MAA3B,EArDF,CAsDC;AACA,GA/DF,CAgEC;;AACA;;;;;;AAIA,SAAOvB,aAAP,CAAqBwB,UAArB,EACA;AACC,YAAOA,UAAP;AAEC,WAAK,cAAL;AACC,eAAO,EAAP;;AACD,WAAK,UAAL;AACC,eAAO,IAAIjB,MAAM,CAACC,WAAX,EAAP;;AACD;AACC,cAAM,IAAIiB,KAAJ,CAAW,0DAAyDD,UAAW,EAA/E,CAAN;AAPF;AASA,GAhFF,CAiFC;;AACA;;;;;;;AAKA,SAAOE,kBAAP,CAA0BF,UAA1B,EAAsCG,WAAtC,EACA;AACC,YAAOH,UAAP;AAEC,WAAK,cAAL;AACC,eAAQG,WAAW,KAAK,EAAxB;;AACD,WAAK,UAAL;AACC;AACC,cAAIA,WAAW,CAACzB,OAAZ,CAAoBC,QAApB,KAAiC,CAAlC,IAAyCwB,WAAW,CAACzB,OAAZ,CAAoBE,SAApB,KAAkC,CAA9E,EACC,OAAQuB,WAAW,CAACC,OAAZ,CAAoBhC,uBAAuB,CAACI,aAAxB,CAAsC,UAAtC,CAApB,CAAR;AAED,iBAAO,KAAP;AACA;;AACF;AACC,cAAM,IAAIyB,KAAJ,CAAW,0DAAyDD,UAAW,EAA/E,CAAN;AAZF;AAcA,GAvGF,CAwGC;;AACA;;;;;;;;;;;;;;;AAaA,SAAOD,MAAP,CAAczB,UAAU,GAAG,EAA3B,EACA;AACC;;;;;;;AAOA,UAAM+B,KAAK,GAAG,iCAAmB/B,UAAnB,EAA+B,OAA/B,EAAwC,EAAxC,CAAd;AAEA,WAAQ,IAAIS,MAAM,CAACuB,QAAX,CAAoB;AAC3BC,MAAAA,IAAI,EAAGF,KAAK,CAACG,SAAN,IAAmB,EADC;AAE3BZ,MAAAA,KAAK,EAAE,CACN,IAAIb,MAAM,CAAC0B,gBAAX,CAA4B;AAAEF,QAAAA,IAAI,EAAGF,KAAK,CAAC9B,YAAN,IAAsB;AAA/B,OAA5B,CADM,EAEN,IAAIQ,MAAM,CAAC2B,WAAX,CAAuB;AACtBC,QAAAA,QAAQ,EAAE,IADY;AAEtBjC,QAAAA,OAAO,EAAE;AACRC,UAAAA,QAAQ,EAAE,CADF;AACK;AACbC,UAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,SAFa;AAMtBgB,QAAAA,KAAK,EAAE,CACN,IAAIb,MAAM,CAAC6B,GAAX,CAAe;AAAEL,UAAAA,IAAI,EAAGF,KAAK,CAAC5B,QAAN,IAAkB;AAA3B,SAAf,CADM,CAC2C;AAD3C;AANe,OAAvB,CAFM;AAFoB,KAApB,CAAR;AAgBA,GAjJF,CAkJC;;AACA;;;;;;AAIAqB,EAAAA,UAAU,CAACC,MAAD,EACV;AACC;AACA,6BAAWA,MAAX,EAAmB,CAClB,cADkB,EAElB,UAFkB,CAAnB,EAFD,CAMC;AAEA;;AACA,UAAMc,IAAI,GAAG9B,MAAM,CAAC+B,aAAP,CAAqBf,MAArB,EACZA,MADY,EAEZ3B,uBAAuB,CAAC2B,MAAxB,CAA+B;AAC9BM,MAAAA,KAAK,EAAE;AACN9B,QAAAA,YAAY,EAAE,cADR;AAENE,QAAAA,QAAQ,EAAE;AAFJ;AADuB,KAA/B,CAFY,CAAb;AAUA,QAAGoC,IAAI,CAACE,QAAL,KAAkB,KAArB,EACC,MAAM,IAAId,KAAJ,CAAU,iFAAV,CAAN,CApBF,CAqBC;AAEA;;AACA,SAAK1B,YAAL,GAAoBsC,IAAI,CAACG,MAAL,CAAYzC,YAAZ,CAAyBY,UAAzB,CAAoC8B,QAApC,EAApB;AACA,QAAG,cAAcJ,IAAI,CAACG,MAAtB,EACC,KAAKvC,QAAL,GAAgBoC,IAAI,CAACG,MAAL,CAAYvC,QAA5B,CA1BF,CA2BC;AACA,GApLF,CAqLC;;AACA;;;;;;AAIAyC,EAAAA,QAAQ,GACR;AACC;AACA,UAAMC,WAAW,GAAG,EAApB;AAEAA,IAAAA,WAAW,CAACtB,IAAZ,CAAiB,IAAId,MAAM,CAAC0B,gBAAX,CAA4B;AAAEb,MAAAA,KAAK,EAAE,KAAKrB;AAAd,KAA5B,CAAjB;;AACA,QAAG,cAAc,IAAjB,EACA;AACC,UAAGH,uBAAuB,CAAC8B,kBAAxB,CAA2C,UAA3C,EAAuD,KAAKzB,QAA5D,MAA0E,KAA7E,EACA;AACC0C,QAAAA,WAAW,CAACtB,IAAZ,CAAiB,IAAId,MAAM,CAAC2B,WAAX,CAAuB;AACvCC,UAAAA,QAAQ,EAAE,IAD6B;AAEvCjC,UAAAA,OAAO,EAAE;AACRC,YAAAA,QAAQ,EAAE,CADF;AACK;AACbC,YAAAA,SAAS,EAAE,CAFH,CAEK;;AAFL,WAF8B;AAMvCgB,UAAAA,KAAK,EAAE,CAAC,KAAKnB,QAAN;AANgC,SAAvB,CAAjB;AAQA;AACD,KAlBF,CAmBC;AAEA;;;AACA,WAAQ,IAAIM,MAAM,CAACuB,QAAX,CAAoB;AAC3BV,MAAAA,KAAK,EAAEuB;AADoB,KAApB,CAAR,CAtBD,CAyBC;AACA,GArNF,CAsNC;;AACA;;;;;;AAIAC,EAAAA,MAAM,GACN;AACC,UAAMC,OAAO,GAAG;AACf9C,MAAAA,YAAY,EAAE,KAAKA;AADJ,KAAhB;;AAIA,QAAG,cAAc,IAAjB,EACA;AACC,UAAGH,uBAAuB,CAAC8B,kBAAxB,CAA2C,UAA3C,EAAuD,KAAKzB,QAA5D,MAA0E,KAA7E,EACC4C,OAAO,CAAC5C,QAAR,GAAmB,KAAKA,QAAL,CAAc2C,MAAd,EAAnB;AACD;;AAED,WAAOC,OAAP;AACA,GAxOF,CAyOC;;;AAzOD,C,CA2OA","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EncapsulatedContentInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EncapsulatedContentInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc eContentType\r\n\t\t */\r\n\t\tthis.eContentType = getParametersValue(parameters, \"eContentType\", EncapsulatedContentInfo.defaultValues(\"eContentType\"));\r\n\r\n\t\tif(\"eContent\" in parameters)\r\n\t\t{\r\n\t\t\t/**\r\n\t\t\t * @type {OctetString}\r\n\t\t\t * @desc eContent\r\n\t\t\t */\r\n\t\t\tthis.eContent = getParametersValue(parameters, \"eContent\", EncapsulatedContentInfo.defaultValues(\"eContent\"));\r\n\t\t\tif((this.eContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t(this.eContent.idBlock.tagNumber === 4))\r\n\t\t\t{\r\n\t\t\t\t//region Divide OCTETSTRING value down to small pieces\r\n\t\t\t\tif(this.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst constrString = new asn1js.OctetString({\r\n\t\t\t\t\t\tidBlock: { isConstructed: true },\r\n\t\t\t\t\t\tisConstructed: true\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet offset = 0;\r\n\t\t\t\t\tlet length = this.eContent.valueBlock.valueHex.byteLength;\r\n\t\t\t\t\t\r\n\t\t\t\t\twhile(length > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst pieceView = new Uint8Array(this.eContent.valueBlock.valueHex, offset, ((offset + 65536) > this.eContent.valueBlock.valueHex.byteLength) ? (this.eContent.valueBlock.valueHex.byteLength - offset) : 65536);\r\n\t\t\t\t\t\tconst _array = new ArrayBuffer(pieceView.length);\r\n\t\t\t\t\t\tconst _view = new Uint8Array(_array);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor(let i = 0; i < _view.length; i++)\r\n\t\t\t\t\t\t\t_view[i] = pieceView[i];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconstrString.valueBlock.value.push(new asn1js.OctetString({ valueHex: _array }));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlength -= pieceView.length;\r\n\t\t\t\t\t\toffset += pieceView.length;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.eContent = constrString;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"eContentType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"eContent\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncapsulatedContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"eContentType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"eContent\":\r\n\t\t\t\t{\r\n\t\t\t\t\tif((memberValue.idBlock.tagClass === 1) && (memberValue.idBlock.tagNumber === 4))\r\n\t\t\t\t\t\treturn (memberValue.isEqual(EncapsulatedContentInfo.defaultValues(\"eContent\")));\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncapsulatedContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * EncapsulatedContentInfo ::= SEQUENCE {\r\n\t *    eContentType ContentType,\r\n\t *    eContent [0] EXPLICIT OCTET STRING OPTIONAL } * Changed it to ANY, as in PKCS#7\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [type]\r\n\t\t * @property {string} [setName]\r\n\t\t * @property {string} [values]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.eContentType || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Any({ name: (names.eContent || \"\") }) // In order to aling this with PKCS#7 and CMS as well\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"eContentType\",\r\n\t\t\t\"eContent\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEncapsulatedContentInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\teContentType: \"eContentType\",\r\n\t\t\t\t\teContent: \"eContent\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EncapsulatedContentInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.eContentType = asn1.result.eContentType.valueBlock.toString();\r\n\t\tif(\"eContent\" in asn1.result)\r\n\t\t\tthis.eContent = asn1.result.eContent;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.eContentType }));\r\n\t\tif(\"eContent\" in this)\r\n\t\t{\r\n\t\t\tif(EncapsulatedContentInfo.compareWithDefault(\"eContent\", this.eContent) === false)\r\n\t\t\t{\r\n\t\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.eContent]\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\teContentType: this.eContentType\r\n\t\t};\r\n\r\n\t\tif(\"eContent\" in this)\r\n\t\t{\r\n\t\t\tif(EncapsulatedContentInfo.compareWithDefault(\"eContent\", this.eContent) === false)\r\n\t\t\t\t_object.eContent = this.eContent.toJSON();\r\n\t\t}\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"EncapsulatedContentInfo.js"}