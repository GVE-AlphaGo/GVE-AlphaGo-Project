{"version":3,"sources":["../src/ECPrivateKey.js"],"names":["ECPrivateKey","constructor","parameters","version","defaultValues","privateKey","namedCurve","publicKey","fromSchema","schema","fromJSON","json","memberName","asn1js","OctetString","ECPublicKey","Error","compareWithDefault","memberValue","isEqual","x","y","names","Sequence","name","blockName","value","Integer","Constructed","optional","idBlock","tagClass","tagNumber","ObjectIdentifier","BitString","asn1","compareSchema","verified","result","valueBlock","valueDec","toString","publicKeyData","valueHex","toSchema","outputArray","push","toBER","toJSON","crvName","privateKeyJSON","crv","d","publicKeyJSON","coodinateLength","toUpperCase","convertBuffer","byteLength","buffer","ArrayBuffer","view","Uint8Array","convertBufferView","set","slice"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, clearProps } from \"pvutils\";\r\nimport ECPublicKey from \"./ECPublicKey.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5915\r\n */\r\nexport default class ECPrivateKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ECPrivateKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", ECPrivateKey.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc privateKey\r\n\t\t */\r\n\t\tthis.privateKey = getParametersValue(parameters, \"privateKey\", ECPrivateKey.defaultValues(\"privateKey\"));\r\n\r\n\t\tif(\"namedCurve\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {string}\r\n\t\t\t * @desc namedCurve\r\n\t\t\t */\r\n\t\t\tthis.namedCurve = getParametersValue(parameters, \"namedCurve\", ECPrivateKey.defaultValues(\"namedCurve\"));\r\n\r\n\t\tif(\"publicKey\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ECPublicKey}\r\n\t\t\t * @desc publicKey\r\n\t\t\t */\r\n\t\t\tthis.publicKey = getParametersValue(parameters, \"publicKey\", ECPrivateKey.defaultValues(\"publicKey\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 1;\r\n\t\t\tcase \"privateKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"publicKey\":\r\n\t\t\t\treturn new ECPublicKey();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPrivateKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === ECPrivateKey.defaultValues(memberName));\r\n\t\t\tcase \"privateKey\":\r\n\t\t\t\treturn (memberValue.isEqual(ECPrivateKey.defaultValues(memberName)));\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"publicKey\":\r\n\t\t\t\treturn ((ECPublicKey.compareWithDefault(\"namedCurve\", memberValue.namedCurve)) &&\r\n\t\t\t\t\t\t(ECPublicKey.compareWithDefault(\"x\", memberValue.x)) &&\r\n\t\t\t\t\t\t(ECPublicKey.compareWithDefault(\"y\", memberValue.y)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPrivateKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * ECPrivateKey ::= SEQUENCE {\r\n\t * version        INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),\r\n\t * privateKey     OCTET STRING,\r\n\t * parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,\r\n\t * publicKey  [1] BIT STRING OPTIONAL\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [privateKey]\r\n\t\t * @property {string} [namedCurve]\r\n\t\t * @property {string} [publicKey]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.privateKey || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.namedCurve || \"\") })\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.BitString({ name: (names.publicKey || \"\") })\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"privateKey\",\r\n\t\t\t\"namedCurve\",\r\n\t\t\t\"publicKey\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tECPrivateKey.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tprivateKey: \"privateKey\",\r\n\t\t\t\t\tnamedCurve: \"namedCurve\",\r\n\t\t\t\t\tpublicKey: \"publicKey\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPrivateKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.privateKey = asn1.result.privateKey;\r\n\r\n\t\tif(\"namedCurve\" in asn1.result)\r\n\t\t\tthis.namedCurve = asn1.result.namedCurve.valueBlock.toString();\r\n\r\n\t\tif(\"publicKey\" in asn1.result)\r\n\t\t{\r\n\t\t\tconst publicKeyData = { schema: asn1.result.publicKey.valueBlock.valueHex };\r\n\t\t\tif(\"namedCurve\" in this)\r\n\t\t\t\tpublicKeyData.namedCurve = this.namedCurve;\r\n\r\n\t\t\tthis.publicKey = new ECPublicKey(publicKeyData);\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.privateKey\r\n\t\t];\r\n\r\n\t\tif(\"namedCurve\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.namedCurve })\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif(\"publicKey\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.BitString({ valueHex: this.publicKey.toSchema().toBER(false) })\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\treturn new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t});\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tif(((\"namedCurve\" in this) === false) || (ECPrivateKey.compareWithDefault(\"namedCurve\", this.namedCurve)))\r\n\t\t\tthrow new Error(\"Not enough information for making JSON: absent \\\"namedCurve\\\" value\");\r\n\r\n\t\tlet crvName = \"\";\r\n\r\n\t\tswitch(this.namedCurve)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.3.1.7\": // P-256\r\n\t\t\t\tcrvName = \"P-256\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.34\": // P-384\r\n\t\t\t\tcrvName = \"P-384\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.3.132.0.35\": // P-521\r\n\t\t\t\tcrvName = \"P-521\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\tconst privateKeyJSON = {\r\n\t\t\tcrv: crvName,\r\n\t\t\td: toBase64(arrayBufferToString(this.privateKey.valueBlock.valueHex), true, true, false)\r\n\t\t};\r\n\r\n\t\tif(\"publicKey\" in this)\r\n\t\t{\r\n\t\t\tconst publicKeyJSON = this.publicKey.toJSON();\r\n\r\n\t\t\tprivateKeyJSON.x = publicKeyJSON.x;\r\n\t\t\tprivateKeyJSON.y = publicKeyJSON.y;\r\n\t\t}\r\n\r\n\t\treturn privateKeyJSON;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tlet coodinateLength = 0;\r\n\r\n\t\tif(\"crv\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.crv.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"P-256\":\r\n\t\t\t\t\tthis.namedCurve = \"1.2.840.10045.3.1.7\";\r\n\t\t\t\t\tcoodinateLength = 32;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"P-384\":\r\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.34\";\r\n\t\t\t\t\tcoodinateLength = 48;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"P-521\":\r\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.35\";\r\n\t\t\t\t\tcoodinateLength = 66;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"crv\\\"\");\r\n\r\n\t\tif(\"d\" in json)\r\n\t\t{\r\n\t\t\tconst convertBuffer = stringToArrayBuffer(fromBase64(json.d, true));\r\n\t\t\t\r\n\t\t\tif(convertBuffer.byteLength < coodinateLength)\r\n\t\t\t{\r\n\t\t\t\tconst buffer = new ArrayBuffer(coodinateLength);\r\n\t\t\t\tconst view = new Uint8Array(buffer);\r\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\r\n\t\t\t\tview.set(convertBufferView, 1);\r\n\t\t\t\t\r\n\t\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: buffer });\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: convertBuffer.slice(0, coodinateLength) });\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"d\\\"\");\r\n\r\n\t\tif((\"x\" in json) && (\"y\" in json))\r\n\t\t\tthis.publicKey = new ECPublicKey({ json });\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"ECPrivateKey.js"}