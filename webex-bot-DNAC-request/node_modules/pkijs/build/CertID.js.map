{"version":3,"sources":["../src/CertID.js"],"names":["CertID","constructor","parameters","hashAlgorithm","defaultValues","issuerNameHash","issuerKeyHash","serialNumber","fromSchema","schema","memberName","AlgorithmIdentifier","asn1js","OctetString","Integer","Error","compareWithDefault","memberValue","algorithmId","isEqual","names","Sequence","name","blockName","value","hashAlgorithmObject","asn1","compareSchema","verified","result","toSchema","toJSON","certificateID","valueBlock","valueHex","createForCertificate","certificate","sequence","Promise","resolve","issuerCertificate","crypto","reject","hashOID","algorithmParams","Null","then","digest","subject","toBER","error","issuerKeyBuffer","subjectPublicKeyInfo","subjectPublicKey"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { getCrypto, getOIDByAlgorithm } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC6960\r\n */\r\nexport default class CertID \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertID class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc hashAlgorithm\r\n\t\t */\r\n\t\tthis.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", CertID.defaultValues(\"hashAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc issuerNameHash\r\n\t\t */\r\n\t\tthis.issuerNameHash = getParametersValue(parameters, \"issuerNameHash\", CertID.defaultValues(\"issuerNameHash\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc issuerKeyHash\r\n\t\t */\r\n\t\tthis.issuerKeyHash = getParametersValue(parameters, \"issuerKeyHash\", CertID.defaultValues(\"issuerKeyHash\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc serialNumber\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", CertID.defaultValues(\"serialNumber\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"issuerNameHash\":\r\n\t\t\tcase \"issuerKeyHash\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertID class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"issuerNameHash\":\r\n\t\t\tcase \"issuerKeyHash\":\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn (memberValue.isEqual(CertID.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertID class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * CertID          ::=     SEQUENCE {\r\n\t *    hashAlgorithm       AlgorithmIdentifier,\r\n\t *    issuerNameHash      OCTET STRING, -- Hash of issuer's DN\r\n\t *    issuerKeyHash       OCTET STRING, -- Hash of issuer's public key\r\n\t *    serialNumber        CertificateSerialNumber }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [hashAlgorithm]\r\n\t\t * @property {string} [hashAlgorithmObject]\r\n\t\t * @property {string} [issuerNameHash]\r\n\t\t * @property {string} [issuerKeyHash]\r\n\t\t * @property {string} [serialNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.hashAlgorithmObject || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: (names.hashAlgorithm || \"\")\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.issuerNameHash || \"\") }),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.issuerKeyHash || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.serialNumber || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"hashAlgorithm\",\r\n\t\t\t\"issuerNameHash\",\r\n\t\t\t\"issuerKeyHash\",\r\n\t\t\t\"serialNumber\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertID.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\thashAlgorithm: \"hashAlgorithm\",\r\n\t\t\t\t\tissuerNameHash: \"issuerNameHash\",\r\n\t\t\t\t\tissuerKeyHash: \"issuerKeyHash\",\r\n\t\t\t\t\tserialNumber: \"serialNumber\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertID\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\r\n\t\tthis.issuerNameHash = asn1.result.issuerNameHash;\r\n\t\tthis.issuerKeyHash = asn1.result.issuerKeyHash;\r\n\t\tthis.serialNumber = asn1.result.serialNumber;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.hashAlgorithm.toSchema(),\r\n\t\t\t\tthis.issuerNameHash,\r\n\t\t\t\tthis.issuerKeyHash,\r\n\t\t\t\tthis.serialNumber\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\thashAlgorithm: this.hashAlgorithm.toJSON(),\r\n\t\t\tissuerNameHash: this.issuerNameHash.toJSON(),\r\n\t\t\tissuerKeyHash: this.issuerKeyHash.toJSON(),\r\n\t\t\tserialNumber: this.serialNumber.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Check that two \"CertIDs\" are equal\r\n\t * @param {CertID} certificateID Identifier of the certificate to be checked\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(certificateID)\r\n\t{\r\n\t\t//region Check \"hashAlgorithm\"\r\n\t\tif(!this.hashAlgorithm.algorithmId === certificateID.hashAlgorithm.algorithmId)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check \"issuerNameHash\"\r\n\t\tif(isEqualBuffer(this.issuerNameHash.valueBlock.valueHex, certificateID.issuerNameHash.valueBlock.valueHex) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check \"issuerKeyHash\"\r\n\t\tif(isEqualBuffer(this.issuerKeyHash.valueBlock.valueHex, certificateID.issuerKeyHash.valueBlock.valueHex) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check \"serialNumber\"\r\n\t\tif(!this.serialNumber.isEqual(certificateID.serialNumber))\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Making OCSP certificate identifier for specific certificate\r\n\t * @param {Certificate} certificate Certificate making OCSP Request for\r\n\t * @param {Object} parameters Additional parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tcreateForCertificate(certificate, parameters)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet issuerCertificate;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check input parameters\r\n\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Parameter \\\"hashAlgorithm\\\" is mandatory for \\\"OCSP_REQUEST.createForCertificate\\\"\");\r\n\t\t\r\n\t\tconst hashOID = getOIDByAlgorithm({ name: parameters.hashAlgorithm });\r\n\t\tif(hashOID === \"\")\r\n\t\t\treturn Promise.reject(`Incorrect \"hashAlgorithm\": ${this.hashAlgorithm}`);\r\n\t\t\r\n\t\tthis.hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\talgorithmId: hashOID,\r\n\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t});\r\n\t\t\r\n\t\tif(\"issuerCertificate\" in parameters)\r\n\t\t\tissuerCertificate = parameters.issuerCertificate;\r\n\t\telse\r\n\t\t\treturn Promise.reject(\"Parameter \\\"issuerCertificate\\\" is mandatory for \\\"OCSP_REQUEST.createForCertificate\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initialize \"serialNumber\" field\r\n\t\tthis.serialNumber = certificate.serialNumber;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create \"issuerNameHash\"\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tcrypto.digest({ name: parameters.hashAlgorithm }, issuerCertificate.subject.toSchema().toBER(false)),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create \"issuerKeyHash\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.issuerNameHash = new asn1js.OctetString({ valueHex: result });\r\n\t\t\t\r\n\t\t\tconst issuerKeyBuffer = issuerCertificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex;\r\n\t\t\t\r\n\t\t\treturn crypto.digest({ name: parameters.hashAlgorithm }, issuerKeyBuffer);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t).then(result =>\r\n\t\t{\r\n\t\t\tthis.issuerKeyHash = new asn1js.OctetString({ valueHex: result });\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"CertID.js"}