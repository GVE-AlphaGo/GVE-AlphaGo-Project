{"version":3,"sources":["../src/OriginatorInfo.js"],"names":["OriginatorInfo","constructor","parameters","certs","defaultValues","crls","fromSchema","schema","memberName","CertificateSet","RevocationInfoChoices","Error","compareWithDefault","memberValue","certificates","length","otherRevocationInfos","names","asn1js","Sequence","name","blockName","value","Constructed","optional","idBlock","tagClass","tagNumber","valueBlock","asn1","compareSchema","verified","result","Set","toSchema","sequenceValue","push","toJSON","object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport CertificateSet from \"./CertificateSet.js\";\r\nimport RevocationInfoChoices from \"./RevocationInfoChoices.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class OriginatorInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OriginatorInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"certs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {CertificateSet}\r\n\t\t\t * @desc certs\r\n\t\t\t */\r\n\t\t\tthis.certs = getParametersValue(parameters, \"certs\", OriginatorInfo.defaultValues(\"certs\"));\r\n\r\n\t\tif(\"crls\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {RevocationInfoChoices}\r\n\t\t\t * @desc crls\r\n\t\t\t */\r\n\t\t\tthis.crls = getParametersValue(parameters, \"crls\", OriginatorInfo.defaultValues(\"crls\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn new CertificateSet();\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn new RevocationInfoChoices();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OriginatorInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certs\":\r\n\t\t\t\treturn (memberValue.certificates.length === 0);\r\n\t\t\tcase \"crls\":\r\n\t\t\t\treturn ((memberValue.crls.length === 0) && (memberValue.otherRevocationInfos.length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OriginatorInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OriginatorInfo ::= SEQUENCE {\r\n\t *    certs [0] IMPLICIT CertificateSet OPTIONAL,\r\n\t *    crls [1] IMPLICIT RevocationInfoChoices OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [certs]\r\n\t\t * @property {string} [crls]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.certs || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: CertificateSet.schema().valueBlock.value\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.crls || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: RevocationInfoChoices.schema().valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"certs\",\r\n\t\t\t\"crls\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOriginatorInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcerts: \"certs\",\r\n\t\t\t\t\tcrls: \"crls\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OriginatorInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"certs\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.certs = new CertificateSet({\r\n\t\t\t\tschema: new asn1js.Set({\r\n\t\t\t\t\tvalue: asn1.result.certs.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif(\"crls\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.crls = new RevocationInfoChoices({\r\n\t\t\t\tschema: new asn1js.Set({\r\n\t\t\t\t\tvalue: asn1.result.crls.valueBlock.value\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst sequenceValue = [];\r\n\r\n\t\tif(\"certs\" in this)\r\n\t\t{\r\n\t\t\tsequenceValue.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.certs.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif(\"crls\" in this)\r\n\t\t{\r\n\t\t\tsequenceValue.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: this.crls.toSchema().valueBlock.value\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: sequenceValue\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\r\n\t\tif(\"certs\" in this)\r\n\t\t\tobject.certs = this.certs.toJSON();\r\n\r\n\t\tif(\"crls\" in this)\r\n\t\t\tobject.crls = this.crls.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"OriginatorInfo.js"}