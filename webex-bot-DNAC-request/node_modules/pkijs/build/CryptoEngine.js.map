{"version":3,"sources":["../src/CryptoEngine.js"],"names":["makePKCS12B2Key","cryptoEngine","hashAlgorithm","keyLength","password","salt","iterationCount","u","v","result","toUpperCase","Error","passwordViewInitial","Uint8Array","passwordTransformed","ArrayBuffer","byteLength","passwordTransformedView","i","length","slice","D","dView","saltLength","sLen","Math","ceil","S","sView","saltView","passwordLength","pLen","P","pView","passwordView","sPlusPLength","I","iView","set","c","internalSequence","Promise","resolve","then","_I","dAndI","dAndIView","j","roundBuffer","digest","name","B","bView","k","iRound","sliceStart","sliceLength","chunk","Array","from","x","l","push","resultBuffer","resultView","CryptoEngine","constructor","parameters","crypto","subtle","importKey","format","keyData","algorithm","extractable","keyUsages","jwk","buffer","toLowerCase","asn1","asn1js","fromBER","offset","reject","publicKeyInfo","PublicKeyInfo","fromSchema","ex","hash","alg","kty","ext","key_ops","algorithmId","publicKeyJSON","toJSON","Object","keys","key","privateKeyInfo","PrivateKeyInfo","privateKeyAlgorithm","privateKeyJSON","JSON","stringify","exportKey","sequence","parse","fromJSON","toSchema","toBER","convert","inputFormat","outputFormat","encrypt","args","decrypt","sign","verify","generateKey","deriveKey","deriveBits","wrapKey","unwrapKey","getRandomValues","view","getAlgorithmByOID","oid","kdf","getOIDByAlgorithm","getAlgorithmParameters","algorithmName","operation","usages","modulusLength","publicExponent","namedCurve","public","counter","iv","info","iterations","getHashAlgorithm","signatureAlgorithm","params","RSASSAPSSParams","schema","algorithmParams","encryptEncryptedContentInfo","contentEncryptionOID","contentEncryptionAlgorithm","pbkdf2OID","hmacOID","hmacHashAlgorithm","ivBuffer","ivView","saltBuffer","contentView","contentToEncrypt","pbkdf2Params","PBKDF2Params","OctetString","valueHex","prf","AlgorithmIdentifier","Null","error","pbes2Parameters","PBES2Params","keyDerivationFunc","encryptionScheme","EncryptedContentInfo","contentType","encryptedContent","decryptEncryptedContentInfo","encryptedContentInfo","valueBlock","dataBuffer","idBlock","isConstructed","value","content","stampDataWithPassword","hmacAlgorithm","contentToStamp","verifyDataStampedWithPassword","signatureToVerify","contentToVerify","getSignatureParameters","privateKey","paramsObject","hashAlgorithmOID","maskGenAlgorithm","pssParameters","signWithPrivateKey","data","fillPublicKeyParameters","shaAlgorithm","algorithmObject","algorithmParamsChecked","tagClass","tagNumber","curveObject","toString","getPublicKey","publicKeyInfoSchema","publicKeyInfoBuffer","publicKeyInfoView","verifyWithPublicKey","signature","publicKey","signatureValue","hashAlgo"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, stringToArrayBuffer, arrayBufferToString, utilConcatBuf } from \"pvutils\";\r\nimport { createCMSECDSASignature, createECDSASignatureFromCMS } from \"./common.js\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\r\nimport PrivateKeyInfo from \"./PrivateKeyInfo.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport RSASSAPSSParams from \"./RSASSAPSSParams.js\";\r\nimport PBKDF2Params from \"./PBKDF2Params.js\";\r\nimport PBES2Params from \"./PBES2Params.js\";\r\n//**************************************************************************************\r\n/**\r\n * Making MAC key using algorithm described in B.2 of PKCS#12 standard.\r\n */\r\nfunction makePKCS12B2Key(cryptoEngine, hashAlgorithm, keyLength, password, salt, iterationCount)\r\n{\r\n\t//region Initial variables\r\n\tlet u;\r\n\tlet v;\r\n\t\r\n\tconst result = [];\r\n\t//endregion\r\n\t\r\n\t//region Get \"u\" and \"v\" values\r\n\tswitch(hashAlgorithm.toUpperCase())\r\n\t{\r\n\t\tcase \"SHA-1\":\r\n\t\t\tu = 20; // 160\r\n\t\t\tv = 64; // 512\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-256\":\r\n\t\t\tu = 32; // 256\r\n\t\t\tv = 64; // 512\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-384\":\r\n\t\t\tu = 48; // 384\r\n\t\t\tv = 128; // 1024\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-512\":\r\n\t\t\tu = 64; // 512\r\n\t\t\tv = 128; // 1024\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(\"Unsupported hashing algorithm\");\r\n\t}\r\n\t//endregion\r\n\t\r\n\t//region Main algorithm making key\r\n\t//region Transform password to UTF-8 like string\r\n\tconst passwordViewInitial = new Uint8Array(password);\r\n\t\r\n\tconst passwordTransformed = new ArrayBuffer((password.byteLength * 2) + 2);\r\n\tconst passwordTransformedView = new Uint8Array(passwordTransformed);\r\n\t\r\n\tfor(let i = 0; i < passwordViewInitial.length; i++)\r\n\t{\r\n\t\tpasswordTransformedView[i * 2] = 0x00;\r\n\t\tpasswordTransformedView[i * 2 + 1] = passwordViewInitial[i];\r\n\t}\r\n\t\r\n\tpasswordTransformedView[passwordTransformedView.length - 2] = 0x00;\r\n\tpasswordTransformedView[passwordTransformedView.length - 1] = 0x00;\r\n\t\r\n\tpassword = passwordTransformed.slice(0);\r\n\t//endregion\r\n\t\r\n\t//region Construct a string D (the \"diversifier\") by concatenating v/8 copies of ID\r\n\tconst D = new ArrayBuffer(v);\r\n\tconst dView = new Uint8Array(D);\r\n\t\r\n\tfor(let i = 0; i < D.byteLength; i++)\r\n\t\tdView[i] = 3; // The ID value equal to \"3\" for MACing (see B.3 of standard)\r\n\t//endregion\r\n\t\r\n\t//region Concatenate copies of the salt together to create a string S of length v * ceil(s / v) bytes (the final copy of the salt may be trunacted to create S)\r\n\tconst saltLength = salt.byteLength;\r\n\t\r\n\tconst sLen = v * Math.ceil(saltLength / v);\r\n\tconst S = new ArrayBuffer(sLen);\r\n\tconst sView = new Uint8Array(S);\r\n\t\r\n\tconst saltView = new Uint8Array(salt);\r\n\t\r\n\tfor(let i = 0; i < sLen; i++)\r\n\t\tsView[i] = saltView[i % saltLength];\r\n\t//endregion\r\n\t\r\n\t//region Concatenate copies of the password together to create a string P of length v * ceil(p / v) bytes (the final copy of the password may be truncated to create P)\r\n\tconst passwordLength = password.byteLength;\r\n\t\r\n\tconst pLen = v * Math.ceil(passwordLength / v);\r\n\tconst P = new ArrayBuffer(pLen);\r\n\tconst pView = new Uint8Array(P);\r\n\t\r\n\tconst passwordView = new Uint8Array(password);\r\n\t\r\n\tfor(let i = 0; i < pLen; i++)\r\n\t\tpView[i] = passwordView[i % passwordLength];\r\n\t//endregion\r\n\t\r\n\t//region Set I=S||P to be the concatenation of S and P\r\n\tconst sPlusPLength = S.byteLength + P.byteLength;\r\n\t\r\n\tlet I = new ArrayBuffer(sPlusPLength);\r\n\tlet iView = new Uint8Array(I);\r\n\t\r\n\tiView.set(sView);\r\n\tiView.set(pView, sView.length);\r\n\t//endregion\r\n\t\r\n\t//region Set c=ceil(n / u)\r\n\tconst c = Math.ceil((keyLength >> 3) / u);\r\n\t//endregion\r\n\t\r\n\t//region Initial variables\r\n\tlet internalSequence = Promise.resolve(I);\r\n\t//endregion\r\n\t\r\n\t//region For i=1, 2, ..., c, do the following:\r\n\tfor(let i = 0; i <= c; i++)\r\n\t{\r\n\t\tinternalSequence = internalSequence.then(_I =>\r\n\t\t{\r\n\t\t\t//region Create contecanetion of D and I\r\n\t\t\tconst dAndI = new ArrayBuffer(D.byteLength + _I.byteLength);\r\n\t\t\tconst dAndIView = new Uint8Array(dAndI);\r\n\t\t\t\r\n\t\t\tdAndIView.set(dView);\r\n\t\t\tdAndIView.set(iView, dView.length);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn dAndI;\r\n\t\t});\r\n\t\t\r\n\t\t//region Make \"iterationCount\" rounds of hashing\r\n\t\tfor(let j = 0; j < iterationCount; j++)\r\n\t\t\tinternalSequence = internalSequence.then(roundBuffer => cryptoEngine.digest({ name: hashAlgorithm }, new Uint8Array(roundBuffer)));\r\n\t\t//endregion\r\n\t\t\r\n\t\tinternalSequence = internalSequence.then(roundBuffer =>\r\n\t\t{\r\n\t\t\t//region Concatenate copies of Ai to create a string B of length v bits (the final copy of Ai may be truncated to create B)\r\n\t\t\tconst B = new ArrayBuffer(v);\r\n\t\t\tconst bView = new Uint8Array(B);\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < B.byteLength; j++)\r\n\t\t\t\tbView[j] = roundBuffer[j % roundBuffer.length];\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Make new I value\r\n\t\t\tconst k = Math.ceil(saltLength / v) + Math.ceil(passwordLength / v);\r\n\t\t\tconst iRound = [];\r\n\t\t\t\r\n\t\t\tlet sliceStart = 0;\r\n\t\t\tlet sliceLength = v;\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < k; j++)\r\n\t\t\t{\r\n\t\t\t\tconst chunk = Array.from(new Uint8Array(I.slice(sliceStart, sliceStart + sliceLength)));\r\n\t\t\t\tsliceStart += v;\r\n\t\t\t\tif((sliceStart + v) > I.byteLength)\r\n\t\t\t\t\tsliceLength = I.byteLength - sliceStart;\r\n\t\t\t\t\r\n\t\t\t\tlet x = 0x1ff;\r\n\t\t\t\t\r\n\t\t\t\tfor(let l = (B.byteLength - 1); l >= 0; l--)\r\n\t\t\t\t{\r\n\t\t\t\t\tx >>= 8;\r\n\t\t\t\t\tx += bView[l] + chunk[l];\r\n\t\t\t\t\tchunk[l] = (x & 0xff);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tiRound.push(...chunk);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tI = new ArrayBuffer(iRound.length);\r\n\t\t\tiView = new Uint8Array(I);\r\n\t\t\t\r\n\t\t\tiView.set(iRound);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tresult.push(...(new Uint8Array(roundBuffer)));\r\n\t\t\t\r\n\t\t\treturn I;\r\n\t\t});\r\n\t}\r\n\t//endregion\r\n\t\r\n\t//region Initialize final key\r\n\tinternalSequence = internalSequence.then(() =>\r\n\t{\r\n\t\tconst resultBuffer = new ArrayBuffer(keyLength >> 3);\r\n\t\tconst resultView = new Uint8Array(resultBuffer);\r\n\t\t\r\n\t\tresultView.set((new Uint8Array(result)).slice(0, keyLength >> 3));\r\n\t\t\r\n\t\treturn resultBuffer;\r\n\t});\r\n\t//endregion\r\n\t//endregion\r\n\t\r\n\treturn internalSequence;\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Default cryptographic engine for Web Cryptography API\r\n */\r\nexport default class CryptoEngine\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CryptoEngine class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc Usually here we are expecting \"window.crypto\" or an equivalent from custom \"crypto engine\"\r\n\t\t */\r\n\t\tthis.crypto = getParametersValue(parameters, \"crypto\", {});\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc Usually here we are expecting \"window.crypto.subtle\" or an equivalent from custom \"crypto engine\"\r\n\t\t */\r\n\t\tthis.subtle = getParametersValue(parameters, \"subtle\", {});\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc Name of the \"crypto engine\"\r\n\t\t */\r\n\t\tthis.name = getParametersValue(parameters, \"name\", \"\");\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Import WebCrypto keys from different formats\r\n\t * @param {string} format\r\n\t * @param {ArrayBuffer|Uint8Array} keyData\r\n\t * @param {Object} algorithm\r\n\t * @param {boolean} extractable\r\n\t * @param {Array} keyUsages\r\n\t * @returns {Promise}\r\n\t */\r\n\timportKey(format, keyData, algorithm, extractable, keyUsages)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet jwk = {};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Change \"keyData\" type if needed\r\n\t\tif(keyData instanceof Uint8Array)\r\n\t\t\tkeyData = keyData.buffer;\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(format.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\treturn this.subtle.importKey(\"raw\", keyData, algorithm, extractable, keyUsages);\r\n\t\t\tcase \"spki\":\r\n\t\t\t\t{\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(keyData);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\r\n\t\t\t\t\tconst publicKeyInfo = new PublicKeyInfo();\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublicKeyInfo.fromSchema(asn1.result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\t\t\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS256\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS384\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS512\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeyUsages = [\"verify\"]; // Override existing keyUsages value since the key is a public key\r\n\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\r\n\t\t\t\t\t\t\t\tif(publicKeyInfo.algorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif((\"alg\" in jwk) === false)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS1\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create RSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"ECDSA\":\r\n\t\t\t\t\t\t\tkeyUsages = [\"verify\"]; // Override existing keyUsages value since the key is a public key\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"ECDH\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\t\tjwk = {\r\n\t\t\t\t\t\t\t\t\tkty: \"EC\",\r\n\t\t\t\t\t\t\t\t\text: extractable,\r\n\t\t\t\t\t\t\t\t\tkey_ops: keyUsages\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about algorithm\r\n\t\t\t\t\t\t\t\tif(publicKeyInfo.algorithm.algorithmId !== \"1.2.840.10045.2.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm name: ${algorithm.name.toUpperCase()}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyInfo = new PrivateKeyInfo();\r\n\r\n\t\t\t\t\t//region Parse \"PrivateKeyInfo\" object\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(keyData);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprivateKeyInfo.fromSchema(asn1.result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((\"parsedKey\" in privateKeyInfo) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\t\t\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS256\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS384\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS512\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeyUsages = [\"sign\"]; // Override existing keyUsages value since the key is a private key\r\n\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect private key algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif((\"alg\" in jwk) === false)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS1\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create RSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"ECDSA\":\r\n\t\t\t\t\t\t\tkeyUsages = [\"sign\"]; // Override existing keyUsages value since the key is a private key\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"ECDH\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\t\tjwk = {\r\n\t\t\t\t\t\t\t\t\tkty: \"EC\",\r\n\t\t\t\t\t\t\t\t\text: extractable,\r\n\t\t\t\t\t\t\t\t\tkey_ops: keyUsages\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.10045.2.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Create RSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm name: ${algorithm.name.toUpperCase()}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tjwk = keyData;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect format: ${format}`);\r\n\t\t}\r\n\t\t\r\n\t\t//region Special case for Safari browser (since its acting not as WebCrypto standard describes)\r\n\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t{\r\n\t\t\t// Try to use both ways - import using ArrayBuffer and pure JWK (for Safari Technology Preview)\r\n\t\t\treturn Promise.resolve().then(() => this.subtle.importKey(\"jwk\", stringToArrayBuffer(JSON.stringify(jwk)), algorithm, extractable, keyUsages))\r\n\t\t\t\t.then(result => result, () => this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Export WebCrypto keys to different formats\r\n\t * @param {string} format\r\n\t * @param {Object} key\r\n\t * @returns {Promise}\r\n\t */\r\n\texportKey(format, key)\r\n\t{\r\n\t\tlet sequence = this.subtle.exportKey(\"jwk\", key);\r\n\t\t\r\n\t\t//region Currently Safari returns ArrayBuffer as JWK thus we need an additional transformation\r\n\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t{\r\n\t\t\tsequence = sequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t// Some additional checks for Safari Technology Preview\r\n\t\t\t\tif(result instanceof ArrayBuffer)\r\n\t\t\t\t\treturn JSON.parse(arrayBufferToString(result));\r\n\t\t\t\t\r\n\t\t\t\treturn result;\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(format.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\treturn this.subtle.exportKey(\"raw\", key);\r\n\t\t\tcase \"spki\":\r\n\t\t\t\tsequence = sequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst publicKeyInfo = new PublicKeyInfo();\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublicKeyInfo.fromJSON(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect key data\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn publicKeyInfo.toSchema().toBER(false);\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\tsequence = sequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyInfo = new PrivateKeyInfo();\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprivateKeyInfo.fromJSON(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect key data\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn privateKeyInfo.toSchema().toBER(false);\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect format: ${format}`);\r\n\t\t}\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert WebCrypto keys between different export formats\r\n\t * @param {string} inputFormat\r\n\t * @param {string} outputFormat\r\n\t * @param {ArrayBuffer|Object} keyData\r\n\t * @param {Object} algorithm\r\n\t * @param {boolean} extractable\r\n\t * @param {Array} keyUsages\r\n\t * @returns {Promise}\r\n\t */\r\n\tconvert(inputFormat, outputFormat, keyData, algorithm, extractable, keyUsages)\r\n\t{\r\n\t\tswitch(inputFormat.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"spki\", result));\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"pkcs8\", result));\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"spki\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"spki\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.reject(\"Impossible to convert between SPKI/PKCS8\");\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"spki\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"pkcs8\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.reject(\"Impossible to convert between SPKI/PKCS8\");\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"pkcs8\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"spki\", result));\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"pkcs8\", result));\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect inputFormat: ${inputFormat}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"encrypt\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tencrypt(...args)\r\n\t{\r\n\t\treturn this.subtle.encrypt(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"decrypt\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tdecrypt(...args)\r\n\t{\r\n\t\treturn this.subtle.decrypt(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"sign\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(...args)\r\n\t{\r\n\t\treturn this.subtle.sign(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"verify\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(...args)\r\n\t{\r\n\t\treturn this.subtle.verify(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"digest\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tdigest(...args)\r\n\t{\r\n\t\treturn this.subtle.digest(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"generateKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tgenerateKey(...args)\r\n\t{\r\n\t\treturn this.subtle.generateKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"deriveKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tderiveKey(...args)\r\n\t{\r\n\t\treturn this.subtle.deriveKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"deriveBits\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tderiveBits(...args)\r\n\t{\r\n\t\treturn this.subtle.deriveBits(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"wrapKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\twrapKey(...args)\r\n\t{\r\n\t\treturn this.subtle.wrapKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"unwrapKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tunwrapKey(...args)\r\n\t{\r\n\t\treturn this.subtle.unwrapKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Initialize input Uint8Array by random values (with help from current \"crypto engine\")\r\n\t * @param {!Uint8Array} view\r\n\t * @returns {*}\r\n\t */\r\n\tgetRandomValues(view)\r\n\t{\r\n\t\tif((\"getRandomValues\" in this.crypto) === false)\r\n\t\t\tthrow new Error(\"No support for getRandomValues\");\r\n\t\t\r\n\t\treturn this.crypto.getRandomValues(view);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get WebCrypto algorithm by wel-known OID\r\n\t * @param {string} oid well-known OID to search for\r\n\t * @returns {Object}\r\n\t */\r\n\tgetAlgorithmByOID(oid)\r\n\t{\r\n\t\tswitch(oid)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.1.1\":\r\n\t\t\tcase \"1.2.840.113549.1.1.5\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.11\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.12\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.13\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.10\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSA-PSS\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.7\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.2.1\":\r\n\t\t\tcase \"1.2.840.10045.4.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.4.3.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.4.3.3\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.4.3.4\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.133.16.840.63.0.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-1\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.1.11.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-256\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.1.11.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-384\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.1.11.3\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-512\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.22\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.42\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.6\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.26\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.46\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.4\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.24\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.44\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.5\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.25\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.45\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.7\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.9\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.10\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.11\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.9.16.3.5\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"DH\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.14.3.2.26\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.2.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.2.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.2.3\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.5.12\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t};\r\n\t\t\t//region Special case - OIDs for ECC curves\r\n\t\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"P-256\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.0.34\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"P-384\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.0.35\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"P-521\"\r\n\t\t\t\t};\r\n\t\t\t//endregion\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn {};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get OID for each specific algorithm\r\n\t * @param {Object} algorithm\r\n\t * @returns {string}\r\n\t */\r\n\tgetOIDByAlgorithm(algorithm)\r\n\t{\r\n\t\tlet result = \"\";\r\n\t\t\r\n\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.5\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.11\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.12\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.13\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.1.10\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.1.7\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.1\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.2\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.3\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.4\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDH\":\r\n\t\t\t\tswitch(algorithm.kdf.toUpperCase()) // Non-standard addition - hash algorithm of KDF function\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.3.133.16.840.63.0.2\"; // dhSinglePass-stdDH-sha1kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.3.132.1.11.1\"; // dhSinglePass-stdDH-sha256kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.3.132.1.11.2\"; // dhSinglePass-stdDH-sha384kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.3.132.1.11.3\"; // dhSinglePass-stdDH-sha512kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CTR\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CBC\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.2\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.22\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.42\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CMAC\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-GCM\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.6\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.26\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.46\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CFB\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.4\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.24\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.44\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-KW\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.5\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.25\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.45\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HMAC\":\r\n\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.7\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.9\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.10\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.11\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"DH\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.9.16.3.5\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-1\":\r\n\t\t\t\tresult = \"1.3.14.3.2.26\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-256\":\r\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.1\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-384\":\r\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.2\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-512\":\r\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.3\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"CONCAT\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HKDF\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"PBKDF2\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.5.12\";\r\n\t\t\t\tbreak;\r\n\t\t\t//region Special case - OIDs for ECC curves\r\n\t\t\tcase \"P-256\":\r\n\t\t\t\tresult = \"1.2.840.10045.3.1.7\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"P-384\":\r\n\t\t\t\tresult = \"1.3.132.0.34\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"P-521\":\r\n\t\t\t\tresult = \"1.3.132.0.35\";\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get default algorithm parameters for each kind of operation\r\n\t * @param {string} algorithmName Algorithm name to get common parameters for\r\n\t * @param {string} operation Kind of operation: \"sign\", \"encrypt\", \"generatekey\", \"importkey\", \"exportkey\", \"verify\"\r\n\t * @returns {*}\r\n\t */\r\n\tgetAlgorithmParameters(algorithmName, operation)\r\n\t{\r\n\t\tlet result = {\r\n\t\t\talgorithm: {},\r\n\t\t\tusages: []\r\n\t\t};\r\n\t\t\r\n\t\tswitch(algorithmName.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tsaltLength: 20\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\"] // encrypt for \"spki\" and decrypt for \"pkcs8\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"verify\"] // \"sign\" for \"pkcs8\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDH\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"deriveKey\", \"deriveBits\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\tcase \"derivebits\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\",\r\n\t\t\t\t\t\t\t\tpublic: [] // Must be a \"publicKey\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CTR\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CTR\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CTR\",\r\n\t\t\t\t\t\t\t\tcounter: new Uint8Array(16),\r\n\t\t\t\t\t\t\t\tlength: 10\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CTR\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CBC\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\t\t\t\tiv: this.getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CBC\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-GCM\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\t\t\t\tiv: this.getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-GCM\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-KW\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\tcase \"wrapkey\":\r\n\t\t\t\t\tcase \"unwrapkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-KW\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HMAC\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HMAC\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\t\t\t\tlength: 32,\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HMAC\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HKDF\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HKDF\",\r\n\t\t\t\t\t\t\t\thash: \"SHA-256\",\r\n\t\t\t\t\t\t\t\tsalt: new Uint8Array([]),\r\n\t\t\t\t\t\t\t\tinfo: new Uint8Array([])\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HKDF\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"PBKDF2\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\t\t\t\thash: { name: \"SHA-256\" },\r\n\t\t\t\t\t\t\t\tsalt: new Uint8Array([]),\r\n\t\t\t\t\t\t\t\titerations: 10000\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getting hash algorithm by signature algorithm\r\n\t * @param {AlgorithmIdentifier} signatureAlgorithm Signature algorithm\r\n\t * @returns {string}\r\n\t */\r\n\tgetHashAlgorithm(signatureAlgorithm)\r\n\t{\r\n\t\tlet result = \"\";\r\n\t\t\r\n\t\tswitch(signatureAlgorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.4.1\": // ecdsa-with-SHA1\r\n\t\t\tcase \"1.2.840.113549.1.1.5\":\r\n\t\t\t\tresult = \"SHA-1\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.4.3.2\": // ecdsa-with-SHA256\r\n\t\t\tcase \"1.2.840.113549.1.1.11\":\r\n\t\t\t\tresult = \"SHA-256\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.4.3.3\": // ecdsa-with-SHA384\r\n\t\t\tcase \"1.2.840.113549.1.1.12\":\r\n\t\t\t\tresult = \"SHA-384\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.4.3.4\": // ecdsa-with-SHA512\r\n\t\t\tcase \"1.2.840.113549.1.1.13\":\r\n\t\t\t\tresult = \"SHA-512\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.10\": // RSA-PSS\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst params = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\r\n\t\t\t\t\t\tif(\"hashAlgorithm\" in params)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconst algorithm = this.getAlgorithmByOID(params.hashAlgorithm.algorithmId);\r\n\t\t\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\t\t\treturn \"\";\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tresult = algorithm.name;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tresult = \"SHA-1\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Specialized function encrypting \"EncryptedContentInfo\" object using parameters\r\n\t * @param {Object} parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tencryptEncryptedContentInfo(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"contentEncryptionAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentEncryptionAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"hmacHashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hmacHashAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\t\t\r\n\t\tif((\"contentToEncrypt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToEncrypt\\\"\");\r\n\t\t\r\n\t\tif((\"contentType\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentType\\\"\");\r\n\r\n\t\tconst contentEncryptionOID = this.getOIDByAlgorithm(parameters.contentEncryptionAlgorithm);\r\n\t\tif(contentEncryptionOID === \"\")\r\n\t\t\treturn Promise.reject(\"Wrong \\\"contentEncryptionAlgorithm\\\" value\");\r\n\t\t\r\n\t\tconst pbkdf2OID = this.getOIDByAlgorithm({\r\n\t\t\tname: \"PBKDF2\"\r\n\t\t});\r\n\t\tif(pbkdf2OID === \"\")\r\n\t\t\treturn Promise.reject(\"Can not find OID for PBKDF2\");\r\n\t\t\r\n\t\tconst hmacOID = this.getOIDByAlgorithm({\r\n\t\t\tname: \"HMAC\",\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hmacHashAlgorithm\r\n\t\t\t}\r\n\t\t});\r\n\t\tif(hmacOID === \"\")\r\n\t\t\treturn Promise.reject(`Incorrect value for \"hmacHashAlgorithm\": ${parameters.hmacHashAlgorithm}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst ivBuffer = new ArrayBuffer(16); // For AES we need IV 16 bytes long\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\tthis.getRandomValues(ivView);\r\n\t\t\r\n\t\tconst saltBuffer = new ArrayBuffer(64);\r\n\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\tthis.getRandomValues(saltView);\r\n\t\t\r\n\t\tconst contentView = new Uint8Array(parameters.contentToEncrypt);\r\n\t\t\r\n\t\tconst pbkdf2Params = new PBKDF2Params({\r\n\t\t\tsalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n\t\t\titerationCount: parameters.iterationCount,\r\n\t\t\tprf: new AlgorithmIdentifier({\r\n\t\t\t\talgorithmId: hmacOID,\r\n\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t})\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tconst passwordView = new Uint8Array(parameters.password);\r\n\t\t\t\r\n\t\t\treturn this.importKey(\"raw\",\r\n\t\t\t\tpasswordView,\r\n\t\t\t\t\"PBKDF2\",\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"deriveKey\"]);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive key for \"contentEncryptionAlgorithm\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.deriveKey({\r\n\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: parameters.hmacHashAlgorithm\r\n\t\t\t\t},\r\n\t\t\t\tsalt: saltView,\r\n\t\t\t\titerations: parameters.iterationCount\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tparameters.contentEncryptionAlgorithm,\r\n\t\t\tfalse,\r\n\t\t\t[\"encrypt\"]),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Encrypt content\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.encrypt({\r\n\t\t\t\tname: parameters.contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tcontentView),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Store all parameters in EncryptedData object\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tconst pbes2Parameters = new PBES2Params({\r\n\t\t\t\tkeyDerivationFunc: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: pbkdf2OID,\r\n\t\t\t\t\talgorithmParams: pbkdf2Params.toSchema()\r\n\t\t\t\t}),\r\n\t\t\t\tencryptionScheme: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: contentEncryptionOID,\r\n\t\t\t\t\talgorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn new EncryptedContentInfo({\r\n\t\t\t\tcontentType: parameters.contentType,\r\n\t\t\t\tcontentEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: \"1.2.840.113549.1.5.13\", // pkcs5PBES2\r\n\t\t\t\t\talgorithmParams: pbes2Parameters.toSchema()\r\n\t\t\t\t}),\r\n\t\t\t\tencryptedContent: new asn1js.OctetString({ valueHex: result })\r\n\t\t\t});\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Decrypt data stored in \"EncryptedContentInfo\" object using parameters\r\n\t * @param parameters\r\n\t * @return {Promise}\r\n\t */\r\n\tdecryptEncryptedContentInfo(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"encryptedContentInfo\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"encryptedContentInfo\\\"\");\r\n\r\n\t\tif(parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId !== \"1.2.840.113549.1.5.13\") // pkcs5PBES2\r\n\t\t\treturn Promise.reject(`Unknown \"contentEncryptionAlgorithm\": ${parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet pbes2Parameters;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tpbes2Parameters = new PBES2Params({ schema: parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"pbes2Parameters\\\"\");\r\n\t\t}\r\n\t\t\r\n\t\tlet pbkdf2Params;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tpbkdf2Params = new PBKDF2Params({ schema: pbes2Parameters.keyDerivationFunc.algorithmParams });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"pbkdf2Params\\\"\");\r\n\t\t}\r\n\t\t\r\n\t\tconst contentEncryptionAlgorithm = this.getAlgorithmByOID(pbes2Parameters.encryptionScheme.algorithmId);\r\n\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\treturn Promise.reject(`Incorrect OID for \"contentEncryptionAlgorithm\": ${pbes2Parameters.encryptionScheme.algorithmId}`);\r\n\t\t\r\n\t\tconst ivBuffer = pbes2Parameters.encryptionScheme.algorithmParams.valueBlock.valueHex;\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\t\r\n\t\tconst saltBuffer = pbkdf2Params.salt.valueBlock.valueHex;\r\n\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\t\r\n\t\tconst iterationCount = pbkdf2Params.iterationCount;\r\n\t\t\r\n\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\t\t\r\n\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t{\r\n\t\t\tconst algorithm = this.getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\t\t\t\r\n\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tthis.importKey(\"raw\",\r\n\t\t\t\tparameters.password,\r\n\t\t\t\t\"PBKDF2\",\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"deriveKey\"]),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive key for \"contentEncryptionAlgorithm\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.deriveKey({\r\n\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t},\r\n\t\t\t\tsalt: saltView,\r\n\t\t\t\titerations: iterationCount\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\tfalse,\r\n\t\t\t[\"decrypt\"]),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Decrypt internal content using derived key\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Create correct data block for decryption\r\n\t\t\tlet dataBuffer = new ArrayBuffer(0);\r\n\t\t\t\r\n\t\t\tif(parameters.encryptedContentInfo.encryptedContent.idBlock.isConstructed === false)\r\n\t\t\t\tdataBuffer = parameters.encryptedContentInfo.encryptedContent.valueBlock.valueHex;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfor(const content of parameters.encryptedContentInfo.encryptedContent.valueBlock.value)\r\n\t\t\t\t\tdataBuffer = utilConcatBuf(dataBuffer, content.valueBlock.valueHex);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn this.decrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tdataBuffer);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Stamping (signing) data using algorithm simular to HMAC\r\n\t * @param {Object} parameters\r\n\t * @return {Promise.<T>|Promise}\r\n\t */\r\n\tstampDataWithPassword(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"salt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\t\t\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"salt\\\"\");\r\n\t\t\r\n\t\tif((\"contentToStamp\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToStamp\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Choose correct length for HMAC key\r\n\t\tlet length;\r\n\t\t\r\n\t\tswitch(parameters.hashAlgorithm.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"sha-1\":\r\n\t\t\t\tlength = 160;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-256\":\r\n\t\t\t\tlength = 256;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-384\":\r\n\t\t\t\tlength = 384;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-512\":\r\n\t\t\t\tlength = 512;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst hmacAlgorithm = {\r\n\t\t\tname: \"HMAC\",\r\n\t\t\tlength,\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hashAlgorithm\r\n\t\t\t}\r\n\t\t};\r\n\t\t//endregion\r\n\r\n\t\t//region Create PKCS#12 key for integrity checking\r\n\t\tsequence = sequence.then(() => makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Import HMAC key\r\n\t\t// noinspection JSCheckFunctionSignatures\r\n\t\tsequence = sequence.then(\r\n\t\t\tresult =>\r\n\t\t\t\tthis.importKey(\"raw\",\r\n\t\t\t\t\tnew Uint8Array(result),\r\n\t\t\t\t\thmacAlgorithm,\r\n\t\t\t\t\tfalse,\r\n\t\t\t\t\t[\"sign\"])\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make signed HMAC value\r\n\t\tsequence = sequence.then(\r\n\t\t\tresult =>\r\n\t\t\t\tthis.sign(hmacAlgorithm, result, new Uint8Array(parameters.contentToStamp)),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tverifyDataStampedWithPassword(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"salt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\t\t\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"salt\\\"\");\r\n\t\t\r\n\t\tif((\"contentToVerify\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToVerify\\\"\");\r\n\t\t\r\n\t\tif((\"signatureToVerify\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"signatureToVerify\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Choose correct length for HMAC key\r\n\t\tlet length;\r\n\t\t\r\n\t\tswitch(parameters.hashAlgorithm.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"sha-1\":\r\n\t\t\t\tlength = 160;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-256\":\r\n\t\t\t\tlength = 256;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-384\":\r\n\t\t\t\tlength = 384;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-512\":\r\n\t\t\t\tlength = 512;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst hmacAlgorithm = {\r\n\t\t\tname: \"HMAC\",\r\n\t\t\tlength,\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hashAlgorithm\r\n\t\t\t}\r\n\t\t};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create PKCS#12 key for integrity checking\r\n\t\tsequence = sequence.then(() => makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Import HMAC key\r\n\t\t// noinspection JSCheckFunctionSignatures\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.importKey(\"raw\",\r\n\t\t\t\tnew Uint8Array(result),\r\n\t\t\t\thmacAlgorithm,\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"verify\"])\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make signed HMAC value\r\n\t\tsequence = sequence.then(\r\n\t\t\tresult =>\r\n\t\t\t\tthis.verify(hmacAlgorithm, result, new Uint8Array(parameters.signatureToVerify), new Uint8Array(parameters.contentToVerify)),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get signature parameters by analyzing private key algorithm\r\n\t * @param {Object} privateKey The private key user would like to use\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hash algorithm user would like to use\r\n\t * @return {Promise.<T>|Promise}\r\n\t */\r\n\tgetSignatureParameters(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Check hashing algorithm\r\n\t\tconst oid = this.getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\tif(oid === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tconst signatureAlgorithm = new AlgorithmIdentifier();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm\r\n\t\tconst parameters = this.getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\r\n\t\tparameters.algorithm.hash.name = hashAlgorithm;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Fill internal structures base on \"privateKey\" and \"hashAlgorithm\"\r\n\t\tswitch(privateKey.algorithm.name.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tsignatureAlgorithm.algorithmId = this.getOIDByAlgorithm(parameters.algorithm);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Set \"saltLength\" as a length (in octets) of hash function result\r\n\t\t\t\t\tswitch(hashAlgorithm.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 32;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 48;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 64;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Fill \"RSASSA_PSS_params\" object\r\n\t\t\t\t\tconst paramsObject = {};\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(hashAlgorithm.toUpperCase() !== \"SHA-1\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst hashAlgorithmOID = this.getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\t\t\t\t\tif(hashAlgorithmOID === \"\")\r\n\t\t\t\t\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tparamsObject.hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tparamsObject.maskGenAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // MGF1\r\n\t\t\t\t\t\t\talgorithmParams: paramsObject.hashAlgorithm.toSchema()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(parameters.algorithm.saltLength !== 20)\r\n\t\t\t\t\t\tparamsObject.saltLength = parameters.algorithm.saltLength;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst pssParameters = new RSASSAPSSParams(paramsObject);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Automatically set signature algorithm\r\n\t\t\t\t\tsignatureAlgorithm.algorithmId = \"1.2.840.113549.1.1.10\";\r\n\t\t\t\t\tsignatureAlgorithm.algorithmParams = pssParameters.toSchema();\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${privateKey.algorithm.name}`);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn Promise.resolve().then(() => ({\r\n\t\t\tsignatureAlgorithm,\r\n\t\t\tparameters\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Sign data with pre-defined private key\r\n\t * @param {ArrayBuffer} data Data to be signed\r\n\t * @param {Object} privateKey Private key to use\r\n\t * @param {Object} parameters Parameters for used algorithm\r\n\t * @return {Promise.<T>|Promise}\r\n\t */\r\n\tsignWithPrivateKey(data, privateKey, parameters)\r\n\t{\r\n\t\treturn this.sign(parameters.algorithm,\r\n\t\t\tprivateKey,\r\n\t\t\tnew Uint8Array(data))\r\n\t\t\t.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Special case for ECDSA algorithm\r\n\t\t\t\tif(parameters.algorithm.name === \"ECDSA\")\r\n\t\t\t\t\tresult = createCMSECDSASignature(result);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn result;\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(`Signing error: ${error}`)\r\n\t\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\tfillPublicKeyParameters(publicKeyInfo, signatureAlgorithm)\r\n\t{\r\n\t\tconst parameters = {};\r\n\t\t\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tconst shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\r\n\t\tif(shaAlgorithm === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get information about public key algorithm and default parameters for import\r\n\t\tlet algorithmId;\r\n\t\tif(signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\r\n\t\t\talgorithmId = signatureAlgorithm.algorithmId;\r\n\t\telse\r\n\t\t\talgorithmId = publicKeyInfo.algorithm.algorithmId;\r\n\t\t\r\n\t\tconst algorithmObject = this.getAlgorithmByOID(algorithmId);\r\n\t\tif((\"name\" in algorithmObject) === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported public key algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t\r\n\t\tparameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importkey\");\r\n\t\tif(\"hash\" in parameters.algorithm.algorithm)\r\n\t\t\tparameters.algorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\r\n\t\t//region Special case for ECDSA\r\n\t\tif(algorithmObject.name === \"ECDSA\")\r\n\t\t{\r\n\t\t\t//region Get information about named curve\r\n\t\t\tlet algorithmParamsChecked = false;\r\n\t\t\t\r\n\t\t\tif((\"algorithmParams\" in publicKeyInfo.algorithm) === true)\r\n\t\t\t{\r\n\t\t\t\tif(\"idBlock\" in publicKeyInfo.algorithm.algorithmParams)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1) && (publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6))\r\n\t\t\t\t\t\talgorithmParamsChecked = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(algorithmParamsChecked === false)\r\n\t\t\t\treturn Promise.reject(\"Incorrect type for ECDSA public key parameters\");\r\n\t\t\t\r\n\t\t\tconst curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\r\n\t\t\tif((\"name\" in curveObject) === false)\r\n\t\t\t\treturn Promise.reject(`Unsupported named curve algorithm: ${publicKeyInfo.algorithm.algorithmParams.valueBlock.toString()}`);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tparameters.algorithm.algorithm.namedCurve = curveObject.name;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn parameters;\r\n\t}\r\n\t//**********************************************************************************\r\n\tgetPublicKey(publicKeyInfo, signatureAlgorithm, parameters = null)\r\n\t{\r\n\t\tif(parameters === null)\r\n\t\t\tparameters = this.fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm);\r\n\t\t\r\n\t\tconst publicKeyInfoSchema = publicKeyInfo.toSchema();\r\n\t\tconst publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);\r\n\t\tconst publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);\r\n\t\t\r\n\t\treturn this.importKey(\"spki\",\r\n\t\t\tpublicKeyInfoView,\r\n\t\t\tparameters.algorithm.algorithm,\r\n\t\t\ttrue,\r\n\t\t\tparameters.algorithm.usages\r\n\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\tverifyWithPublicKey(data, signature, publicKeyInfo, signatureAlgorithm, shaAlgorithm = null)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tif(shaAlgorithm === null)\r\n\t\t{\r\n\t\t\tshaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\r\n\t\t\tif(shaAlgorithm === \"\")\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t\t\r\n\t\t\t//region Import public key\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\tthis.getPublicKey(publicKeyInfo, signatureAlgorithm));\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tconst parameters = {};\r\n\t\t\t\r\n\t\t\t//region Get information about public key algorithm and default parameters for import\r\n\t\t\tlet algorithmId;\r\n\t\t\tif(signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\r\n\t\t\t\talgorithmId = signatureAlgorithm.algorithmId;\r\n\t\t\telse\r\n\t\t\t\talgorithmId = publicKeyInfo.algorithm.algorithmId;\r\n\t\t\t\r\n\t\t\tconst algorithmObject = this.getAlgorithmByOID(algorithmId);\r\n\t\t\tif((\"name\" in algorithmObject) === \"\")\r\n\t\t\t\treturn Promise.reject(`Unsupported public key algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t\t\r\n\t\t\tparameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importkey\");\r\n\t\t\tif(\"hash\" in parameters.algorithm.algorithm)\r\n\t\t\t\tparameters.algorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t\r\n\t\t\t//region Special case for ECDSA\r\n\t\t\tif(algorithmObject.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\t//region Get information about named curve\r\n\t\t\t\tlet algorithmParamsChecked = false;\r\n\t\t\t\t\r\n\t\t\t\tif((\"algorithmParams\" in publicKeyInfo.algorithm) === true)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"idBlock\" in publicKeyInfo.algorithm.algorithmParams)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1) && (publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6))\r\n\t\t\t\t\t\t\talgorithmParamsChecked = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(algorithmParamsChecked === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrect type for ECDSA public key parameters\");\r\n\t\t\t\t\r\n\t\t\t\tconst curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\r\n\t\t\t\tif((\"name\" in curveObject) === false)\r\n\t\t\t\t\treturn Promise.reject(`Unsupported named curve algorithm: ${publicKeyInfo.algorithm.algorithmParams.valueBlock.toString()}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tparameters.algorithm.algorithm.namedCurve = curveObject.name;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Import public key\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\tthis.getPublicKey(publicKeyInfo, null, parameters));\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Verify signature\r\n\t\tsequence = sequence.then(publicKey =>\r\n\t\t{\r\n\t\t\t//region Get default algorithm parameters for verification\r\n\t\t\tconst algorithm = this.getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\r\n\t\t\tif(\"hash\" in algorithm.algorithm)\r\n\t\t\t\talgorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Special case for ECDSA signatures\r\n\t\t\tlet signatureValue = signature.valueBlock.valueHex;\r\n\t\t\t\r\n\t\t\tif(publicKey.algorithm.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(signatureValue);\r\n\t\t\t\t// noinspection JSCheckFunctionSignatures\r\n\t\t\t\tsignatureValue = createECDSASignatureFromCMS(asn1.result);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Special case for RSA-PSS\r\n\t\t\tif(publicKey.algorithm.name === \"RSA-PSS\")\r\n\t\t\t{\r\n\t\t\t\tlet pssParameters;\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpssParameters = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(ex);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(\"saltLength\" in pssParameters)\r\n\t\t\t\t\talgorithm.algorithm.saltLength = pssParameters.saltLength;\r\n\t\t\t\telse\r\n\t\t\t\t\talgorithm.algorithm.saltLength = 20;\r\n\t\t\t\t\r\n\t\t\t\tlet hashAlgo = \"SHA-1\";\r\n\t\t\t\t\r\n\t\t\t\tif(\"hashAlgorithm\" in pssParameters)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst hashAlgorithm = this.getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Unrecognized hash algorithm: ${pssParameters.hashAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\r\n\t\t\t\t\thashAlgo = hashAlgorithm.name;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\talgorithm.algorithm.hash.name = hashAlgo;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn this.verify(algorithm.algorithm,\r\n\t\t\t\tpublicKey,\r\n\t\t\t\tnew Uint8Array(signatureValue),\r\n\t\t\t\tnew Uint8Array(data)\r\n\t\t\t);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"CryptoEngine.js"}