{"version":3,"sources":["../src/EncryptedData.js"],"names":["EncryptedData","constructor","parameters","version","defaultValues","encryptedContentInfo","unprotectedAttrs","fromSchema","schema","memberName","EncryptedContentInfo","Error","compareWithDefault","memberValue","contentType","contentEncryptionAlgorithm","encryptedContent","length","names","asn1js","Sequence","name","blockName","value","Integer","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","Attribute","asn1","compareSchema","verified","result","valueBlock","valueDec","Array","from","element","toSchema","outputArray","push","toJSON","_object","encrypt","Object","Promise","reject","engine","subtle","encryptEncryptedContentInfo","then","decrypt","decryptEncryptedContentInfo"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport { getEngine } from \"./common.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport Attribute from \"./Attribute.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EncryptedData\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EncryptedData class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", EncryptedData.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {EncryptedContentInfo}\r\n\t\t * @desc encryptedContentInfo\r\n\t\t */\r\n\t\tthis.encryptedContentInfo = getParametersValue(parameters, \"encryptedContentInfo\", EncryptedData.defaultValues(\"encryptedContentInfo\"));\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @desc unprotectedAttrs\r\n\t\t\t */\r\n\t\t\tthis.unprotectedAttrs = getParametersValue(parameters, \"unprotectedAttrs\", EncryptedData.defaultValues(\"unprotectedAttrs\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn new EncryptedContentInfo();\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === 0);\r\n\t\t\tcase \"encryptedContentInfo\":\r\n\t\t\t\treturn ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm)) &&\r\n\t\t\t\t(EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent)));\r\n\t\t\tcase \"unprotectedAttrs\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedData class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * EncryptedData ::= SEQUENCE {\r\n\t *    version CMSVersion,\r\n\t *    encryptedContentInfo EncryptedContentInfo,\r\n\t *    unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [encryptedContentInfo]\r\n\t\t * @property {string} [unprotectedAttrs]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tEncryptedContentInfo.schema(names.encryptedContentInfo || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.unprotectedAttrs || \"\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"encryptedContentInfo\",\r\n\t\t\t\"unprotectedAttrs\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEncryptedData.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tencryptedContentInfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptedContentInfo\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tunprotectedAttrs: \"unprotectedAttrs\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EncryptedData\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in asn1.result)\r\n\t\t\tthis.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, element => new Attribute({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(this.encryptedContentInfo.toSchema());\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.unprotectedAttrs, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tversion: this.version,\r\n\t\t\tencryptedContentInfo: this.encryptedContentInfo.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"unprotectedAttrs\" in this)\r\n\t\t\t_object.unprotectedAttrs = Array.from(this.unprotectedAttrs, element => element.toJSON());\r\n\t\t\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create a new CMS Encrypted Data content\r\n\t * @param {Object} parameters Parameters neccessary for encryption\r\n\t * @returns {Promise}\r\n\t */\r\n\tencrypt(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get cryptographic engine\r\n\t\tconst engine = getEngine();\r\n\t\tif(typeof engine === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to initialize cryptographic engine\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Set \"contentType\" parameter\r\n\t\tparameters.contentType = \"1.2.840.113549.1.7.1\"; // \"data\"\r\n\t\t//endregion\r\n\t\t\r\n\t\tif(\"encryptEncryptedContentInfo\" in engine.subtle)\r\n\t\t{\r\n\t\t\treturn engine.subtle.encryptEncryptedContentInfo(parameters).then(result =>\r\n\t\t\t{\r\n\t\t\t\tthis.encryptedContentInfo = result;\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\treturn Promise.reject(`No support for \"encryptEncryptedContentInfo\" in current crypto engine ${engine.name}`);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create a new CMS Encrypted Data content\r\n\t * @param {Object} parameters Parameters neccessary for encryption\r\n\t */\r\n\tdecrypt(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get cryptographic engine\r\n\t\tconst engine = getEngine();\r\n\t\tif(typeof engine === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to initialize cryptographic engine\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Set \"encryptedContentInfo\" value\r\n\t\tparameters.encryptedContentInfo = this.encryptedContentInfo;\r\n\t\t//endregion\r\n\t\t\r\n\t\tif(\"decryptEncryptedContentInfo\" in engine.subtle)\r\n\t\t\treturn engine.subtle.decryptEncryptedContentInfo(parameters);\r\n\t\t\r\n\t\treturn Promise.reject(`No support for \"decryptEncryptedContentInfo\" in current crypto engine ${engine.name}`);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"EncryptedData.js"}