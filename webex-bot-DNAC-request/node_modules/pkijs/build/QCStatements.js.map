{"version":3,"sources":["../src/QCStatements.js"],"names":["QCStatement","constructor","parameters","id","defaultValues","type","fromSchema","schema","memberName","asn1js","Null","Error","compareWithDefault","memberValue","names","Sequence","name","blockName","value","ObjectIdentifier","Any","optional","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","push","toJSON","object","QCStatements","values","length","Repeated","Array","from","element","extensions"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3739\r\n */\r\nexport class QCStatement\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for QCStatement class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.id = getParametersValue(parameters, \"id\", QCStatement.defaultValues(\"id\"));\r\n\r\n\t\tif(\"type\" in parameters)\r\n\t\t{\r\n\t\t\t/**\r\n\t\t\t * @type {*} Any data described by \"id\"\r\n\t\t\t */\r\n\t\t\tthis.type = getParametersValue(parameters, \"type\", QCStatement.defaultValues(\"type\"));\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"id\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn new asn1js.Null();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for QCStatement class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"id\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Null);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for QCStatement class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n \t *\t QCStatement ::= SEQUENCE {\r\n\t *       statementId   QC-STATEMENT.&id({SupportedStatements}),\r\n\t *       statementInfo QC-STATEMENT.&Type({SupportedStatements}{@statementId}) OPTIONAL\r\n\t *   }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [id]\r\n\t\t * @property {string} [type]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.id || \"\") }),\r\n\t\t\t\tnew asn1js.Any({\r\n\t\t\t\t\tname: (names.type || \"\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"id\",\r\n\t\t\t\"type\"\r\n\t\t]);\r\n\t\t//endregion\r\n\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tQCStatement.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tid: \"id\",\r\n\t\t\t\t\ttype: \"type\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for QCStatement\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.id = asn1.result.id.valueBlock.toString();\r\n\r\n\t\tif(\"type\" in asn1.result)\r\n\t\t\tthis.type = asn1.result.type;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\tconst value = [\r\n\t\t\tnew asn1js.ObjectIdentifier({ value: this.id })\r\n\t\t];\r\n\r\n\t\tif(\"type\" in this)\r\n\t\t\tvalue.push(this.type);\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tid: this.id\r\n\t\t};\r\n\r\n\t\tif(\"type\" in this)\r\n\t\t\tobject.type = this.type.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3739\r\n */\r\nexport default class QCStatements\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for QCStatements class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array<QCStatement>}\r\n\t\t */\r\n\t\tthis.values = getParametersValue(parameters, \"values\", QCStatements.defaultValues(\"values\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"values\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for QCStatements class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"values\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for QCStatements class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * QCStatements ::= SEQUENCE OF QCStatement\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [values]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.values || \"\"),\r\n\t\t\t\t\tvalue: QCStatement.schema(names.value || {})\r\n\t\t\t\t}),\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"values\"\r\n\t\t]);\r\n\t\t//endregion\r\n\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tQCStatements.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tvalues: \"values\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for QCStatements\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.values = Array.from(asn1.result.values, element => new QCStatement({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.values, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\textensions: Array.from(this.values, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"QCStatements.js"}