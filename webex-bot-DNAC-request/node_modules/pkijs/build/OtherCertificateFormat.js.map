{"version":3,"sources":["../src/OtherCertificateFormat.js"],"names":["OtherCertificateFormat","constructor","parameters","otherCertFormat","defaultValues","otherCert","fromSchema","schema","memberName","asn1js","Any","Error","names","Sequence","name","blockName","value","ObjectIdentifier","asn1","compareSchema","verified","result","valueBlock","toString","toSchema","toJSON","object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class OtherCertificateFormat\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherCertificateFormat class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc otherCertFormat\r\n\t\t */\r\n\t\tthis.otherCertFormat = getParametersValue(parameters, \"otherCertFormat\", OtherCertificateFormat.defaultValues(\"otherCertFormat\"));\r\n\t\t/**\r\n\t\t * @type {Any}\r\n\t\t * @desc otherCert\r\n\t\t */\r\n\t\tthis.otherCert = getParametersValue(parameters, \"otherCert\", OtherCertificateFormat.defaultValues(\"otherCert\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"otherCertFormat\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"otherCert\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherCertificateFormat class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OtherCertificateFormat ::= SEQUENCE {\r\n\t *    otherCertFormat OBJECT IDENTIFIER,\r\n\t *    otherCert ANY DEFINED BY otherCertFormat }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [otherCertFormat]\r\n\t\t * @property {string} [otherCert]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.otherCertFormat || \"otherCertFormat\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.otherCert || \"otherCert\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"otherCertFormat\",\r\n\t\t\t\"otherCert\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherCertificateFormat.schema()\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherCertificateFormat\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.otherCertFormat = asn1.result.otherCertFormat.valueBlock.toString();\r\n\t\tthis.otherCert = asn1.result.otherCert;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.otherCertFormat }),\r\n\t\t\t\tthis.otherCert\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\totherCertFormat: this.otherCertFormat\r\n\t\t};\r\n\r\n\t\tif(!(this.otherCert instanceof asn1js.Any))\r\n\t\t\tobject.otherCert = this.otherCert.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"OtherCertificateFormat.js"}