{"version":3,"sources":["../src/PolicyInformation.js"],"names":["PolicyInformation","constructor","parameters","policyIdentifier","defaultValues","policyQualifiers","fromSchema","schema","memberName","Error","names","asn1js","Sequence","name","blockName","value","ObjectIdentifier","optional","Repeated","PolicyQualifierInfo","asn1","compareSchema","verified","result","valueBlock","toString","Array","from","element","toSchema","outputArray","push","toJSON","object"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport PolicyQualifierInfo from \"./PolicyQualifierInfo.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class PolicyInformation\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PolicyInformation class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc policyIdentifier\r\n\t\t */\r\n\t\tthis.policyIdentifier = getParametersValue(parameters, \"policyIdentifier\", PolicyInformation.defaultValues(\"policyIdentifier\"));\r\n\r\n\t\tif(\"policyQualifiers\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<PolicyQualifierInfo>}\r\n\t\t\t * @desc Value of the TIME class\r\n\t\t\t */\r\n\t\t\tthis.policyQualifiers = getParametersValue(parameters, \"policyQualifiers\", PolicyInformation.defaultValues(\"policyQualifiers\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"policyIdentifier\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"policyQualifiers\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PolicyInformation class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PolicyInformation ::= SEQUENCE {\r\n\t *    policyIdentifier   CertPolicyId,\r\n\t *    policyQualifiers   SEQUENCE SIZE (1..MAX) OF\r\n\t *    PolicyQualifierInfo OPTIONAL }\r\n\t *\r\n\t * CertPolicyId ::= OBJECT IDENTIFIER\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [policyIdentifier]\r\n\t\t * @property {string} [policyQualifiers]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.policyIdentifier || \"\") }),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.policyQualifiers || \"\"),\r\n\t\t\t\t\t\t\tvalue: PolicyQualifierInfo.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"policyIdentifier\",\r\n\t\t\t\"policyQualifiers\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPolicyInformation.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tpolicyIdentifier: \"policyIdentifier\",\r\n\t\t\t\t\tpolicyQualifiers: \"policyQualifiers\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PolicyInformation\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.policyIdentifier = asn1.result.policyIdentifier.valueBlock.toString();\r\n\r\n\t\tif(\"policyQualifiers\" in asn1.result)\r\n\t\t\tthis.policyQualifiers = Array.from(asn1.result.policyQualifiers, element => new PolicyQualifierInfo({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.policyIdentifier }));\r\n\t\t\r\n\t\tif(\"policyQualifiers\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.policyQualifiers, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tpolicyIdentifier: this.policyIdentifier\r\n\t\t};\r\n\r\n\t\tif(\"policyQualifiers\" in this)\r\n\t\t\tobject.policyQualifiers = Array.from(this.policyQualifiers, element => element.toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"PolicyInformation.js"}