{"version":3,"sources":["../src/PKCS8ShroudedKeyBag.js"],"names":["PKCS8ShroudedKeyBag","constructor","parameters","encryptionAlgorithm","defaultValues","encryptedData","parsedValue","fromSchema","schema","memberName","AlgorithmIdentifier","asn1js","OctetString","Error","compareWithDefault","memberValue","algorithmId","isEqual","Object","keys","length","names","Sequence","name","blockName","value","Choice","idBlock","isConstructed","asn1","compareSchema","verified","result","toSchema","toJSON","parseInternalValues","sequence","Promise","resolve","cmsEncrypted","EncryptedData","encryptedContentInfo","EncryptedContentInfo","contentEncryptionAlgorithm","encryptedContent","then","decrypt","error","reject","fromBER","offset","PrivateKeyInfo","makeInternalValues","contentToEncrypt","toBER","encrypt"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport EncryptedData from \"./EncryptedData.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport PrivateKeyInfo from \"./PrivateKeyInfo.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class PKCS8ShroudedKeyBag \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PKCS8ShroudedKeyBag class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc encryptionAlgorithm\r\n\t\t */\r\n\t\tthis.encryptionAlgorithm = getParametersValue(parameters, \"encryptionAlgorithm\", PKCS8ShroudedKeyBag.defaultValues(\"encryptionAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc encryptedData\r\n\t\t */\r\n\t\tthis.encryptedData = getParametersValue(parameters, \"encryptedData\", PKCS8ShroudedKeyBag.defaultValues(\"encryptedData\"));\r\n\t\t\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @desc parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", PKCS8ShroudedKeyBag.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"encryptionAlgorithm\":\r\n\t\t\t\treturn (new AlgorithmIdentifier());\r\n\t\t\tcase \"encryptedData\":\r\n\t\t\t\treturn (new asn1js.OctetString());\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKCS8ShroudedKeyBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"encryptionAlgorithm\":\r\n\t\t\t\treturn ((AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId)) &&\r\n\t\t\t\t((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedData\":\r\n\t\t\t\treturn (memberValue.isEqual(PKCS8ShroudedKeyBag.defaultValues(memberName)));\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKCS8ShroudedKeyBag class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PKCS8ShroudedKeyBag ::= EncryptedPrivateKeyInfo\r\n\t *\r\n\t * EncryptedPrivateKeyInfo ::= SEQUENCE {\r\n\t *    encryptionAlgorithm AlgorithmIdentifier {{KeyEncryptionAlgorithms}},\r\n\t *    encryptedData EncryptedData\r\n\t * }\r\n\t *\r\n\t * EncryptedData ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [encryptionAlgorithm]\r\n\t\t * @property {string} [encryptedData]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.encryptionAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"encryptionAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.OctetString({ name: (names.encryptedData || \"encryptedData\") }),\r\n\t\t\t\t\t\tnew asn1js.OctetString({\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\tisConstructed: true\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tname: (names.encryptedData || \"encryptedData\")\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"encryptionAlgorithm\",\r\n\t\t\t\"encryptedData\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPKCS8ShroudedKeyBag.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tencryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedData: \"encryptedData\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PKCS8ShroudedKeyBag\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.encryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.encryptionAlgorithm });\r\n\t\tthis.encryptedData = asn1.result.encryptedData;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.encryptionAlgorithm.toSchema(),\r\n\t\t\t\tthis.encryptedData\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tencryptionAlgorithm: this.encryptionAlgorithm.toJSON(),\r\n\t\t\tencryptedData: this.encryptedData.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\tparseInternalValues(parameters)\r\n\t{\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst cmsEncrypted = new EncryptedData({\r\n\t\t\tencryptedContentInfo: new EncryptedContentInfo({\r\n\t\t\t\tcontentEncryptionAlgorithm: this.encryptionAlgorithm,\r\n\t\t\t\tencryptedContent: this.encryptedData\r\n\t\t\t})\r\n\t\t});\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Decrypt internal data \r\n\t\tsequence = sequence.then(\r\n\t\t\t() => cmsEncrypted.decrypt(parameters),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initialize \"parsedValue\" with decrypted PKCS#8 private key \r\n\t\tsequence = sequence.then(\r\n\t\t\t/**\r\n\t\t\t * @param {ArrayBuffer} result\r\n\t\t\t */\r\n\t\t\tresult =>\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(result);\r\n\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\treturn Promise.reject(\"Error during parsing ASN.1 data\");\r\n\t\t\t\t\r\n\t\t\t\tthis.parsedValue = new PrivateKeyInfo({ schema: asn1.result });\r\n\t\t\t\t\r\n\t\t\t\treturn Promise.resolve();\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tmakeInternalValues(parameters)\r\n\t{\r\n\t\t//region Check that we do have \"parsedValue\" \r\n\t\tif((\"parsedValue\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Please initialize \\\"parsedValue\\\" first\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst cmsEncrypted = new EncryptedData();\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Encrypt internal data \r\n\t\tsequence = sequence.then(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tparameters.contentToEncrypt = this.parsedValue.toSchema().toBER(false);\r\n\t\t\t\t\r\n\t\t\t\treturn cmsEncrypted.encrypt(parameters);\r\n\t\t\t},\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initialize internal values \r\n\t\tsequence = sequence.then(\r\n\t\t\t() =>\r\n\t\t\t{\r\n\t\t\t\tthis.encryptionAlgorithm = cmsEncrypted.encryptedContentInfo.contentEncryptionAlgorithm;\r\n\t\t\t\tthis.encryptedData = cmsEncrypted.encryptedContentInfo.encryptedContent;\r\n\t\t\t}\r\n\t\t);\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"PKCS8ShroudedKeyBag.js"}