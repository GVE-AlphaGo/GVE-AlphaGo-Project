{"version":3,"sources":["../src/PFX.js"],"names":["PFX","constructor","parameters","version","defaultValues","authSafe","macData","parsedValue","fromSchema","schema","memberName","ContentInfo","MacData","Error","compareWithDefault","memberValue","contentType","content","mac","macSalt","iterations","Object","keys","length","names","asn1js","Sequence","name","blockName","value","Integer","optional","asn1","compareSchema","verified","result","valueBlock","valueDec","toSchema","outputArray","push","toJSON","output","makeInternalValues","Promise","reject","sequence","resolve","crypto","integrityMode","saltBuffer","ArrayBuffer","saltView","Uint8Array","data","authenticatedSafe","toBER","OctetString","valueHex","engine","subtle","then","stampDataWithPassword","password","hashAlgorithm","hmacHashAlgorithm","salt","iterationCount","contentToStamp","DigestInfo","digestAlgorithm","AlgorithmIdentifier","algorithmId","digest","error","toBeSigned","cmsSigned","SignedData","encapContentInfo","EncapsulatedContentInfo","eContentType","eContent","certificates","signingCertificate","signedAttr","Attribute","type","values","ObjectIdentifier","UTCTime","valueDate","Date","signerInfos","SignerInfo","sid","IssuerAndSerialNumber","issuer","serialNumber","signedAttrs","SignedAndUnsignedAttributes","attributes","sign","privateKey","parseInternalValues","checkIntegrity","authSafeContent","isConstructed","contentValue","fromBER","offset","AuthenticatedSafe","verifyDataStampedWithPassword","contentToVerify","signatureToVerify","idBlock","i","verify","signer","checkChain"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, clearProps } from \"pvutils\";\r\nimport { getCrypto, getEngine, getRandomValues, getOIDByAlgorithm, getAlgorithmByOID } from \"./common.js\";\r\nimport ContentInfo from \"./ContentInfo.js\";\r\nimport MacData from \"./MacData.js\";\r\nimport DigestInfo from \"./DigestInfo.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport SignedData from \"./SignedData.js\";\r\nimport EncapsulatedContentInfo from \"./EncapsulatedContentInfo.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport SignerInfo from \"./SignerInfo.js\";\r\nimport IssuerAndSerialNumber from \"./IssuerAndSerialNumber.js\";\r\nimport SignedAndUnsignedAttributes from \"./SignedAndUnsignedAttributes.js\";\r\nimport AuthenticatedSafe from \"./AuthenticatedSafe.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC7292\r\n */\r\nexport default class PFX \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PFX class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", PFX.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {ContentInfo}\r\n\t\t * @desc authSafe\r\n\t\t */\r\n\t\tthis.authSafe = getParametersValue(parameters, \"authSafe\", PFX.defaultValues(\"authSafe\"));\r\n\t\t\r\n\t\tif(\"macData\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {MacData}\r\n\t\t\t * @desc macData\r\n\t\t\t */\r\n\t\t\tthis.macData = getParametersValue(parameters, \"macData\", PFX.defaultValues(\"macData\"));\r\n\t\t\r\n\t\tif(\"parsedValue\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {*}\r\n\t\t\t * @desc parsedValue\r\n\t\t\t */\r\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", PFX.defaultValues(\"parsedValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 3;\r\n\t\t\tcase \"authSafe\":\r\n\t\t\t\treturn (new ContentInfo());\r\n\t\t\tcase \"macData\":\r\n\t\t\t\treturn (new MacData());\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PFX class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn (memberValue === PFX.defaultValues(memberName));\r\n\t\t\tcase \"authSafe\":\r\n\t\t\t\treturn ((ContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n\t\t\t\t(ContentInfo.compareWithDefault(\"content\", memberValue.content)));\r\n\t\t\tcase \"macData\":\r\n\t\t\t\treturn ((MacData.compareWithDefault(\"mac\", memberValue.mac)) &&\r\n\t\t\t\t(MacData.compareWithDefault(\"macSalt\", memberValue.macSalt)) &&\r\n\t\t\t\t(MacData.compareWithDefault(\"iterations\", memberValue.iterations)));\r\n\t\t\tcase \"parsedValue\":\r\n\t\t\t\treturn ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PFX class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PFX ::= SEQUENCE {\r\n\t *    version\t\tINTEGER {v3(3)}(v3,...),\r\n\t *    authSafe\tContentInfo,\r\n\t *    macData    \tMacData OPTIONAL\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [authSafe]\r\n\t\t * @property {string} [macData]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"version\") }),\r\n\t\t\t\tContentInfo.schema(names.authSafe || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"authSafe\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tMacData.schema(names.macData || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"macData\",\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"authSafe\",\r\n\t\t\t\"macData\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPFX.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tauthSafe: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"authSafe\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmacData: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"macData\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PFX\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.authSafe = new ContentInfo({ schema: asn1.result.authSafe });\r\n\t\t\r\n\t\tif(\"macData\" in asn1.result)\r\n\t\t\tthis.macData = new MacData({ schema: asn1.result.macData });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.authSafe.toSchema()\r\n\t\t];\r\n\t\t\r\n\t\tif(\"macData\" in this)\r\n\t\t\toutputArray.push(this.macData.toSchema());\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst output = {\r\n\t\t\tversion: this.version,\r\n\t\t\tauthSafe: this.authSafe.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"macData\" in this)\r\n\t\t\toutput.macData = this.macData.toJSON();\r\n\t\t\r\n\t\treturn output;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Making ContentInfo from \"parsedValue\" object\r\n\t * @param {Object} parameters Parameters, specific to each \"integrity mode\"\r\n\t */\r\n\tmakeInternalValues(parameters = {})\r\n\t{\r\n\t\t//region Check mandatory parameter\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((\"parsedValue\" in this) === false)\r\n\t\t\treturn Promise.reject(\"Please call \\\"parseValues\\\" function first in order to make \\\"parsedValue\\\" data\");\r\n\t\t\r\n\t\tif((\"integrityMode\" in this.parsedValue) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"integrityMode\\\" inside \\\"parsedValue\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Makes values for each particular integrity mode\r\n\t\t//region Check that we do have neccessary fields in \"parsedValue\" object\r\n\t\tif((\"authenticatedSafe\" in this.parsedValue) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"authenticatedSafe\\\" in \\\"parsedValue\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(this.parsedValue.integrityMode)\r\n\t\t{\r\n\t\t\t//region HMAC-based integrity\r\n\t\t\tcase 0:\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check additional mandatory parameters\r\n\t\t\t\t\tif((\"iterations\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterations\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"pbkdf2HashAlgorithm\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"pbkdf2HashAlgorithm\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"hmacHashAlgorithm\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hmacHashAlgorithm\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"password\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\tconst saltBuffer = new ArrayBuffer(64);\r\n\t\t\t\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\t\t\t\r\n\t\t\t\t\tgetRandomValues(saltView);\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst data = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\r\n\r\n\t\t\t\t\tthis.authSafe = new ContentInfo({\r\n\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.1\",\r\n\t\t\t\t\t\tcontent: new asn1js.OctetString({ valueHex: data })\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Call current crypto engine for making HMAC-based data stamp\r\n\t\t\t\t\tconst engine = getEngine();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((\"stampDataWithPassword\" in engine.subtle) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`No support for \"stampDataWithPassword\" in current engine \"${engine.name}\"`);\r\n\t\t\t\t\t\r\n\t\t\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\t\t\tengine.subtle.stampDataWithPassword({\r\n\t\t\t\t\t\t\tpassword: parameters.password,\r\n\t\t\t\t\t\t\thashAlgorithm: parameters.hmacHashAlgorithm,\r\n\t\t\t\t\t\t\tsalt: saltBuffer,\r\n\t\t\t\t\t\t\titerationCount: parameters.iterations,\r\n\t\t\t\t\t\t\tcontentToStamp: data\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Make \"MacData\" values\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.macData = new MacData({\r\n\t\t\t\t\t\t\t\tmac: new DigestInfo({\r\n\t\t\t\t\t\t\t\t\tdigestAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\t\t\t\talgorithmId: getOIDByAlgorithm({ name: parameters.hmacHashAlgorithm })\r\n\t\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\t\tdigest: new asn1js.OctetString({ valueHex: result })\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tmacSalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n\t\t\t\t\t\t\t\titerations: parameters.iterations\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion\r\n\t\t\t//region publicKey-based integrity\r\n\t\t\tcase 1:\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check additional mandatory parameters\r\n\t\t\t\t\tif((\"signingCertificate\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"signingCertificate\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"privateKey\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"privateKey\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Making data to be signed\r\n\t\t\t\t\t// NOTE: all internal data for \"authenticatedSafe\" must be already prepared.\r\n\t\t\t\t\t// Thus user must call \"makeValues\" for all internal \"SafeContent\" value with appropriate parameters.\r\n\t\t\t\t\t// Or user can choose to use values from initial parsing of existing PKCS#12 data.\r\n\t\t\t\t\r\n\t\t\t\t\tconst toBeSigned = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\tconst cmsSigned = new SignedData({\r\n\t\t\t\t\t\tversion: 1,\r\n\t\t\t\t\t\tencapContentInfo: new EncapsulatedContentInfo({\r\n\t\t\t\t\t\t\teContentType: \"1.2.840.113549.1.7.1\", // \"data\" content type\r\n\t\t\t\t\t\t\teContent: new asn1js.OctetString({ valueHex: toBeSigned })\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tcertificates: [parameters.signingCertificate]\r\n\t\t\t\t\t});\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Making additional attributes for CMS Signed Data\r\n\t\t\t\t\t//region Create a message digest\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() => crypto.digest({ name: parameters.hashAlgorithm }, new Uint8Array(toBeSigned))\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Combine all signed extensions\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\tconst signedAttr = [];\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//region contentType\r\n\t\t\t\t\t\t\tsignedAttr.push(new Attribute({\r\n\t\t\t\t\t\t\t\ttype: \"1.2.840.113549.1.9.3\",\r\n\t\t\t\t\t\t\t\tvalues: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.ObjectIdentifier({ value: \"1.2.840.113549.1.7.1\" })\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region signingTime\r\n\t\t\t\t\t\t\tsignedAttr.push(new Attribute({\r\n\t\t\t\t\t\t\t\ttype: \"1.2.840.113549.1.9.5\",\r\n\t\t\t\t\t\t\t\tvalues: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.UTCTime({ valueDate: new Date() })\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t//region messageDigest\r\n\t\t\t\t\t\t\tsignedAttr.push(new Attribute({\r\n\t\t\t\t\t\t\t\ttype: \"1.2.840.113549.1.9.4\",\r\n\t\t\t\t\t\t\t\tvalues: [\r\n\t\t\t\t\t\t\t\t\tnew asn1js.OctetString({ valueHex: result })\r\n\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t//region Making final value for \"SignerInfo\" type\r\n\t\t\t\t\t\t\tcmsSigned.signerInfos.push(new SignerInfo({\r\n\t\t\t\t\t\t\t\tversion: 1,\r\n\t\t\t\t\t\t\t\tsid: new IssuerAndSerialNumber({\r\n\t\t\t\t\t\t\t\t\tissuer: parameters.signingCertificate.issuer,\r\n\t\t\t\t\t\t\t\t\tserialNumber: parameters.signingCertificate.serialNumber\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tsignedAttrs: new SignedAndUnsignedAttributes({\r\n\t\t\t\t\t\t\t\t\ttype: 0,\r\n\t\t\t\t\t\t\t\t\tattributes: signedAttr\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}));\r\n\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(`Error during making digest for message: ${error}`)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Signing CMS Signed Data\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() => cmsSigned.sign(parameters.privateKey, 0, parameters.hashAlgorithm)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Making final CMS_CONTENT_INFO type\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.authSafe = new ContentInfo({\r\n\t\t\t\t\t\t\t\tcontentType: \"1.2.840.113549.1.7.2\",\r\n\t\t\t\t\t\t\t\tcontent: cmsSigned.toSchema(true)\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(`Error during making signature: ${error}`)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion\r\n\t\t\t//region default\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Parameter \"integrityMode\" has unknown value: ${parameters.integrityMode}`);\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tparseInternalValues(parameters)\r\n\t{\r\n\t\t//region Check input data from \"parameters\" \r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"The \\\"parameters\\\" must has \\\"Object\\\" type\");\r\n\t\t\r\n\t\tif((\"checkIntegrity\" in parameters) === false)\r\n\t\t\tparameters.checkIntegrity = true;\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Get a \"crypto\" extension \r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Create value for \"this.parsedValue.authenticatedSafe\" and check integrity \r\n\t\tthis.parsedValue = {};\r\n\t\t\r\n\t\tswitch(this.authSafe.contentType)\r\n\t\t{\r\n\t\t\t//region data \r\n\t\t\tcase \"1.2.840.113549.1.7.1\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Check additional mandatory parameters\r\n\t\t\t\t\tif((\"password\" in parameters) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Integrity based on HMAC\r\n\t\t\t\t\tthis.parsedValue.integrityMode = 0;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Check that we do have OCTETSTRING as \"content\"\r\n\t\t\t\t\tif((this.authSafe.content instanceof asn1js.OctetString) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Wrong type of \\\"this.authSafe.content\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Check we have \"constructive encoding\" for AuthSafe content\r\n\t\t\t\t\tlet authSafeContent = new ArrayBuffer(0);\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(this.authSafe.content.valueBlock.isConstructed)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(const contentValue of this.authSafe.content.valueBlock.value)\r\n\t\t\t\t\t\t\tauthSafeContent = utilConcatBuf(authSafeContent, contentValue.valueBlock.valueHex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tauthSafeContent = this.authSafe.content.valueBlock.valueHex;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Parse internal ASN.1 data\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(authSafeContent);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of ASN.1 data inside \\\"this.authSafe.content\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Set \"authenticatedSafe\" value\r\n\t\t\t\t\tthis.parsedValue.authenticatedSafe = new AuthenticatedSafe({ schema: asn1.result });\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Check integrity\r\n\t\t\t\t\tif(parameters.checkIntegrity)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t//region Check that \"MacData\" exists\r\n\t\t\t\t\t\tif((\"macData\" in this) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(\"Absent \\\"macData\\\" value, can not check PKCS#12 data integrity\");\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\tconst hashAlgorithm = getAlgorithmByOID(this.macData.mac.digestAlgorithm.algorithmId);\r\n\t\t\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\t\t\treturn Promise.reject(`Unsupported digest algorithm: ${this.macData.mac.digestAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t//region Call current crypto engine for verifying HMAC-based data stamp\r\n\t\t\t\t\t\tconst engine = getEngine();\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\t\t\t\tengine.subtle.verifyDataStampedWithPassword({\r\n\t\t\t\t\t\t\t\tpassword: parameters.password,\r\n\t\t\t\t\t\t\t\thashAlgorithm: hashAlgorithm.name,\r\n\t\t\t\t\t\t\t\tsalt: this.macData.macSalt.valueBlock.valueHex,\r\n\t\t\t\t\t\t\t\titerationCount: this.macData.iterations,\r\n\t\t\t\t\t\t\t\tcontentToVerify: authSafeContent,\r\n\t\t\t\t\t\t\t\tsignatureToVerify: this.macData.mac.digest.valueBlock.valueHex\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t//region Verify HMAC signature\r\n\t\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif(result === false)\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(\"Integrity for the PKCS#12 data is broken!\");\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\terror => Promise.reject(error)\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion \r\n\t\t\t//region signedData \r\n\t\t\tcase \"1.2.840.113549.1.7.2\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Integrity based on signature using public key\r\n\t\t\t\t\tthis.parsedValue.integrityMode = 1;\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Parse CMS Signed Data\r\n\t\t\t\t\tconst cmsSigned = new SignedData({ schema: this.authSafe.content });\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Check that we do have OCTETSTRING as \"content\"\r\n\t\t\t\t\tif((\"eContent\" in cmsSigned.encapContentInfo) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Absent of attached data in \\\"cmsSigned.encapContentInfo\\\"\");\r\n\t\t\t\t\r\n\t\t\t\t\tif((cmsSigned.encapContentInfo.eContent instanceof asn1js.OctetString) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Wrong type of \\\"cmsSigned.encapContentInfo.eContent\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Create correct data block for verification\r\n\t\t\t\t\tlet data = new ArrayBuffer(0);\r\n\t\t\t\t\r\n\t\t\t\t\tif(cmsSigned.encapContentInfo.eContent.idBlock.isConstructed === false)\r\n\t\t\t\t\t\tdata = cmsSigned.encapContentInfo.eContent.valueBlock.valueHex;\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tfor(let i = 0; i < cmsSigned.encapContentInfo.eContent.valueBlock.value.length; i++)\r\n\t\t\t\t\t\t\tdata = utilConcatBuf(data, cmsSigned.encapContentInfo.eContent.valueBlock.value[i].valueBlock.valueHex);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Parse internal ASN.1 data\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(data);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Error during parsing of ASN.1 data inside \\\"this.authSafe.content\\\"\");\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Set \"authenticatedSafe\" value\r\n\t\t\t\t\tthis.parsedValue.authenticatedSafe = new AuthenticatedSafe({ schema: asn1.result });\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\t\t//region Check integrity\r\n\t\t\t\t\tsequence = sequence.then(\r\n\t\t\t\t\t\t() => cmsSigned.verify({ signer: 0, checkChain: false })\r\n\t\t\t\t\t).then(\r\n\t\t\t\t\t\tresult =>\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif(result === false)\r\n\t\t\t\t\t\t\t\treturn Promise.reject(\"Integrity for the PKCS#12 data is broken!\");\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\treturn Promise.resolve();\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\terror => Promise.reject(`Error during integrity verification: ${error}`)\r\n\t\t\t\t\t);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion   \r\n\t\t\t//region default \r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect value for \"this.authSafe.contentType\": ${this.authSafe.contentType}`);\r\n\t\t\t//endregion \r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Return result of the function \r\n\t\treturn sequence.then(\r\n\t\t\t() => this,\r\n\t\t\terror => Promise.reject(`Error during parsing: ${error}`)\r\n\t\t);\r\n\t\t//endregion   \r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"PFX.js"}