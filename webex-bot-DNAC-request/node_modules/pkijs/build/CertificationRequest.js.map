{"version":3,"sources":["../src/CertificationRequest.js"],"names":["CertificationRequestInfo","parameters","names","asn1js","Sequence","name","value","Integer","CertificationRequestInfoVersion","RelativeDistinguishedNames","schema","subject","blockName","PublicKeyInfo","Constructed","optional","idBlock","tagClass","tagNumber","Repeated","CertificationRequestInfoAttributes","Attribute","attributes","CertificationRequest","constructor","tbs","defaultValues","version","subjectPublicKeyInfo","signatureAlgorithm","signatureValue","fromSchema","memberName","ArrayBuffer","AlgorithmIdentifier","BitString","Error","certificationRequestInfo","ObjectIdentifier","Any","asn1","compareSchema","verified","result","valueBeforeDecode","valueBlock","valueDec","Array","from","element","encodeTBS","outputArray","toSchema","push","encodeFlag","tbsSchema","byteLength","fromBER","toJSON","object","sign","privateKey","hashAlgorithm","Promise","reject","sequence","resolve","engine","then","subtle","getSignatureParameters","toBER","signWithPrivateKey","valueHex","verify","verifyWithPublicKey","getPublicKey"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, bufferToHexCodes, clearProps } from \"pvutils\";\r\nimport { getEngine } from \"./common.js\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Attribute from \"./Attribute.js\";\r\n//**************************************************************************************\r\nfunction CertificationRequestInfo(parameters = {})\r\n{\r\n\t//CertificationRequestInfo ::= SEQUENCE {\r\n\t//    version       INTEGER { v1(0) } (v1,...),\r\n\t//    subject       Name,\r\n\t//    subjectPKInfo SubjectPublicKeyInfo{{ PKInfoAlgorithms }},\r\n\t//    attributes    [0] Attributes{{ CRIAttributes }}\r\n\t//}\r\n\t\r\n\t/**\r\n\t * @type {Object}\r\n\t * @property {string} [blockName]\r\n\t * @property {string} [CertificationRequestInfo]\r\n\t * @property {string} [CertificationRequestInfoVersion]\r\n\t * @property {string} [subject]\r\n\t * @property {string} [CertificationRequestInfoAttributes]\r\n\t * @property {string} [attributes]\r\n\t */\r\n\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\r\n\treturn (new asn1js.Sequence({\r\n\t\tname: (names.CertificationRequestInfo || \"CertificationRequestInfo\"),\r\n\t\tvalue: [\r\n\t\t\tnew asn1js.Integer({ name: (names.CertificationRequestInfoVersion || \"CertificationRequestInfo.version\") }),\r\n\t\t\tRelativeDistinguishedNames.schema(names.subject || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"CertificationRequestInfo.subject\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tPublicKeyInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"CertificationRequestInfo.subjectPublicKeyInfo\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\toptional: true, // Because OpenSSL makes wrong \"attributes\" field\r\n\t\t\t\t\t\tname: (names.CertificationRequestInfoAttributes || \"CertificationRequestInfo.attributes\"),\r\n\t\t\t\t\t\tvalue: Attribute.schema(names.attributes || {})\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t})\r\n\t\t]\r\n\t}));\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC2986\r\n */\r\nexport default class CertificationRequest\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Attribute class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc tbs\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", CertificationRequest.defaultValues(\"tbs\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", CertificationRequest.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @desc subject\r\n\t\t */\r\n\t\tthis.subject = getParametersValue(parameters, \"subject\", CertificationRequest.defaultValues(\"subject\"));\r\n\t\t/**\r\n\t\t * @type {PublicKeyInfo}\r\n\t\t * @desc subjectPublicKeyInfo\r\n\t\t */\r\n\t\tthis.subjectPublicKeyInfo = getParametersValue(parameters, \"subjectPublicKeyInfo\", CertificationRequest.defaultValues(\"subjectPublicKeyInfo\"));\r\n\t\t\r\n\t\tif(\"attributes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @desc attributes\r\n\t\t\t */\r\n\t\t\tthis.attributes = getParametersValue(parameters, \"attributes\", CertificationRequest.defaultValues(\"attributes\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", CertificationRequest.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc signatureAlgorithm\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", CertificationRequest.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"subject\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"subjectPublicKeyInfo\":\r\n\t\t\t\treturn new PublicKeyInfo();\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificationRequest class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * CertificationRequest ::= SEQUENCE {\r\n\t *    certificationRequestInfo CertificationRequestInfo,\r\n\t *    signatureAlgorithm       AlgorithmIdentifier{{ SignatureAlgorithms }},\r\n\t *    signature                BIT STRING\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [certificationRequestInfo]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tCertificationRequestInfo(names.certificationRequestInfo || {}),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\tname: (names.signatureAlgorithm || \"signatureAlgorithm\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.ObjectIdentifier(),\r\n\t\t\t\t\t\tnew asn1js.Any({ optional: true })\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"signatureValue\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"CertificationRequestInfo\",\r\n\t\t\t\"CertificationRequestInfo.version\",\r\n\t\t\t\"CertificationRequestInfo.subject\",\r\n\t\t\t\"CertificationRequestInfo.subjectPublicKeyInfo\",\r\n\t\t\t\"CertificationRequestInfo.attributes\",\r\n\t\t\t\"signatureAlgorithm\",\r\n\t\t\t\"signatureValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificationRequest.schema()\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertificationRequest\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbs = asn1.result.CertificationRequestInfo.valueBeforeDecode;\r\n\t\t\r\n\t\tthis.version = asn1.result[\"CertificationRequestInfo.version\"].valueBlock.valueDec;\r\n\t\tthis.subject = new RelativeDistinguishedNames({ schema: asn1.result[\"CertificationRequestInfo.subject\"] });\r\n\t\tthis.subjectPublicKeyInfo = new PublicKeyInfo({ schema: asn1.result[\"CertificationRequestInfo.subjectPublicKeyInfo\"] });\r\n\t\tif(\"CertificationRequestInfo.attributes\" in asn1.result)\r\n\t\t\tthis.attributes = Array.from(asn1.result[\"CertificationRequestInfo.attributes\"], element => new Attribute({ schema: element }));\r\n\t\t\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Aux function making ASN1js Sequence from current TBS\r\n\t * @returns {Sequence}\r\n\t */\r\n\tencodeTBS()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.subject.toSchema(),\r\n\t\t\tthis.subjectPublicKeyInfo.toSchema()\r\n\t\t];\r\n\t\t\r\n\t\tif(\"attributes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tlet tbsSchema;\r\n\t\t\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.byteLength === 0) // No stored TBS part\r\n\t\t\t\treturn CertificationRequest.schema();\r\n\t\t\t\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t\ttbsSchema = this.encodeTBS();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsSchema,\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\ttbs: bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\r\n\t\t\tversion: this.version,\r\n\t\t\tsubject: this.subject.toJSON(),\r\n\t\t\tsubjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(\"attributes\" in this)\r\n\t\t\tobject.attributes = Array.from(this.attributes, element => element.toJSON());\r\n\t\t\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Makes signature for currect certification request\r\n\t * @param {Object} privateKey WebCrypto private key\r\n\t * @param {string} [hashAlgorithm=SHA-1] String representing current hashing algorithm\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Get a private key from function parameter\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbs = this.encodeTBS().toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signatureValue = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Verify existing certification request signature\r\n\t * @returns {*}\r\n\t */\r\n\tverify()\r\n\t{\r\n\t\treturn getEngine().subtle.verifyWithPublicKey(this.tbs, this.signatureValue, this.subjectPublicKeyInfo, this.signatureAlgorithm);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Importing public key for current certificate request\r\n\t */\r\n\tgetPublicKey(parameters = null)\r\n\t{\r\n\t\treturn getEngine().getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"CertificationRequest.js"}