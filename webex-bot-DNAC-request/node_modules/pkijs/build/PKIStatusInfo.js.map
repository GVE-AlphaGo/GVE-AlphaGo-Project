{"version":3,"sources":["../src/PKIStatusInfo.js"],"names":["PKIStatusInfo","constructor","parameters","status","defaultValues","statusStrings","failInfo","fromSchema","schema","memberName","asn1js","BitString","Error","compareWithDefault","memberValue","length","isEqual","names","Sequence","name","blockName","value","Integer","optional","Repeated","Utf8String","asn1","compareSchema","verified","_status","result","valueBlock","isHexOnly","valueDec","toSchema","outputArray","push","toJSON","_object","Array","from","element"],"mappings":"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","sourcesContent":["import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3161\r\n */\r\nexport default class PKIStatusInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PKIStatusInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc status\r\n\t\t */\r\n\t\tthis.status = getParametersValue(parameters, \"status\", PKIStatusInfo.defaultValues(\"status\"));\r\n\r\n\t\tif(\"statusStrings\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Utf8String>}\r\n\t\t\t * @desc statusStrings\r\n\t\t\t */\r\n\t\t\tthis.statusStrings = getParametersValue(parameters, \"statusStrings\", PKIStatusInfo.defaultValues(\"statusStrings\"));\r\n\r\n\t\tif(\"failInfo\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {BitString}\r\n\t\t\t * @desc failInfo\r\n\t\t\t */\r\n\t\t\tthis.failInfo = getParametersValue(parameters, \"failInfo\", PKIStatusInfo.defaultValues(\"failInfo\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn 2;\r\n\t\t\tcase \"statusStrings\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"failInfo\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKIStatusInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"status\":\r\n\t\t\t\treturn (memberValue === PKIStatusInfo.defaultValues(memberName));\r\n\t\t\tcase \"statusStrings\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"failInfo\":\r\n\t\t\t\treturn (memberValue.isEqual(PKIStatusInfo.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PKIStatusInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PKIStatusInfo ::= SEQUENCE {\r\n\t *    status        PKIStatus,\r\n\t *    statusString  PKIFreeText     OPTIONAL,\r\n\t *    failInfo      PKIFailureInfo  OPTIONAL  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [status]\r\n\t\t * @property {string} [statusStrings]\r\n\t\t * @property {string} [failInfo]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.status || \"\") }),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.statusStrings || \"\"),\r\n\t\t\t\t\t\t\tvalue: new asn1js.Utf8String()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({\r\n\t\t\t\t\tname: (names.failInfo || \"\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"status\",\r\n\t\t\t\"statusStrings\",\r\n\t\t\t\"failInfo\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPKIStatusInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tstatus: \"status\",\r\n\t\t\t\t\tstatusStrings: \"statusStrings\",\r\n\t\t\t\t\tfailInfo: \"failInfo\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PKIStatusInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tconst _status = asn1.result.status;\r\n\r\n\t\tif((_status.valueBlock.isHexOnly === true) ||\r\n\t\t\t(_status.valueBlock.valueDec < 0) ||\r\n\t\t\t(_status.valueBlock.valueDec > 5))\r\n\t\t\tthrow new Error(\"PKIStatusInfo \\\"status\\\" has invalid value\");\r\n\r\n\t\tthis.status = _status.valueBlock.valueDec;\r\n\r\n\t\tif(\"statusStrings\" in asn1.result)\r\n\t\t\tthis.statusStrings = asn1.result.statusStrings;\r\n\t\tif(\"failInfo\" in asn1.result)\r\n\t\t\tthis.failInfo = asn1.result.failInfo;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array of output sequence\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.status }));\r\n\r\n\t\tif(\"statusStrings\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tvalue: this.statusStrings\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tif(\"failInfo\" in this)\r\n\t\t\toutputArray.push(this.failInfo);\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tstatus: this.status\r\n\t\t};\r\n\r\n\t\tif(\"statusStrings\" in this)\r\n\t\t\t_object.statusStrings = Array.from(this.statusStrings, element => element.toJSON());\r\n\r\n\t\tif(\"failInfo\" in this)\r\n\t\t\t_object.failInfo = this.failInfo.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n"],"file":"PKIStatusInfo.js"}