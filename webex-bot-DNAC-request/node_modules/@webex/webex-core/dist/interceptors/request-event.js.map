{"version":3,"sources":["request-event.js"],"names":["RequestEventInterceptor","options","logger","console","webex","trigger","error","warn","resolve","reason","reject","response","Interceptor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA;;;;AAEA;;;IAGqBA,uB;;;;;;;;;;;;AAQnB;;;;;8BAKUC,O,EAAS;AACjB,UAAMC,SAAS,mBAAI,IAAJ,EAAU,cAAV,EAA0BC,OAA1B,CAAf;;AAEA,UAAI;AACF,aAAKC,KAAL,CAAWC,OAAX,CAAmB,eAAnB,EAAoCJ,OAApC;AACD,OAFD,CAGA,OAAOK,KAAP,EAAc;AACZJ,eAAOK,IAAP,CAAY,yCAAZ,EAAuDD,KAAvD;AACD;;AAED,aAAO,kBAAQE,OAAR,CAAgBP,OAAhB,CAAP;AACD;;AAED;;;;;;;;;mCAMeA,O,EAASQ,M,EAAQ;AAC9B;AACA;AACA,UAAMP,SAAS,mBAAI,IAAJ,EAAU,cAAV,EAA0BC,OAA1B,CAAf;;AAEA,UAAI;AACF,aAAKC,KAAL,CAAWC,OAAX,CAAmB,aAAnB,EAAkCJ,OAAlC,EAA2CQ,MAA3C;AACA,aAAKL,KAAL,CAAWC,OAAX,CAAmB,iBAAnB,EAAsCJ,OAAtC,EAA+CQ,MAA/C;AACD,OAHD,CAIA,OAAOH,KAAP,EAAc;AACZJ,eAAOK,IAAP,CAAY,uCAAZ,EAAqDD,KAArD;AACD;;AAED,aAAO,kBAAQI,MAAR,CAAeD,MAAf,CAAP;AACD;;AAED;;;;;;;;;+BAMWR,O,EAASU,Q,EAAU;AAC5B,UAAMT,SAAS,mBAAI,IAAJ,EAAU,cAAV,EAA0BC,OAA1B,CAAf;;AAEA,UAAI;AACF,aAAKC,KAAL,CAAWC,OAAX,CAAmB,iBAAnB,EAAsCM,SAASV,OAA/C,EAAwDU,QAAxD;AACD,OAFD,CAGA,OAAOL,KAAP,EAAc;AACZJ,eAAOK,IAAP,CAAY,2CAAZ,EAAyDD,KAAzD;AACD;;AAED,aAAO,kBAAQE,OAAR,CAAgBG,QAAhB,CAAP;AACD;;AAED;;;;;;;;;oCAMgBV,O,EAASQ,M,EAAQ;AAC/B,UAAMP,SAAS,mBAAI,IAAJ,EAAU,cAAV,EAA0BC,OAA1B,CAAf;;AAEA,UAAI;AACF,aAAKC,KAAL,CAAWC,OAAX,CAAmB,aAAnB,EAAkCJ,OAAlC,EAA2CQ,MAA3C;AACA,aAAKL,KAAL,CAAWC,OAAX,CAAmB,iBAAnB,EAAsCJ,OAAtC,EAA+CQ,MAA/C;AACD,OAHD,CAIA,OAAOH,KAAP,EAAc;AACZJ,eAAOK,IAAP,CAAY,2CAAZ,EAAyDD,KAAzD;AACD;;AAED,aAAO,kBAAQI,MAAR,CAAeD,MAAf,CAAP;AACD;;;;AApFD;;;6BAGgB;AACd,aAAO,IAAIT,uBAAJ,CAA4B,EAACI,OAAO,IAAR,EAA5B,CAAP;AACD;;;EANkDQ,qB,GAVrD;;;;kBAUqBZ,uB","file":"request-event.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {get} from 'lodash';\nimport {Interceptor} from '@webex/http-core';\n\n/**\n * @class\n */\nexport default class RequestEventInterceptor extends Interceptor {\n  /**\n   * @returns {RequestEventInterceptor}\n   */\n  static create() {\n    return new RequestEventInterceptor({webex: this});\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    const logger = get(this, 'webex.logger', console);\n\n    try {\n      this.webex.trigger('request:start', options);\n    }\n    catch (error) {\n      logger.warn('event handler for request:start failed ', error);\n    }\n\n    return Promise.resolve(options);\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @param {Error} reason\n   * @returns {Object}\n   */\n  onRequestError(options, reason) {\n    // We need to do the normal onRequest logging, but then log how the request\n    // failed since the response logger won't be called.\n    const logger = get(this, 'webex.logger', console);\n\n    try {\n      this.webex.trigger('request:end', options, reason);\n      this.webex.trigger('request:failure', options, reason);\n    }\n    catch (error) {\n      logger.warn('event handler for request:end failed ', error);\n    }\n\n    return Promise.reject(reason);\n  }\n\n  /**\n   * @see Interceptor#onResponse\n   * @param {Object} options\n   * @param {HttpResponse} response\n   * @returns {Object}\n   */\n  onResponse(options, response) {\n    const logger = get(this, 'webex.logger', console);\n\n    try {\n      this.webex.trigger('request:success', response.options, response);\n    }\n    catch (error) {\n      logger.warn('event handler for request:success failed ', error);\n    }\n\n    return Promise.resolve(response);\n  }\n\n  /**\n   * @see Interceptor#onResponseError\n   * @param {Object} options\n   * @param {Error} reason\n   * @returns {Object}\n   */\n  onResponseError(options, reason) {\n    const logger = get(this, 'webex.logger', console);\n\n    try {\n      this.webex.trigger('request:end', options, reason);\n      this.webex.trigger('request:failure', options, reason);\n    }\n    catch (error) {\n      logger.warn('event handler for request:failure failed ', error);\n    }\n\n    return Promise.reject(reason);\n  }\n}\n"]}