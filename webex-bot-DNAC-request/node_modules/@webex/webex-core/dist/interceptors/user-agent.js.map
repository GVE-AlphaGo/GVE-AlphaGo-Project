{"version":3,"sources":["user-agent.js"],"names":["strings","UserAgentInterceptor","options","appName","appVersion","set","inBrowser","headers","get","webex","Interceptor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AACA;;;;AALA;;;;AAQA,IAAMA,UAAU,uBAAhB;;AAEA;;;;;;;;;;;;;;;;;;;;IAmBqBC,oB;;;AACnB;;;;;;AAMA,kCAA0B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAAA;;AACxB,QAAMC,UAAU,mBAAID,OAAJ,EAAa,sBAAb,CAAhB;AACA,QAAME,aAAa,mBAAIF,OAAJ,EAAa,yBAAb,KAA2C,KAA9D;;AAFwB,kKAIlBA,OAJkB;;AAKxB,QAAIC,OAAJ,EAAa;AACXH,cAAQK,GAAR,QAAqBF,OAArB,SAAgCC,UAAhC;AACD,KAFD,MAGK;AACHJ,cAAQK,GAAR,QAAkB,kBAAlB,EADG,CACoC;AACxC;AAVuB;AAWzB;;AAED;;;;;;;;;AAOA;;;;;8BAKUH,O,EAAS;AACjB;AACA,UAAII,iBAAJ,EAAe;AACb,eAAOJ,OAAP;AACD;;AAEDA,cAAQK,OAAR,GAAkBL,QAAQK,OAAR,IAAmB,EAArC;;AAEA,UAAI,gBAAgBL,QAAQK,OAAxB,IAAmCL,QAAQK,OAAR,CAAgB,kBAAhB,CAAvC,EAA4E;AAC1E,eAAOL,OAAP;AACD;;AAEDA,cAAQK,OAAR,CAAgB,YAAhB,IAAgCP,QAAQQ,GAAR,CAAY,IAAZ,CAAhC;;AAEA,aAAON,OAAP;AACD;;;6BAxBe;AACd,aAAO,IAAID,oBAAJ,CAAyB,EAACQ,OAAO,IAAR,EAAzB,CAAP;AACD;;;EAzB+CC,qB;;kBAA7BT,oB","file":"user-agent.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {inBrowser} from '@webex/common';\nimport {Interceptor} from '@webex/http-core';\nimport {get} from 'lodash';\n\nconst strings = new WeakMap();\n\n/**\n * Sets a 'user-agent' header on all requests if one is not present.\n * Defaults to '@webex/http-core' though a custom user-agent can be set\n * using the appName and appVersion configuration. e.g.\n *\n *   webex = WebexSdk.init({\n *     credentials: {\n *       supertoken: superToken\n *     },\n *     config: {\n *       credentials: {\n *         client_id,\n *         client_secret\n *       },\n *       appName: 'custom-user-agent',\n *       appVersion: '1.0',\n *     }\n *   });\n */\nexport default class UserAgentInterceptor extends Interceptor {\n  /**\n   * @param {Object} [options={}]\n   * @param {WebexCore} [options.webex]\n   * @private\n   * @returns {UserAgentInterceptor}\n   */\n  constructor(options = {}) {\n    const appName = get(options, 'webex.config.appName');\n    const appVersion = get(options, 'webex.config.appVersion') || '0.0';\n\n    super(options);\n    if (appName) {\n      strings.set(this, `${appName}/${appVersion}`);\n    }\n    else {\n      strings.set(this, '@webex/http-core'); // Using the traditional default from http-core\n    }\n  }\n\n  /**\n   * @returns {UserAgentInterceptor}\n   */\n  static create() {\n    return new UserAgentInterceptor({webex: this});\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    // Do not set a custom user-agent for browsers\n    if (inBrowser) {\n      return options;\n    }\n\n    options.headers = options.headers || {};\n\n    if ('user-agent' in options.headers && options.headers['spark-user-agent']) {\n      return options;\n    }\n\n    options.headers['user-agent'] = strings.get(this);\n\n    return options;\n  }\n}\n"]}