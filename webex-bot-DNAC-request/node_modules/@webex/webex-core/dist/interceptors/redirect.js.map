{"version":3,"sources":["redirect.js"],"names":["requestHeaderName","responseHeaderName","LOCUS_REDIRECT_ERROR","RedirectInterceptor","options","uri","includes","webex","config","credentials","samlUrl","tokenUrl","authorizeUrl","headers","$redirectCount","response","maxAppLevelRedirects","reject","Error","request","body","errorCode","location","qs","newUrl","split","maxLocusRedirects","Interceptor"],"mappings":"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","file":"redirect.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {clone} from 'lodash';\nimport {Interceptor} from '@webex/http-core';\n\nconst requestHeaderName = 'cisco-no-http-redirect';\nconst responseHeaderName = 'cisco-location';\nconst LOCUS_REDIRECT_ERROR = 2000002;\n\n/**\n * @class\n */\nexport default class RedirectInterceptor extends Interceptor {\n  /**\n   * @returns {RedirectInterceptor}\n   */\n  static create() {\n    return new RedirectInterceptor({webex: this});\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    if (options && options.uri && typeof options.uri === 'string') {\n      if (options.uri.includes('https://idbroker') ||\n        options.uri.includes(this.webex.config.credentials.samlUrl) ||\n        options.uri.includes(this.webex.config.credentials.tokenUrl) ||\n        options.uri.includes(this.webex.config.credentials.authorizeUrl)) {\n        return options;\n      }\n    }\n\n    // If cisco-no-http-redirect is already set, don't overwrite it\n    if (requestHeaderName in options.headers) {\n      // If cisco-no-http-redirect is set to null, false, or undefined, delete\n      // it to prevent a CORS preflight.\n      if (!options.headers[requestHeaderName]) {\n        Reflect.deleteProperty(options.headers, requestHeaderName);\n      }\n\n      return options;\n    }\n    options.headers[requestHeaderName] = true;\n    options.$redirectCount = options.$redirectCount || 0;\n\n    return options;\n  }\n\n  /**\n   * @see Interceptor#onResponse\n   * @param {Object} options\n   * @param {HttpResponse} response\n   * @returns {Object}\n   */\n  onResponse(options, response) {\n    /* eslint-disable no-else-return */\n    if (response.headers && response.headers[responseHeaderName]) {\n      options = clone(options);\n      options.uri = response.headers[responseHeaderName];\n      options.$redirectCount += 1;\n      if (options.$redirectCount > this.webex.config.maxAppLevelRedirects) {\n        return Promise.reject(new Error('Maximum redirects exceeded'));\n      }\n\n      return this.webex.request(options);\n    }\n    else if (response.headers &&\n      response.body &&\n      response.body.errorCode === LOCUS_REDIRECT_ERROR &&\n      response.body.location) {\n      options = clone(options);\n      if (response.options && response.options.qs) { // for POST requests\n        const newUrl = response.body.location.split('?');\n\n        options.uri = newUrl[0]; // params are already present in the qs\n      }\n      else { // for GET requests\n        options.uri = response.body.location;\n      }\n      options.$redirectCount += 1;\n      if (options.$redirectCount > this.webex.config.maxLocusRedirects) {\n        return Promise.reject(new Error('Maximum redirects exceeded'));\n      }\n\n      return this.webex.request(options);\n    }\n    /* eslint-enable no-else-return */\n\n    return response;\n  }\n}\n"]}