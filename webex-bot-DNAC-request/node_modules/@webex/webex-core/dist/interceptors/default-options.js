'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _httpCore = require('@webex/http-core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Allows the user of the SDK to set default options that apply every http request made by the SDK
 * For example a default timeout could be set for all requests like this :
 *
 *   webex = WebexSdk.init({
 *     credentials: {
 *       supertoken: superToken
 *     },
 *     config: {
 *       credentials: {
 *         client_id,
 *         client_secret
 *       },
 *       defaultRequestOptions: {
 *         timeout: 15000
 *       }
 *     }
 *   });
 */
var DefaultOptionsInterceptor = function (_Interceptor) {
  (0, _inherits3.default)(DefaultOptionsInterceptor, _Interceptor);

  function DefaultOptionsInterceptor() {
    (0, _classCallCheck3.default)(this, DefaultOptionsInterceptor);
    return (0, _possibleConstructorReturn3.default)(this, (DefaultOptionsInterceptor.__proto__ || (0, _getPrototypeOf2.default)(DefaultOptionsInterceptor)).apply(this, arguments));
  }

  (0, _createClass3.default)(DefaultOptionsInterceptor, [{
    key: 'onRequest',


    /**
     * @see Interceptor#onRequest
     * @param {Object} options
     * @returns {Object}
     */
    value: function onRequest(options) {
      var defaultOptions = this.webex.config.defaultRequestOptions;


      if (!defaultOptions) {
        return options;
      }

      (0, _keys2.default)(defaultOptions).forEach(function (key) {
        // don't override any existing option properties
        if (!(0, _keys2.default)(options).includes(key)) {
          options[key] = defaultOptions[key];
        }
      });

      return options;
    }
  }], [{
    key: 'create',

    /**
     * @returns {DefaultOptionsInterceptor}
     */
    value: function create() {
      return new DefaultOptionsInterceptor({ webex: this });
    }
  }]);
  return DefaultOptionsInterceptor;
}(_httpCore.Interceptor); /*!
                           * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
                           */

exports.default = DefaultOptionsInterceptor;
//# sourceMappingURL=default-options.js.map
