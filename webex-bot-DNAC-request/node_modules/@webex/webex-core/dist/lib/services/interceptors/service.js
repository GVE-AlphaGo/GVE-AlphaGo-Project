'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _httpCore = require('@webex/http-core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var trailingSlashes = /(?:^\/)|(?:\/$)/;

/**
 * @class
 */
/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */

var ServiceInterceptor = function (_Interceptor) {
  (0, _inherits3.default)(ServiceInterceptor, _Interceptor);

  function ServiceInterceptor() {
    (0, _classCallCheck3.default)(this, ServiceInterceptor);
    return (0, _possibleConstructorReturn3.default)(this, (ServiceInterceptor.__proto__ || (0, _getPrototypeOf2.default)(ServiceInterceptor)).apply(this, arguments));
  }

  (0, _createClass3.default)(ServiceInterceptor, [{
    key: 'onRequest',


    /* eslint-disable no-param-reassign */
    /**
     * @see Interceptor#onRequest
     * @param {Object} options - The request PTO.
     * @returns {Object} - The mutated request PTO.
     */
    value: function onRequest(options) {
      var _this2 = this;

      // Validate that the PTO includes a uri property.
      if (options.uri) {
        return options;
      }

      // Normalize and validate the PTO.
      this.normalizeOptions(options);
      this.validateOptions(options);

      // Destructure commonly referenced namespaces.
      var services = this.webex.internal.services;
      var service = options.service,
          resource = options.resource;

      // Attempt to collect the service url.

      return services.waitForService({ name: service }).then(function (serviceUrl) {
        // Generate the combined service url and resource.
        options.uri = _this2.generateUri(serviceUrl, resource);

        return options;
      }).catch(function () {
        return _promise2.default.reject(new Error('service-interceptor: \'' + service + '\' is not a known service'));
      });
    }

    /* eslint-disable class-methods-use-this */
    /**
     * Generate a usable request uri string from a service url and a resouce.
     *
     * @param {string} serviceUrl - The service url.
     * @param {string} resource - The resouce to be appended to the service url.
     * @returns {string} - The combined service url and resource.
     */

  }, {
    key: 'generateUri',
    value: function generateUri(serviceUrl, resource) {
      var formattedService = serviceUrl.replace(trailingSlashes, '');
      var formattedResource = resource.replace(trailingSlashes, '');

      return formattedService + '/' + formattedResource;
    }

    /**
     * Normalizes request options relative to service identification.
     *
     * @param {Object} options - The request PTO.
     * @returns {Object} - The mutated request PTO.
     */

  }, {
    key: 'normalizeOptions',
    value: function normalizeOptions(options) {
      // Validate if the api property is used.
      if (options.api) {
        // Assign the service property the value of the api property if necessary.
        options.service = options.service || options.api;
        delete options.api;
      }
    }

    /**
     * Validates that the appropriate options for this interceptor are present.
     *
     * @param {Object} options - The request PTO.
     * @returns {Object} - The mutated request PTO.
     */

  }, {
    key: 'validateOptions',
    value: function validateOptions(options) {
      if (!options.resource) {
        throw new Error('a `resource` parameter is required');
      }

      if (!options.service) {
        throw new Error('a valid \'service\' parameter is required');
      }
    }
    /* eslint-enable class-methods-use-this no-param-reassign */

  }], [{
    key: 'create',

    /**
     * @returns {ServiceInterceptor}
     */
    value: function create() {
      /* eslint no-invalid-this: [0] */
      return new ServiceInterceptor({ webex: this });
    }
  }]);
  return ServiceInterceptor;
}(_httpCore.Interceptor);

exports.default = ServiceInterceptor;
//# sourceMappingURL=service.js.map
