{"version":3,"sources":["service.js"],"names":["trailingSlashes","ServiceInterceptor","options","uri","normalizeOptions","validateOptions","services","webex","internal","service","resource","waitForService","name","then","serviceUrl","generateUri","catch","reject","Error","formattedService","replace","formattedResource","api","Interceptor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;;;AAEA,IAAMA,kBAAkB,iBAAxB;;AAEA;;;AARA;;;;IAWqBC,kB;;;;;;;;;;;;AASnB;AACA;;;;;8BAKUC,O,EAAS;AAAA;;AACjB;AACA,UAAIA,QAAQC,GAAZ,EAAiB;AACf,eAAOD,OAAP;AACD;;AAED;AACA,WAAKE,gBAAL,CAAsBF,OAAtB;AACA,WAAKG,eAAL,CAAqBH,OAArB;;AAEA;AAViB,UAWVI,QAXU,GAWE,KAAKC,KAAL,CAAWC,QAXb,CAWVF,QAXU;AAAA,UAYVG,OAZU,GAYWP,OAZX,CAYVO,OAZU;AAAA,UAYDC,QAZC,GAYWR,OAZX,CAYDQ,QAZC;;AAcjB;;AACA,aAAOJ,SAASK,cAAT,CAAwB,EAACC,MAAMH,OAAP,EAAxB,EACJI,IADI,CACC,UAACC,UAAD,EAAgB;AACpB;AACAZ,gBAAQC,GAAR,GAAc,OAAKY,WAAL,CAAiBD,UAAjB,EAA6BJ,QAA7B,CAAd;;AAEA,eAAOR,OAAP;AACD,OANI,EAOJc,KAPI,CAOE;AAAA,eAAM,kBAAQC,MAAR,CAAe,IAAIC,KAAJ,6BACDT,OADC,+BAAf,CAAN;AAAA,OAPF,CAAP;AAUD;;AAED;AACA;;;;;;;;;;gCAOYK,U,EAAYJ,Q,EAAU;AAChC,UAAMS,mBAAmBL,WAAWM,OAAX,CAAmBpB,eAAnB,EAAoC,EAApC,CAAzB;AACA,UAAMqB,oBAAoBX,SAASU,OAAT,CAAiBpB,eAAjB,EAAkC,EAAlC,CAA1B;;AAEA,aAAUmB,gBAAV,SAA8BE,iBAA9B;AACD;;AAED;;;;;;;;;qCAMiBnB,O,EAAS;AACxB;AACA,UAAIA,QAAQoB,GAAZ,EAAiB;AACf;AACApB,gBAAQO,OAAR,GAAkBP,QAAQO,OAAR,IAAmBP,QAAQoB,GAA7C;AACA,eAAOpB,QAAQoB,GAAf;AACD;AACF;;AAED;;;;;;;;;oCAMgBpB,O,EAAS;AACvB,UAAI,CAACA,QAAQQ,QAAb,EAAuB;AACrB,cAAM,IAAIQ,KAAJ,CAAU,oCAAV,CAAN;AACD;;AAED,UAAI,CAAChB,QAAQO,OAAb,EAAsB;AACpB,cAAM,IAAIS,KAAJ,CAAU,2CAAV,CAAN;AACD;AACF;AACD;;;;;AAtFA;;;6BAGgB;AACd;AACA,aAAO,IAAIjB,kBAAJ,CAAuB,EAACM,OAAO,IAAR,EAAvB,CAAP;AACD;;;EAP6CgB,qB;;kBAA3BtB,kB","file":"service.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {Interceptor} from '@webex/http-core';\n\nconst trailingSlashes = /(?:^\\/)|(?:\\/$)/;\n\n/**\n * @class\n */\nexport default class ServiceInterceptor extends Interceptor {\n  /**\n   * @returns {ServiceInterceptor}\n   */\n  static create() {\n    /* eslint no-invalid-this: [0] */\n    return new ServiceInterceptor({webex: this});\n  }\n\n  /* eslint-disable no-param-reassign */\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options - The request PTO.\n   * @returns {Object} - The mutated request PTO.\n   */\n  onRequest(options) {\n    // Validate that the PTO includes a uri property.\n    if (options.uri) {\n      return options;\n    }\n\n    // Normalize and validate the PTO.\n    this.normalizeOptions(options);\n    this.validateOptions(options);\n\n    // Destructure commonly referenced namespaces.\n    const {services} = this.webex.internal;\n    const {service, resource} = options;\n\n    // Attempt to collect the service url.\n    return services.waitForService({name: service})\n      .then((serviceUrl) => {\n        // Generate the combined service url and resource.\n        options.uri = this.generateUri(serviceUrl, resource);\n\n        return options;\n      })\n      .catch(() => Promise.reject(new Error(\n        `service-interceptor: '${service}' is not a known service`\n      )));\n  }\n\n  /* eslint-disable class-methods-use-this */\n  /**\n   * Generate a usable request uri string from a service url and a resouce.\n   *\n   * @param {string} serviceUrl - The service url.\n   * @param {string} resource - The resouce to be appended to the service url.\n   * @returns {string} - The combined service url and resource.\n   */\n  generateUri(serviceUrl, resource) {\n    const formattedService = serviceUrl.replace(trailingSlashes, '');\n    const formattedResource = resource.replace(trailingSlashes, '');\n\n    return `${formattedService}/${formattedResource}`;\n  }\n\n  /**\n   * Normalizes request options relative to service identification.\n   *\n   * @param {Object} options - The request PTO.\n   * @returns {Object} - The mutated request PTO.\n   */\n  normalizeOptions(options) {\n    // Validate if the api property is used.\n    if (options.api) {\n      // Assign the service property the value of the api property if necessary.\n      options.service = options.service || options.api;\n      delete options.api;\n    }\n  }\n\n  /**\n   * Validates that the appropriate options for this interceptor are present.\n   *\n   * @param {Object} options - The request PTO.\n   * @returns {Object} - The mutated request PTO.\n   */\n  validateOptions(options) {\n    if (!options.resource) {\n      throw new Error('a `resource` parameter is required');\n    }\n\n    if (!options.service) {\n      throw new Error('a valid \\'service\\' parameter is required');\n    }\n  }\n  /* eslint-enable class-methods-use-this no-param-reassign */\n}\n"]}