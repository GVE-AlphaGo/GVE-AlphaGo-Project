'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _weakMap = require('babel-runtime/core-js/weak-map');

var _weakMap2 = _interopRequireDefault(_weakMap);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _sha = require('crypto-js/sha256');

var _sha2 = _interopRequireDefault(_sha);

var _webexPlugin = require('../webex-plugin');

var _webexPlugin2 = _interopRequireDefault(_webexPlugin);

var _serviceCatalog = require('./service-catalog');

var _serviceCatalog2 = _interopRequireDefault(_serviceCatalog);

var _serviceRegistry = require('./service-registry');

var _serviceRegistry2 = _interopRequireDefault(_serviceRegistry);

var _serviceState = require('./service-state');

var _serviceState2 = _interopRequireDefault(_serviceState);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable no-underscore-dangle */
/**
 * @class
 */
var Services = _webexPlugin2.default.extend({
  namespace: 'Services',

  /**
   * The {@link WeakMap} of {@link ServiceRegistry} class instances that are
   * keyed with WebexCore instances.
   *
   * @instance
   * @type {WeakMap<WebexCore, ServiceRegistry>}
   * @private
   * @memberof Services
   */
  registries: new _weakMap2.default(),

  /**
   * The {@link WeakMap} of {@link ServiceState} class instances that are
   * keyed with WebexCore instances.
   *
   * @instance
   * @type {WeakMap<WebexCore, ServiceState>}
   * @private
   * @memberof Services
   */
  states: new _weakMap2.default(),

  props: {
    validateDomains: ['boolean', false, true]
  },

  _catalogs: new _weakMap2.default(),

  /**
   * Get the registry associated with this webex instance.
   *
   * @private
   * @memberof Services
   * @returns {ServiceRegistry} - The associated {@link ServiceRegistry}.
   */
  getRegistry: function getRegistry() {
    return this.registries.get(this.webex);
  },


  /**
   * Get the state associated with this webex instance.
   *
   * @private
   * @memberof Services
   * @returns {ServiceState} - The associated {@link ServiceState}.
   */
  getState: function getState() {
    return this.states.get(this.webex);
  },


  /**
   * @private
   * Get the current catalog based on the assocaited
   * webex instance.
   * @returns {ServiceCatalog}
   */
  _getCatalog: function _getCatalog() {
    return this._catalogs.get(this.webex);
  },


  /**
   * Get a service url from the current services list by name
   * from the associated instance catalog.
   * @param {string} name
   * @param {boolean} [priorityHost]
   * @param {string} [serviceGroup]
   * @returns {string|undefined}
   */
  get: function get(name, priorityHost, serviceGroup) {
    var catalog = this._getCatalog();

    return catalog.get(name, priorityHost, serviceGroup);
  },


  /**
   * Determine if the catalog contains a specific service
   *
   * @param {string} serviceName - The service name to validate.
   * @returns {boolean} - True if the service exists.
   */
  hasService: function hasService(serviceName) {
    return !!this.get(serviceName);
  },


  /**
   * Determine if a whilelist exists in the service catalog.
   *
   * @returns {boolean} - True if a allowed domains list exists.
   */
  hasAllowedDomains: function hasAllowedDomains() {
    var catalog = this._getCatalog();

    return catalog.getAllowedDomains().length > 0;
  },


  /**
   * Generate a service catalog as an object from
   * the associated instance catalog.
   * @param {boolean} [priorityHost] - use highest priority host if set to `true`
   * @param {string} [serviceGroup]
   * @returns {Record<string, string>}
   */
  list: function list(priorityHost, serviceGroup) {
    var catalog = this._getCatalog();

    return catalog.list(priorityHost, serviceGroup);
  },


  /**
   * Mark a priority host service url as failed.
   * This will mark the host associated with the
   * `ServiceUrl` to be removed from the its
   * respective host array, and then return the next
   * viable host from the `ServiceUrls` host array,
   * or the `ServiceUrls` default url if no other priority
   * hosts are available, or if `noPriorityHosts` is set to
   * `true`.
   * @param {string} url
   * @param {boolean} noPriorityHosts
   * @returns {string}
   */
  markFailedUrl: function markFailedUrl(url, noPriorityHosts) {
    var catalog = this._getCatalog();

    return catalog.markFailedUrl(url, noPriorityHosts);
  },


  /**
   * Update a list of `serviceUrls` to the most current
   * catalog via the defined `discoveryUrl` then returns the current
   * list of services.
   * @param {object} [param]
   * @param {string} [param.from] - This accepts `limited` or `signin`
   * @param {object} [param.query] - This accepts `email`, `orgId` or `userId` key values
   * @param {string} [param.query.email] - must be a standard-format email
   * @param {string} [param.query.orgId] - must be an organization id
   * @param {string} [param.query.userId] - must be a user id
   * @param {string} [param.token] - used for signin catalog
   * @returns {Promise<object>}
   */
  updateServices: function updateServices() {
    var _this = this;

    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        from = _ref.from,
        query = _ref.query,
        token = _ref.token;

    var catalog = this._getCatalog();
    var formattedQuery = void 0,
        serviceGroup = void 0;

    // map catalog name to service group name.
    switch (from) {
      case 'limited':
        serviceGroup = 'preauth';break;
      case 'signin':
        serviceGroup = 'signin';break;
      default:
        serviceGroup = 'postauth';break;
    }

    // confirm catalog update for group is not in progress.
    if (catalog.status[serviceGroup].collecting) {
      return this.waitForCatalog(serviceGroup);
    }

    catalog.status[serviceGroup].collecting = true;

    if (serviceGroup === 'preauth') {
      var queryKey = query && (0, _keys2.default)(query)[0];

      if (!['email', 'emailhash', 'userId', 'orgId', 'mode'].includes(queryKey)) {
        return _promise2.default.reject(new Error('a query param of email, emailhash, userId, orgId, or mode is required'));
      }
    }
    // encode email when query key is email
    if (serviceGroup === 'preauth' || serviceGroup === 'signin') {
      var _queryKey = (0, _keys2.default)(query)[0];

      formattedQuery = {};

      if (_queryKey === 'email') {
        formattedQuery.emailhash = (0, _sha2.default)(query.email).toString();
      } else {
        formattedQuery[_queryKey] = query[_queryKey];
      }
    }

    return this._fetchNewServiceHostmap({
      from: from,
      token: token,
      query: formattedQuery
    }).then(function (serviceHostMap) {
      catalog.updateServiceUrls(serviceGroup, serviceHostMap);
      _this.updateCredentialsConfig();
      catalog.status[serviceGroup].collecting = false;
    }).catch(function (error) {
      catalog.status[serviceGroup].collecting = false;

      return _promise2.default.reject(error);
    });
  },


  /**
   * User validation parameter transfer object for {@link validateUser}.
   * @param {object} ValidateUserPTO
   * @property {string} ValidateUserPTO.email - The email of the user.
   * @property {string} [ValidateUserPTO.reqId] - The activation requester.
   */

  /**
   * User validation return transfer object for {@link validateUser}.
   * @param {object} ValidateUserRTO
   * @property {boolean} ValidateUserRTO.activated - If the user is activated.
   * @property {boolean} ValidateUserRTO.exists - If the user exists.
   * @property {string} ValidateUserRTO.details - A descriptive status message.
   * @property {object} ValidateUserRTO.user - **Atlas** service user object.
   */

  /**
   * Validate if a user is activated and update the service catalogs as needed
   * based on the user's activation status.
   *
   * @param {ValidateUserPTO} - The parameter transfer object.
   * @returns {ValidateUserRTO} - The return transfer object.
   */
  validateUser: function validateUser(_ref2) {
    var _this2 = this;

    var email = _ref2.email,
        _ref2$reqId = _ref2.reqId,
        reqId = _ref2$reqId === undefined ? 'WEBCLIENT' : _ref2$reqId;

    this.logger.info('services: validating a user');

    // Validate that an email parameter key was provided.
    if (!email) {
      return _promise2.default.reject(new Error('`email` is required'));
    }

    // Destructure the credentials object.
    var canAuthorize = this.webex.credentials.canAuthorize;

    // Validate that the user is already authorized.

    if (canAuthorize) {
      return this.updateServices().then(function () {
        return _this2.webex.credentials.getUserToken();
      }).then(function (token) {
        return _this2.sendUserActivation({
          email: email,
          reqId: reqId,
          token: token.toString()
        });
      }).then(function (userObj) {
        return {
          activated: true,
          exists: true,
          details: 'user is authorized via a user token',
          user: userObj
        };
      });
    }

    // Destructure the client authorization details.
    /* eslint-disable camelcase */
    var _webex$credentials$co = this.webex.credentials.config,
        client_id = _webex$credentials$co.client_id,
        client_secret = _webex$credentials$co.client_secret;

    // Validate that client authentication details exist.

    if (!client_id || !client_secret) {
      return _promise2.default.reject(new Error('client authentication details are not available'));
    }
    /* eslint-enable camelcase */

    // Declare a class-memeber-scoped token for usage within the promise chain.
    var token = void 0;

    // Begin client authentication user validation.
    return this.collectPreauthCatalog({ email: email }).then(function () {
      // Retrieve the service url from the updated catalog. This is required
      // since `WebexCore` is usually not fully initialized at the time this
      // request completes.
      var idbrokerService = _this2.get('idbroker', true);

      // Collect the client auth token.
      return _this2.webex.credentials.getClientToken({
        uri: idbrokerService + 'idb/oauth2/v1/access_token',
        scope: 'webexsquare:admin webexsquare:get_conversation Identity:SCIM'
      });
    }).then(function (tokenObj) {
      // Generate the token string.
      token = tokenObj.toString();

      // Collect the signin catalog using the client auth information.
      return _this2.collectSigninCatalog({ email: email, token: token });
    })
    // Validate if collecting the signin catalog failed and populate the RTO
    // with the appropriate content.
    .catch(function (error) {
      return {
        exists: error.name !== 'NotFound',
        activated: false,
        details: error.name !== 'NotFound' ? 'user exists but is not activated' : 'user does not exist and is not activated'
      };
    })
    // Validate if the previous promise resolved with an RTO and populate the
    // new RTO accordingly.
    .then(function (rto) {
      return _promise2.default.all([rto || {
        activated: true,
        exists: true,
        details: 'user exists and is activated'
      }, _this2.sendUserActivation({ email: email, reqId: reqId, token: token })]);
    }).then(function (_ref3) {
      var _ref4 = (0, _slicedToArray3.default)(_ref3, 2),
          rto = _ref4[0],
          user = _ref4[1];

      return (0, _extends3.default)({}, rto, { user: user });
    }).catch(function (error) {
      var response = {
        statusCode: error.statusCode,
        responseText: error.body.message,
        body: error.body
      };

      return _promise2.default.reject(response);
    });
  },


  /**
   * User activation parameter transfer object for {@link sendUserActivation}.
   * @typedef {object} SendUserActivationPTO
   * @property {string} SendUserActivationPTO.email - The email of the user.
   * @property {string} SendUserActivationPTO.reqId - The activation requester.
   * @property {string} SendUserActivationPTO.token - The client auth token.
   */

  /**
   * Send a request to activate a user using a client token.
   *
   * @param {SendUserActivationPTO} - The Parameter transfer object.
   * @returns {AtlasDTO} - The DTO returned from the **Atlas** service.
   */
  sendUserActivation: function sendUserActivation(_ref5) {
    var email = _ref5.email,
        reqId = _ref5.reqId,
        token = _ref5.token;

    this.logger.info('services: sending user activation request');

    // Send the user activation request to the **Atlas** service.
    return this.request({
      service: 'atlas',
      resource: 'users/activations',
      method: 'POST',
      headers: {
        accept: 'application/json',
        authorization: token,
        'x-prelogin-userid': undefined
      },
      body: { email: email, reqId: reqId },
      shouldRefreshAccessToken: false
    })
    // On success, return the **Atlas** user object.
    .then(function (_ref6) {
      var body = _ref6.body;
      return body;
    })
    // On failure, reject with error from **Atlas**.
    .catch(function (error) {
      return _promise2.default.reject(error);
    });
  },


  /**
   * simplified method to update the preauth catalog via email
   * @param {object} param
   * @param {string} param.email - must be a standard-format email
   * @returns {Promise<void>}
   */
  collectPreauthCatalog: function collectPreauthCatalog() {
    var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        email = _ref7.email;

    if (!email) {
      return this.updateServices({ from: 'limited', query: { mode: 'DEFAULT_BY_PROXIMITY' } });
    }

    return this.updateServices({ from: 'limited', query: { email: email } });
  },


  /**
   * simplified method to update the signin catalog via email and token
   * @param {object} param
   * @param {string} param.email - must be a standard-format email
   * @param {string} param.token - must be a client token
   * @returns {Promise<void>}
   */
  collectSigninCatalog: function collectSigninCatalog() {
    var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        email = _ref8.email,
        token = _ref8.token;

    if (!email) {
      return _promise2.default.reject(new Error('`email` is required'));
    }
    if (!token) {
      return _promise2.default.reject(new Error('`token` is required'));
    }

    return this.updateServices({ from: 'signin', query: { email: email }, token: token });
  },


  /**
   * Updates credentials config to utilize u2c catalog
   * urls.
   * @returns {void}
   */
  updateCredentialsConfig: function updateCredentialsConfig() {
    var _list = this.list(true),
        idbroker = _list.idbroker,
        identity = _list.identity;

    if (idbroker && identity) {
      this.webex.setConfig({
        credentials: {
          idbroker: {
            url: idbroker.slice(0, -1) // remove trailing slash
          },
          identity: {
            url: identity.slice(0, -1) // remove trailing slash
          }
        }
      });
    }
  },


  /**
   * Wait until the service catalog is available,
   * or reject afte ra timeout of 60 seconds.
   * @param {string} serviceGroup
   * @param {number} [timeout] - in seconds
   * @returns {Promise<void>}
   */
  waitForCatalog: function waitForCatalog(serviceGroup, timeout) {
    var catalog = this._getCatalog();

    if (serviceGroup === 'postauth' && this.webex.credentials.canAuthorize && !catalog.status.postauth.collecting) {
      return this.updateServices();
    }

    return catalog.waitForCatalog(serviceGroup, timeout);
  },


  /**
   * Service waiting parameter transfer object for {@link waitForService}.
   *
   * @typedef {object} WaitForServicePTO
   * @property {string} [WaitForServicePTO.name] - The service name.
   * @property {string} [WaitForServicePTO.url] - The service url.
   * @property {string} [WaitForServicePTO.timeout] - wait duration in seconds.
   */

  /**
   * Wait until the service has been ammended to any service catalog. This
   * method prioritizes the service name over the service url when searching.
   *
   * @param {WaitForServicePTO} - The parameter transfer object.
   * @returns {Promise<string>} - Resolves to the priority host of a service.
   */
  waitForService: function waitForService(_ref9) {
    var _this3 = this;

    var name = _ref9.name,
        _ref9$timeout = _ref9.timeout,
        timeout = _ref9$timeout === undefined ? 5 : _ref9$timeout,
        url = _ref9.url;

    var priorityUrl = this.get(name, true);
    var priorityUrlObj = this.getServiceFromUrl(url);

    if (priorityUrl || priorityUrlObj) {
      return _promise2.default.resolve(priorityUrl || priorityUrlObj.priorityUrl);
    }

    var catalog = this._getCatalog();
    var groupsToCheck = ['limited', 'signin', 'postauth'];

    return new _promise2.default(function (resolve, reject) {
      var checkCatalog = function checkCatalog(catalogGroup) {
        return catalog.waitForCatalog(catalogGroup, timeout).then(function () {
          var scopedPriorityUrl = _this3.get(name, true);
          var scopedPrioriryUrlObj = _this3.getServiceFromUrl(url);

          if (scopedPriorityUrl || scopedPrioriryUrlObj) {
            resolve(scopedPriorityUrl || scopedPrioriryUrlObj.priorityUrl);
          }
        }).catch(function () {
          return undefined;
        });
      };

      _promise2.default.all(groupsToCheck.map(function (group) {
        return checkCatalog(group);
      })).then(function () {
        reject(new Error('services: service \'' + name + '\' was not found after waiting'));
      });
    });
  },


  /**
   * @private
   * Organize a received hostmap from a service
   * catalog endpoint.
   * @param {object} serviceHostmap
   * @returns {object}
   */
  _formatReceivedHostmap: function _formatReceivedHostmap(serviceHostmap) {
    // map the host catalog items to a formatted hostmap
    var formattedHostmap = (0, _keys2.default)(serviceHostmap.hostCatalog).reduce(function (accumulator, key) {
      var _serviceItem$hosts;

      if (serviceHostmap.hostCatalog[key].length === 0) {
        return accumulator;
      }

      var serviceName = serviceHostmap.hostCatalog[key][0].id.split(':')[3];
      var defaultUrl = serviceHostmap.serviceLinks[serviceName];

      var serviceItem = accumulator.find(function (item) {
        return item.name === serviceName;
      });

      if (!serviceItem) {
        serviceItem = {
          name: serviceName,
          defaultUrl: defaultUrl,
          defaultHost: _url2.default.parse(defaultUrl).hostname,
          hosts: []
        };

        accumulator.push(serviceItem);
      }

      (_serviceItem$hosts = serviceItem.hosts).push.apply(_serviceItem$hosts, [
      // map the default key as a low priority default for cluster matching
      {
        host: key,
        ttl: -1,
        priority: 10,
        id: serviceHostmap.hostCatalog[key][0].id,
        homeCluster: serviceItem.defaultHost === key
      }].concat((0, _toConsumableArray3.default)(serviceHostmap.hostCatalog[key].map(function (host) {
        return (0, _extends3.default)({}, host, {
          homeCluster: serviceItem.defaultHost === key
        });
      }))));

      return accumulator;
    }, []);

    // append service links that do not exist in the host catalog
    (0, _keys2.default)(serviceHostmap.serviceLinks).forEach(function (key) {
      var service = formattedHostmap.find(function (item) {
        return item.name === key;
      });

      if (!service) {
        formattedHostmap.push({
          name: key,
          defaultUrl: serviceHostmap.serviceLinks[key],
          defaultHost: _url2.default.parse(serviceHostmap.serviceLinks[key]).hostname,
          hosts: []
        });
      }
    });

    return formattedHostmap;
  },


  /**
   * Get the clusterId associated with a URL string.
   * @param {string} url
   * @returns {string} - Cluster ID of url provided
   */
  getClusterId: function getClusterId(url) {
    var catalog = this._getCatalog();

    return catalog.findClusterId(url);
  },


  /**
   * Get a service value from a provided clusterId. This method will
   * return an object containing both the name and url of a found service.
   * @param {object} params
   * @param {string} params.clusterId - clusterId of found service
   * @param {boolean} [params.priorityHost] - returns priority host url if true
   * @param {string} [params.serviceGroup] - specify service group
   * @returns {object} service
   * @returns {string} service.name
   * @returns {string} service.url
   */
  getServiceFromClusterId: function getServiceFromClusterId(params) {
    var catalog = this._getCatalog();

    return catalog.findServiceFromClusterId(params);
  },


  /**
   * Get a service object from a service url if the service url exists in the
   * catalog.
   *
   * @param {string} url - The url to be validated.
   * @returns {object} - Service object.
   * @returns {object.name} - The name of the service found.
   * @returns {object.priorityUrl} - The priority url of the found service.
   * @returns {object.defaultUrl} - The default url of the found service.
   */
  getServiceFromUrl: function getServiceFromUrl() {
    var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    var service = this._getCatalog().findServiceUrlFromUrl(url);

    if (!service) {
      return undefined;
    }

    return {
      name: service.name,
      priorityUrl: service.get(true),
      defaultUrl: service.get()
    };
  },


  /**
   * Verify that a provided url exists in the service
   * catalog.
   * @param {string} url
   * @returns {boolean} - true if exists, false otherwise
   */
  isServiceUrl: function isServiceUrl(url) {
    var catalog = this._getCatalog();

    return !!catalog.findServiceUrlFromUrl(url);
  },


  /**
   * Determine if a provided url is in the catalog's allowed domains.
   *
   * @param {string} url - The url to match allowed domains against.
   * @returns {boolean} - True if the url provided is allowed.
   */
  isAllowedDomainUrl: function isAllowedDomainUrl(url) {
    var catalog = this._getCatalog();

    return !!catalog.findAllowedDomain(url);
  },


  /**
   * Converts the host portion of the url from default host
   * to a priority host
   *
   * @param {string} url a service url that contains a default host
   * @returns {string} a service url that contains the top priority host.
   * @throws if url isn't a service url
   */
  convertUrlToPriorityHostUrl: function convertUrlToPriorityHostUrl() {
    var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    var data = this.getServiceFromUrl(url);

    if (!data) {
      throw Error('No service associated with url: [' + url + ']');
    }

    return url.replace(data.defaultUrl, data.priorityUrl);
  },


  /**
   * @private
   * Simplified method wrapper for sending a request to get
   * an updated service hostmap.
   * @param {object} [param]
   * @param {string} [param.from] - This accepts `limited` or `signin`
   * @param {object} [param.query] - This accepts `email`, `orgId` or `userId` key values
   * @param {string} [param.query.email] - must be a standard-format email
   * @param {string} [param.query.orgId] - must be an organization id
   * @param {string} [param.query.userId] - must be a user id
   * @param {string} [param.token] - used for signin catalog
   * @returns {Promise<object>}
   */
  _fetchNewServiceHostmap: function _fetchNewServiceHostmap() {
    var _this4 = this;

    var _ref10 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        from = _ref10.from,
        query = _ref10.query,
        token = _ref10.token;

    var service = 'u2c';
    var resource = from ? '/' + from + '/catalog' : '/catalog';
    var qs = (0, _extends3.default)({}, query, { format: 'hostmap' });

    var requestObject = {
      method: 'GET', service: service, resource: resource, qs: qs
    };

    if (token) {
      requestObject.headers = { authorization: token };
    }

    return this.request(requestObject).then(function (_ref11) {
      var body = _ref11.body;
      return _this4._formatReceivedHostmap(body);
    });
  },


  /**
   * Initializer
   *
   * @instance
   * @memberof Services
   * @returns {Services}
   */
  initialize: function initialize() {
    var _this5 = this;

    var catalog = new _serviceCatalog2.default();
    var registry = new _serviceRegistry2.default();
    var state = new _serviceState2.default();

    this._catalogs.set(this.webex, catalog);
    this.registries.set(this.webex, registry);
    this.states.set(this.webex, state);

    // Listen for configuration changes once.
    this.listenToOnce(this.webex, 'change:config', function () {
      // Destructure the configuration object for the services plugin.
      var services = _this5.webex.config.services;

      // Validate that the services configuration exists.

      if (services) {
        // Check for discovery services.
        if (services.discovery) {
          // Format the discovery configuration into an injectable array.
          var formattedDiscoveryServices = (0, _keys2.default)(services.discovery).map(function (key) {
            return {
              name: key,
              defaultUrl: services.discovery[key]
            };
          });

          // Inject formatted services into services catalog.
          catalog.updateServiceUrls('discovery', formattedDiscoveryServices);
        }

        // Check for allowed host domains.
        if (services.allowedDomains) {
          // Store the allowed domains as a property of the catalog.
          catalog.setAllowedDomains(services.allowedDomains);
        }

        // Set `validateDomains` property to match configuration
        _this5.validateDomains = services.validateDomains;
      }
    });

    // wait for webex instance to be ready before attempting
    // to update the service catalogs
    this.listenToOnce(this.webex, 'ready', function () {
      /* eslint-disable camelcase */
      if (_this5.webex.credentials.canAuthorize) {
        _this5.updateServices()
        // this catch prevents crashing in unique situations found
        // primarily in unit testing with the karma suite.
        .catch(function () {
          return _this5.logger.warn('services: catalog retrieval failed w/auth');
        });
      } else {
        _this5.collectPreauthCatalog({ email: _this5.webex.config.email });
      }
    });
  },
  version: '1.80.147'
});
/* eslint-enable no-underscore-dangle */

exports.default = Services;
//# sourceMappingURL=services.js.map
