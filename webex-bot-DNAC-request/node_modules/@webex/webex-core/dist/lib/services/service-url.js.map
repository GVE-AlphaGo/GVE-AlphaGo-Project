{"version":3,"sources":["service-url.js"],"names":["ServiceUrl","AmpState","extend","namespace","props","defaultUrl","undefined","hosts","name","_generateHostUrl","hostUri","url","Url","parse","host","port","format","_getHostUrls","map","priority","_getPriorityHostUrl","clusterId","length","filteredHosts","filter","id","homeCluster","aliveHosts","failed","reduce","previous","current","failHost","hostname","foundHost","find","hostObj","get","priorityHost"],"mappings":"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","file":"service-url.js","sourcesContent":["import Url from 'url';\n\nimport AmpState from 'ampersand-state';\n\n/* eslint-disable no-underscore-dangle */\n/**\n * @class\n */\nconst ServiceUrl = AmpState.extend({\n  namespace: 'ServiceUrl',\n\n  props: {\n    defaultUrl: ['string', true, undefined],\n    hosts: ['array', false, () => ([])],\n    name: ['string', true, undefined]\n  },\n\n  /**\n   * Generate a host url based on the host\n   * uri provided.\n   * @param {string} hostUri\n   * @returns {string}\n   */\n  _generateHostUrl(hostUri) {\n    const url = Url.parse(this.defaultUrl);\n\n    // setting url.hostname will not apply during Url.format(), set host via\n    // a string literal instead.\n    url.host = `${hostUri}${url.port ? `:${url.port}` : ''}`;\n\n    return Url.format(url);\n  },\n\n  /**\n   * Generate a list of urls based on this\n   * `ServiceUrl`'s known hosts.\n   * @returns {string[]}\n   */\n  _getHostUrls() {\n    return this.hosts.map((host) => ({\n      url: this._generateHostUrl(host.host),\n      priority: host.priority\n    }));\n  },\n\n  /**\n   * Get the current host url with the highest priority. If a clusterId is not\n   * provided, this will only return a URL with a filtered host that has the\n   * `homeCluster` value set to `true`.\n   *\n   * @param {string} [clusterId] - The clusterId to filter for a priority host.\n   * @returns {string} - The priority host url.\n   */\n  _getPriorityHostUrl(clusterId) {\n    if (this.hosts.length === 0) {\n      return this.defaultUrl;\n    }\n\n    let filteredHosts = clusterId ?\n      this.hosts.filter((host) => host.id === clusterId) :\n      this.hosts.filter((host) => host.homeCluster);\n\n    const aliveHosts = filteredHosts.filter(\n      (host) => !host.failed\n    );\n\n    filteredHosts = (aliveHosts.length === 0) ?\n      filteredHosts.map(\n        (host) => {\n          /* eslint-disable-next-line no-param-reassign */\n          host.failed = false;\n\n          return host;\n        }\n      ) : aliveHosts;\n\n    return this._generateHostUrl(filteredHosts.reduce((previous, current) => (\n      (previous.priority > current.priority || !previous.homeCluster) ?\n        current : previous\n    ), {}).host);\n  },\n\n  /**\n   * Attempt to mark a host from this `ServiceUrl` as failed and return true\n   * if the provided url has a host that could be successfully marked as failed.\n   *\n   * @param {string} url\n   * @returns {boolean}\n   */\n  failHost(url) {\n    if (url === this.defaultUrl) {\n      return true;\n    }\n\n    const {hostname} = Url.parse(url);\n    const foundHost = this.hosts.find((hostObj) => hostObj.host === hostname);\n\n    if (foundHost) {\n      foundHost.failed = true;\n    }\n\n    return (foundHost !== undefined);\n  },\n\n  /**\n   * Get the current `defaultUrl` or generate a url using the host with the\n   * highest priority via host rendering.\n   *\n   * @param {boolean} [priorityHost] - Retrieve the priority host.\n   * @param {string} [clusterId] - Cluster to match a host against.\n   * @returns {string} - The full service url.\n   */\n  get(priorityHost, clusterId) {\n    if (!priorityHost) {\n      return this.defaultUrl;\n    }\n\n    return this._getPriorityHostUrl(clusterId);\n  }\n});\n/* eslint-enable no-underscore-dangle */\n\nexport default ServiceUrl;\n"]}