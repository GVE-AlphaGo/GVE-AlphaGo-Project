'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _defineProperty = require('babel-runtime/core-js/object/define-property');

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _weakMap = require('babel-runtime/core-js/weak-map');

var _weakMap2 = _interopRequireDefault(_weakMap);

var _desc, _value, _class, _descriptor;

var _coreDecorators = require('core-decorators');

var _ampersandEvents = require('ampersand-events');

var _ampersandEvents2 = _interopRequireDefault(_ampersandEvents);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _initDefineProp(target, property, descriptor, context) {
  if (!descriptor) return;
  (0, _defineProperty2.default)(target, property, {
    enumerable: descriptor.enumerable,
    configurable: descriptor.configurable,
    writable: descriptor.writable,
    value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
  });
}

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object['ke' + 'ys'](descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object['define' + 'Property'](target, property, desc);
    desc = null;
  }

  return desc;
}

function _initializerWarningHelper(descriptor, context) {
  throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
}

// hold onto weak references to parent' Webexs to help avoid retain cycles
var webexs = new _weakMap2.default();

/**
 * Base plugin class. Doesn't depend on Ampersand State
 */
var StatelessWebexPlugin = (_class = function () {
  (0, _createClass3.default)(StatelessWebexPlugin, [{
    key: 'config',

    /**
     * The config for this plugin's namespace. If no namespace has been set
     * returns all of webex's config.
     * @type {Object}
     */
    get: function get() {
      var namespace = this.getNamespace ? this.getNamespace() : this.namespace;

      if (namespace) {
        namespace = namespace.toLowerCase();

        return this.webex.config[namespace];
      }

      return this.webex.config;
    }

    /**
     * A reference to the webex logger.
     * @type {Logger}
     */

  }, {
    key: 'logger',
    get: function get() {
      return this.webex.logger;
    }

    /**
     * A reference to the main sdk instance
     * @type {WebexCore}
     */

  }, {
    key: 'webex',
    get: function get() {
      return webexs.get(this);
    }
    /**
     * Mostly here for compatibility with legacy WebexPlugins.
     * StatelessWebexPlugins will never have a state other than ready, however, if
     * we implement stateful WebexPlugins as es6 classes, they may have the option
     * to have ready be false
     * @private
     * @type {boolean}
     */

  }]);

  /**
   * Constructor. One of attrs.webex or options.parent is required
   * @param {Object} attrs
   * @param {WebexCore} [attrs.webex]
   * @param {Object} options
   * @param {WebexCore} [options.parent]
   */
  function StatelessWebexPlugin() {
    var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck3.default)(this, StatelessWebexPlugin);

    _initDefineProp(this, 'ready', _descriptor, this);

    var webex = attrs.webex || options.parent;

    if (!webex) {
      throw new Error('One of `attrs.webex` or `options.parent` must be supplied when initializing a StatelessWebexPlugin');
    }

    while (webex.parent || webex.collection) {
      webex = webex.parent || webex.collection;
    }
    webexs.set(this, webex);
  }

  /**
   * Proxies to {@link WebexPlugin#webex}'s `request()` method.
   * @see WebexCore#request
   * @param {Array<mixed>} args
   * @returns {Promise}
   */


  (0, _createClass3.default)(StatelessWebexPlugin, [{
    key: 'request',
    value: function request() {
      var _webex;

      return (_webex = this.webex).request.apply(_webex, arguments);
    }

    /**
     * Proxies to {@link WebexPlugin#webex}'s `upload()` method.
     * @see WebexCore#upload
     * @param {Array<mixed>} args
     * @returns {Promise}
     */

  }, {
    key: 'upload',
    value: function upload() {
      var _webex2;

      return (_webex2 = this.webex).upload.apply(_webex2, arguments);
    }
  }]);
  return StatelessWebexPlugin;
}(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, 'ready', [_coreDecorators.readonly], {
  enumerable: true,
  initializer: function initializer() {
    return true;
  }
})), _class);
exports.default = StatelessWebexPlugin;


(0, _assign2.default)(StatelessWebexPlugin.prototype, _ampersandEvents2.default);
//# sourceMappingURL=stateless-webex-plugin.js.map
