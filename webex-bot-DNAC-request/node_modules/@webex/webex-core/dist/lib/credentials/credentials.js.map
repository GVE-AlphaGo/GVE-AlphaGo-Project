{"version":3,"sources":["credentials.js"],"names":["Credentials","WebexPlugin","extend","keyFactory","scope","collections","userTokens","TokenCollection","dataTypes","token","Token","dataType","derived","canAuthorize","deps","fn","Boolean","supertoken","canRefresh","config","jwtRefreshCallback","props","prop","namespace","session","isRefreshing","default","type","ready","refreshTimer","undefined","buildLoginUrl","options","clientType","state","Error","client_id","redirect_uri","response_type","base64","toBase64Url","authorizeUrl","querystring","stringify","getOrgId","logger","info","extractOrgIdFromJWT","access_token","e","extractOrgIdFromUserToken","decodedJWT","jwt","decode","realm","fields","split","length","buildLogoutUrl","logoutUrl","cisService","service","goto","calcRefreshTimeout","expiration","Math","floor","random","constructor","_dataTypes","forEach","key","set","bind","args","downscope","catch","reason","trace","resolve","serialize","parent","getClientToken","webex","request","method","uri","tokenUrl","form","grant_type","self_contained_token","auth","user","pass","client_secret","sendImmediately","shouldRefreshAccessToken","then","res","body","statusCode","reject","ErrorConstructor","grantErrors","select","error","_res","getUserToken","once","get","t","add","initialize","attrs","authorization","expires","scheduleRefresh","prototype","listenToOnce","authorizationString","parsed","url","parse","query","href","substr","indexOf","invalidate","clearTimeout","unset","err","warn","models","remove","refresh","tokens","requestAccessTokenFromJwt","internal","services","updateCredentialsConfig","st","all","map","revoke","InvalidRequestError","trigger","expiresIn","Date","now","timeoutLength","oneFlight"],"mappings":"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","file":"credentials.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport querystring from 'querystring';\nimport url from 'url';\n\nimport jwt from 'jsonwebtoken';\nimport {\n  base64,\n  makeStateDataType,\n  oneFlight,\n  tap,\n  whileInFlight\n} from '@webex/common';\nimport {safeSetTimeout} from '@webex/common-timers';\nimport {clone, cloneDeep, isObject, isEmpty} from 'lodash';\n\nimport WebexPlugin from '../webex-plugin';\nimport {persist, waitForValue} from '../storage/decorators';\n\nimport grantErrors from './grant-errors';\nimport {filterScope, sortScope} from './scope';\nimport Token from './token';\nimport TokenCollection from './token-collection';\n\n/**\n * @class\n */\nconst Credentials = WebexPlugin.extend({\n  collections: {\n    userTokens: TokenCollection\n  },\n\n  dataTypes: {\n    token: makeStateDataType(Token, 'token').dataType\n  },\n\n  derived: {\n    canAuthorize: {\n      deps: [\n        'supertoken',\n        'supertoken.canAuthorize',\n        'canRefresh'\n      ],\n      fn() {\n        return Boolean(this.supertoken && this.supertoken.canAuthorize || this.canRefresh);\n      }\n    },\n    canRefresh: {\n      deps: [\n        'supertoken',\n        'supertoken.canRefresh'\n      ],\n      fn() {\n        // If we're operating in JWT mode, we have to delegate to the consumer\n        if (this.config.jwtRefreshCallback) {\n          return true;\n        }\n\n        return Boolean(this.supertoken && this.supertoken.canRefresh);\n      }\n    }\n  },\n\n  props: {\n    supertoken: makeStateDataType(Token, 'token').prop\n  },\n\n  namespace: 'Credentials',\n\n  session: {\n    isRefreshing: {\n      default: false,\n      type: 'boolean'\n    },\n    /**\n     * Becomes `true` once the {@link loaded} event fires.\n     * @see {@link WebexPlugin#ready}\n     * @instance\n     * @memberof Credentials\n     * @type {boolean}\n     */\n    ready: {\n      default: false,\n      type: 'boolean'\n    },\n    refreshTimer: {\n      default: undefined,\n      type: 'any'\n    }\n  },\n\n  /**\n   * Generates an OAuth Login URL. Prefers the api.ciscospark.com proxy if the\n   * instance is initialize with an authorizatUrl, but fallsback to idbroker\n   * as the base otherwise.\n   * @instance\n   * @memberof Credentials\n   * @param {Object} [options={}]\n   * @returns {string}\n   */\n  buildLoginUrl(options = {clientType: 'public'}) {\n    /* eslint-disable camelcase */\n    if (options.state && !isObject(options.state)) {\n      throw new Error('if specified, `options.state` must be an object');\n    }\n\n    options.client_id = this.config.client_id;\n    options.redirect_uri = this.config.redirect_uri;\n    options.scope = this.config.scope;\n\n    options = cloneDeep(options);\n\n    if (!options.response_type) {\n      options.response_type = options.clientType === 'public' ? 'token' : 'code';\n    }\n    Reflect.deleteProperty(options, 'clientType');\n\n    if (options.state) {\n      if (!isEmpty(options.state)) {\n        options.state = base64.toBase64Url(JSON.stringify(options.state));\n      }\n      else {\n        delete options.state;\n      }\n    }\n\n    return `${this.config.authorizeUrl}?${querystring.stringify(options)}`;\n    /* eslint-enable camelcase */\n  },\n\n  /**\n   * Get the determined OrgId.\n   *\n   * @throws {Error} - If the OrgId could not be determined.\n   * @returns {string} - The OrgId.\n   */\n  getOrgId() {\n    this.logger.info(\n      'credentials: attempting to retrieve the OrgId from token'\n    );\n\n    try {\n      // Attempt to extract a client-authenticated token's OrgId.\n      this.logger.info('credentials: trying to extract OrgId from JWT');\n\n      return this.extractOrgIdFromJWT(this.supertoken.access_token);\n    }\n    catch (e) {\n      // Attempt to extract a user token's OrgId.\n      this.logger.info('credentials: could not extract OrgId from JWT');\n      this.logger.info(\n        'credentials: attempting to extract OrgId from user token'\n      );\n\n      return this.extractOrgIdFromUserToken(this.supertoken.access_token);\n    }\n  },\n\n  /**\n   * Extract the OrgId [realm] from a provided JWT.\n   *\n   * @private\n   * @param {string} token - The JWT to extract the OrgId from.\n   * @throws {Error} - If the token does not pass JWT general/realm validation.\n   * @returns {string} - The OrgId.\n   */\n  extractOrgIdFromJWT(token = '') {\n    // Decoded the provided token.\n    const decodedJWT = jwt.decode(token);\n\n    // Validate that the provided token is a JWT.\n    if (!decodedJWT) {\n      throw new Error('unable to extract the OrgId from the provided JWT');\n    }\n\n    if (!decodedJWT.realm) {\n      throw new Error('the provided JWT does not contain an OrgId');\n    }\n\n    // Return the OrgId [realm].\n    return decodedJWT.realm;\n  },\n\n  /**\n   * Extract the OrgId [realm] from a provided user token.\n   *\n   * @private\n   * @param {string} token - The user token to extract the OrgId from.\n   * @throws {Error} - Will throw an error if the provided token is invalid.\n   * @returns {string} - The OrgId.\n   */\n  extractOrgIdFromUserToken(token = '') {\n    // Split the provided token into subsections.\n    const fields = token.split('_');\n\n    // Validate that the provided token has the proper amount of sections.\n    if (fields.length !== 3) {\n      throw new Error('the provided token is not a valid format');\n    }\n\n    // Return the token section that contains the OrgId.\n    return fields[2];\n  },\n\n  /**\n   * Generates a Logout URL\n   * @instance\n   * @memberof Credentials\n   * @param {Object} [options={}]\n   * @returns {[type]}\n   */\n  buildLogoutUrl(options = {}) {\n    return `${this.config.logoutUrl}?${querystring.stringify(Object.assign({\n      cisService: this.config.service,\n      goto: this.config.redirect_uri\n    }, options))}`;\n  },\n\n  /**\n   * Generates a number between 60% - 90% of expired value\n   * @instance\n   * @memberof Credentials\n   * @param {number} expiration\n   * @private\n   * @returns {number}\n   */\n  calcRefreshTimeout(expiration) {\n    return Math.floor((Math.floor(Math.random() * 4) + 6) / 10 * expiration);\n  },\n\n  constructor(...args) {\n    // HACK to deal with the fact that AmpersandState#dataTypes#set is a pure\n    // function.\n    this._dataTypes = cloneDeep(this._dataTypes);\n    Object.keys(this._dataTypes).forEach((key) => {\n      if (this._dataTypes[key].set) {\n        this._dataTypes[key].set = this._dataTypes[key].set.bind(this);\n      }\n    });\n    // END HACK\n    Reflect.apply(WebexPlugin, this, args);\n  },\n\n  /**\n   * Downscopes a token\n   * @instance\n   * @memberof Credentials\n   * @param {string} scope\n   * @private\n   * @returns {Promise<Token>}\n   */\n  downscope(scope) {\n    return this.supertoken.downscope(scope)\n      .catch((reason) => {\n        this.logger.trace(`credentials: failed to downscope supertoken to ${scope}`, reason);\n        this.logger.trace(`credentials: falling back to supertoken for ${scope}`);\n\n        return Promise.resolve(new Token(Object.assign({scope}, this.supertoken.serialize())), {parent: this});\n      });\n  },\n\n  /**\n   * Requests a client credentials grant and returns the token. Given the\n   * limited use for such tokens as this time, this method does not cache its\n   * token.\n   * @instance\n   * @memberof Credentials\n   * @param {Object} options\n   * @returns {Promise<Token>}\n   */\n  getClientToken(options = {}) {\n    this.logger.info('credentials: requesting client credentials grant');\n\n    return this.webex.request({\n      /* eslint-disable camelcase */\n      method: 'POST',\n      uri: options.uri || this.config.tokenUrl,\n      form: {\n        grant_type: 'client_credentials',\n        scope: options.scope || 'webexsquare:admin',\n        self_contained_token: true\n      },\n      auth: {\n        user: this.config.client_id,\n        pass: this.config.client_secret,\n        sendImmediately: true\n      },\n      shouldRefreshAccessToken: false\n      /* eslint-enable camelcase */\n    })\n      .then((res) => new Token(res.body, {parent: this}))\n      .catch((res) => {\n        if (res.statusCode !== 400) {\n          return Promise.reject(res);\n        }\n\n        const ErrorConstructor = grantErrors.select(res.body.error);\n\n        return Promise.reject(new ErrorConstructor(res._res || res));\n      });\n  },\n\n  @oneFlight({keyFactory: (scope) => scope})\n  @waitForValue('@')\n  /**\n   * Resolves with a token with the specified scopes. If no scope is specified,\n   * defaults to omit(webex.credentials.scope, 'spark:kms'). If no such token is\n   * available, downscopes the supertoken to that scope.\n   * @instance\n   * @memberof Credentials\n   * @param {string} scope\n   * @returns {Promise<Token>}\n   */\n  getUserToken(scope) {\n    return Promise.resolve(!this.isRefreshing || new Promise((resolve) => {\n      this.logger.info('credentials: token refresh inflight; delaying getUserToken until refresh completes');\n      this.once('change:isRefreshing', () => {\n        this.logger.info('credentials: token refresh complete; reinvoking getUserToken');\n        resolve();\n      });\n    }))\n      .then(() => {\n        if (!this.canAuthorize) {\n          this.logger.info('credentials: cannot produce an access token from current state');\n\n          return Promise.reject(new Error('Current state cannot produce an access token'));\n        }\n\n        if (!scope) {\n          scope = filterScope('spark:kms', this.config.scope);\n        }\n\n        scope = sortScope(scope);\n\n        if (scope === sortScope(this.config.scope)) {\n          return Promise.resolve(this.supertoken);\n        }\n\n        const token = this.userTokens.get(scope);\n\n        // we should also check for the token.access_token since token object does\n        // not get cleared on unsetting while logging out.\n        if (!token || !token.access_token) {\n          return this.downscope(scope)\n            .then(tap((t) => this.userTokens.add(t)));\n        }\n\n        return Promise.resolve(token);\n      });\n  },\n\n  @persist('@')\n  /**\n   * Initializer\n   * @instance\n   * @memberof Credentials\n   * @param {Object} attrs\n   * @param {Object} options\n   * @private\n   * @returns {Credentials}\n   */\n  initialize(attrs, options) {\n    if (attrs) {\n      if (typeof attrs === 'string') {\n        this.supertoken = attrs;\n      }\n\n      if (attrs.access_token) {\n        this.supertoken = attrs;\n      }\n\n      if (attrs.authorization) {\n        if (attrs.authorization.supertoken) {\n          this.supertoken = attrs.authorization.supertoken;\n        }\n        else {\n          this.supertoken = attrs.authorization;\n        }\n      }\n\n      // schedule refresh\n      if (this.supertoken && this.supertoken.expires) {\n        this.scheduleRefresh(this.supertoken.expires);\n      }\n    }\n\n    Reflect.apply(WebexPlugin.prototype.initialize, this, [attrs, options]);\n\n    this.listenToOnce(this.parent, 'change:config', () => {\n      if (this.config.authorizationString) {\n        const parsed = url.parse(this.config.authorizationString, true);\n\n        /* eslint-disable camelcase */\n        this.config.client_id = parsed.query.client_id;\n        this.config.redirect_uri = parsed.query.redirect_uri;\n        this.config.scope = parsed.query.scope;\n        this.config.authorizeUrl = parsed.href.substr(0, parsed.href.indexOf('?'));\n        /* eslint-enable camelcase */\n      }\n    });\n\n    this.webex.once('loaded', () => {\n      this.ready = true;\n    });\n  },\n\n  @oneFlight\n  @waitForValue('@')\n  /**\n   * Clears all tokens from store them from the stores.\n   *\n   * This is no longer quite the right name for this method, but all of the\n   * alternatives I'm coming up with are already taken.\n   * @instance\n   * @memberof Credentials\n   * @returns {Promise}\n   */\n  invalidate() {\n    this.logger.info('credentials: invalidating tokens');\n\n    // clear refresh timer\n    if (this.refreshTimer) {\n      clearTimeout(this.refreshTimer);\n      this.unset('refreshTimer');\n    }\n\n    try {\n      this.unset('supertoken');\n    }\n    catch (err) {\n      this.logger.warn('credentials: failed to clear supertoken', err);\n    }\n\n    while (this.userTokens.models.length) {\n      try {\n        this.userTokens.remove(this.userTokens.models[0]);\n      }\n      catch (err) {\n        this.logger.warn('credentials: failed to remove user token', err);\n      }\n    }\n\n    this.logger.info('credentials: finished removing tokens');\n\n    // Return a promise to give the storage layer a tick or two to clear\n    // localStorage\n    return Promise.resolve();\n  },\n\n  @oneFlight\n  @whileInFlight('isRefreshing')\n  @waitForValue('@')\n  /**\n   * Removes the supertoken and child tokens, then refreshes the supertoken;\n   * subsequent calls to {@link Credentials#getUserToken()} will re-downscope\n   * child tokens. Enqueus revocation of previous previousTokens. Yes, that's\n   * the correct number of \"previous\"es.\n   * @instance\n   * @memberof Credentials\n   * @returns {Promise}\n   */\n  refresh() {\n    this.logger.info('credentials: refresh requested');\n\n    const {supertoken} = this;\n    const tokens = clone(this.userTokens.models);\n\n    // This is kind of a leaky abstraction, since it relies on the authorization\n    // plugin, but the only alternatives I see are\n    // 1. put all JWT support in core\n    // 2. have separate jwt and non-jwt auth plugins\n    // while I like #2 from a code simplicity standpoint, the third-party DX\n    // isn't great\n    if (this.config.jwtRefreshCallback) {\n      return this.config.jwtRefreshCallback(this.webex)\n        .then((jwt) => this.webex.authorization.requestAccessTokenFromJwt({jwt}));\n    }\n\n    if (this.webex.internal.services) {\n      this.webex.internal.services.updateCredentialsConfig();\n    }\n\n    return supertoken.refresh()\n      .then((st) => {\n        // clear refresh timer\n        if (this.refreshTimer) {\n          clearTimeout(this.refreshTimer);\n          this.unset('refreshTimer');\n        }\n        this.supertoken = st;\n\n        return Promise.all(tokens.map((token) => this.downscope(token.scope)\n          // eslint-disable-next-line max-nested-callbacks\n          .then((t) => {\n            this.logger.info(`credentials: revoking token for ${token.scope}`);\n\n            return token.revoke()\n              .catch((err) => {\n                this.logger.warn('credentials: failed to revoke user token', err);\n              })\n              .then(() => {\n                this.userTokens.remove(token.scope);\n                this.userTokens.add(t);\n              });\n          })));\n      })\n      .then(() => {\n        this.scheduleRefresh(this.supertoken.expires);\n      })\n      .catch((error) => {\n        const {InvalidRequestError} = grantErrors;\n\n        if (error instanceof InvalidRequestError) {\n          // Error: The refresh token provided is expired, revoked, malformed, or invalid. Hence emit an event to the client, an opportunity to logout.\n          this.unset('supertoken');\n          while (this.userTokens.models.length) {\n            try {\n              this.userTokens.remove(this.userTokens.models[0]);\n            }\n            catch (err) {\n              this.logger.warn('credentials: failed to remove user token', err);\n            }\n          }\n          this.webex.trigger('client:InvalidRequestError');\n        }\n\n        return Promise.reject(error);\n      });\n  },\n\n  /**\n   * Schedules a token refresh or refreshes the token if token has expired\n   * @instance\n   * @memberof Credentials\n   * @param {number} expires\n   * @private\n   * @returns {undefined}\n   */\n  scheduleRefresh(expires) {\n    const expiresIn = expires - Date.now();\n\n    if (expiresIn > 0) {\n      const timeoutLength = this.calcRefreshTimeout(expiresIn);\n\n      this.refreshTimer = safeSetTimeout(() => this.refresh(), timeoutLength);\n    }\n    else {\n      this.refresh();\n    }\n  }\n\n});\n\nexport default Credentials;\n"]}