{"version":3,"sources":["token.js"],"names":["processGrantError","res","statusCode","reject","ErrorConstructor","grantErrors","select","body","error","OAuthError","WebexHttpError","_res","Token","WebexPlugin","extend","keyFactory","scope","derived","canAuthorize","deps","fn","access_token","isExpired","canDownscope","config","client_id","canRefresh","inBrowser","refresh_token","refreshCallback","client_secret","expires","_isExpired","_string","token_type","namespace","props","expires_in","refresh_token_expires","refresh_token_expires_in","default","type","session","previousToken","downscope","logger","info","Error","trace","webex","request","method","uri","tokenUrl","addAuthHeader","form","grant_type","token","then","parent","initialize","attrs","options","prototype","Date","now","refresh","promise","resolve","redirect_uri","auth","user","pass","sendImmediately","shouldRefreshAccessToken","obj","process","env","NODE_ENV","revoke","unset","catch","revokeUrl","token_type_hint","set","_filterSetParameters","includes","split","toString","validate","service","resource","reason","convApi","CONVERSATION_SERVICE","CONVERSATION_SERVICE_URL","headers","authorization","oneFlight"],"mappings":"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","file":"token.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {pick} from 'lodash';\nimport {inBrowser, oneFlight} from '@webex/common';\nimport {safeSetTimeout} from '@webex/common-timers';\nimport WebexHttpError from '../webex-http-error';\nimport WebexPlugin from '../webex-plugin';\nimport {sortScope} from './scope';\nimport grantErrors, {OAuthError} from './grant-errors';\n\n/* eslint-disable camelcase */\n\n/**\n * Parse response from CI and converts to structured error when appropriate\n * @param {WebexHttpError} res\n * @private\n * @returns {GrantError}\n */\nfunction processGrantError(res) {\n  if (res.statusCode !== 400) {\n    return Promise.reject(res);\n  }\n\n  const ErrorConstructor = grantErrors.select(res.body.error);\n\n  if (ErrorConstructor === OAuthError && res instanceof WebexHttpError) {\n    return Promise.reject(res);\n  }\n  if (!ErrorConstructor) {\n    return Promise.reject(res);\n  }\n\n  return Promise.reject(new ErrorConstructor(res._res || res));\n}\n\n/**\n * @class\n */\nconst Token = WebexPlugin.extend({\n  derived: {\n    /**\n     * Indicates if this token can be used in an auth header. `true` iff\n     * {@link Token#access_token} is defined and {@link Token#isExpired} is\n     * false.\n     * @instance\n     * @memberof Token\n     * @readonly\n     * @type {boolean}\n     */\n    canAuthorize: {\n      deps: ['access_token', 'isExpired'],\n      fn() {\n        return !!this.access_token && !this.isExpired;\n      }\n    },\n\n    /**\n     * Indicates that this token can be downscoped. `true` iff\n     * {@link config.credentials.client_id} is defined and if\n     * {@link Token#canAuthorize} is true\n     *\n     * Note: since {@link config} is not evented, we can't listen for changes to\n     * {@link config.credentials.client_id}. As such,\n     * {@link config.credentials.client_id} must always be set before\n     * instantiating a {@link Token}\n     * @instance\n     * @memberof Token\n     * @readonly\n     * @type {boolean}\n     */\n    canDownscope: {\n      deps: ['canAuthorize'],\n      fn() {\n        return this.canAuthorize && !!this.config.client_id;\n      }\n    },\n\n    /**\n     * Indicates if this token can be refreshed. `true` iff\n     * {@link Token@refresh_token} is defined and\n     * {@link config.credentials.refreshCallback()} is defined\n     *\n     * Note: since {@link config} is not evented, we can't listen for changes to\n     * {@link config.credentials.refreshCallback()}. As such,\n     * {@link config.credentials.refreshCallback()} must always be set before\n     * instantiating a {@link Token}\n     * @instance\n     * @memberof Token\n     * @readonly\n     * @type {boolean}\n     */\n    canRefresh: {\n      deps: ['refresh_token'],\n      fn() {\n        if (inBrowser) {\n          return !!this.refresh_token && !!this.config.refreshCallback;\n        }\n\n        return !!this.refresh_token && !!this.config.client_secret;\n      }\n    },\n\n    /**\n     * Indicates if this `Token` is expired. `true` iff {@link Token#expires} is\n     * defined and is less than {@link Date.now()}.\n     * @instance\n     * @memberof Token\n     * @readonly\n     * @type {boolean}\n     */\n    isExpired: {\n      deps: ['expires', '_isExpired'],\n      fn() {\n        // in order to avoid setting `cache:false`, we'll use a private property\n        // and a timer rather than comparing to `Date.now()`;\n        return !!this.expires && this._isExpired;\n      }\n    },\n\n    /**\n     * Cache for toString()\n     * @instance\n     * @memberof Token\n     * @private\n     * @readonly\n     * @type {string}\n     */\n    _string: {\n      deps: ['access_token', 'token_type'],\n      fn() {\n        if (!this.access_token || !this.token_type) {\n          return '';\n        }\n\n        return `${this.token_type} ${this.access_token}`;\n      }\n    }\n  },\n\n  namespace: 'Credentials',\n\n  props: {\n    /**\n     * Used for indexing in the credentials userTokens collection\n     * @instance\n     * @memberof Token\n     * @private\n     * @type {string}\n     */\n    scope: 'string',\n    /**\n     * @instance\n     * @memberof Token\n     * @type {string}\n     */\n    access_token: 'string',\n    /**\n     * @instance\n     * @memberof Token\n     * @type {number}\n     */\n    expires: 'number',\n    /**\n     * @instance\n     * @memberof Token\n     * @type {number}\n     */\n    expires_in: 'number',\n    /**\n     * @instance\n     * @memberof Token\n     * @type {string}\n     */\n    refresh_token: 'string',\n    /**\n     * @instance\n     * @memberof Token\n     * @type {number}\n     */\n    refresh_token_expires: 'number',\n    /**\n     * @instance\n     * @memberof Token\n     * @type {number}\n     */\n    refresh_token_expires_in: 'number',\n    /**\n     * @default \"Bearer\"\n     * @instance\n     * @memberof Token\n     * @type {string}\n     */\n    token_type: {\n      default: 'Bearer',\n      type: 'string'\n    }\n  },\n\n  session: {\n    /**\n     * Used by {@link Token#isExpired} to avoid doing a Date comparison.\n     * @instance\n     * @memberof Token\n     * @private\n     * @type {boolean}\n     */\n    _isExpired: {\n      default: false,\n      type: 'boolean'\n    },\n    /**\n     * Handle to the previous token that we'll revoke when we refresh this\n     * token. The idea is to keep allow two valid tokens when a refresh occurs;\n     * we don't want revoke a token that's in the middle of being used, so when\n     * we do a token refresh, we won't revoke the token being refreshed, but\n     * we'll revoke the previous one.\n     * @instance\n     * @memberof Token\n     * @private\n     * @type {Object}\n     */\n    previousToken: {\n      type: 'state'\n    }\n  },\n\n  @oneFlight({\n    keyFactory(scope) {\n      return scope;\n    }\n  })\n  /**\n   * Uses this token to request a new Token with a subset of this Token's scopes\n   * @instance\n   * @memberof Token\n   * @param {string} scope\n   * @returns {Promise<Token>}\n   */\n  downscope(scope) {\n    this.logger.info(`token: downscoping token to ${scope}`);\n\n    if (this.isExpired) {\n      this.logger.info('token: request received to downscope expired access_token');\n\n      return Promise.reject(new Error('cannot downscope expired access token'));\n    }\n\n    if (!this.canDownscope) {\n      if (this.config.client_id) {\n        this.logger.info('token: request received to downscope invalid access_token');\n      }\n      else {\n        this.logger.trace('token: cannot downscope without client_id');\n      }\n\n      return Promise.reject(new Error('cannot downscope access token'));\n    }\n\n    // Since we're going to use scope as the index in our token collection, it's\n    // important scopes are always deterministically specified.\n    if (scope) {\n      scope = sortScope(scope);\n    }\n\n    // Ideally, we could depend on the service to communicate this error, but\n    // all we get is \"invalid scope\", which, to the lay person, implies\n    // something wrong with *one* of the scopes, not the whole thing.\n    if (scope === sortScope(this.config.scope)) {\n      return Promise.reject(new Error('token: scope reduction requires a reduced scope'));\n    }\n\n    return this.webex.request({\n      method: 'POST',\n      uri: this.config.tokenUrl,\n      addAuthHeader: false,\n      form: {\n        grant_type: 'urn:cisco:oauth:grant-type:scope-reduction',\n        token: this.access_token,\n        scope,\n        client_id: this.config.client_id\n      }\n    })\n      .then((res) => {\n        this.logger.info(`token: downscoped token to ${scope}`);\n\n        return new Token(Object.assign(res.body, {scope}), {parent: this.parent});\n      });\n  },\n\n  /**\n   * Initializer\n   * @instance\n   * @memberof Token\n   * @param {Object} [attrs={}]\n   * @param {Object} [options={}]\n   * @see {@link WebexPlugin#initialize()}\n   * @returns {Token}\n   */\n  initialize(attrs = {}, options = {}) {\n    Reflect.apply(WebexPlugin.prototype.initialize, this, [attrs, options]);\n\n    if (typeof attrs === 'string') {\n      this.access_token = attrs;\n    }\n\n    if (!this.access_token) {\n      throw new Error('`access_token` is required');\n    }\n\n    // We don't want the derived property `isExpired` to need {cache:false}, so\n    // we'll set up a timer the runs when this token should expire.\n    if (this.expires) {\n      if (this.expires < Date.now()) {\n        this._isExpired = true;\n      }\n      else {\n        safeSetTimeout(() => {\n          this._isExpired = true;\n        }, this.expires - Date.now());\n      }\n    }\n  },\n\n  @oneFlight\n  /**\n   * Refreshes this Token. Relies on\n   * {@link config.credentials.refreshCallback()}\n   * @instance\n   * @memberof Token\n   * @returns {Promise<Token>}\n   */\n  refresh() {\n    if (!this.canRefresh) {\n      throw new Error('Not enough information available to refresh this access token');\n    }\n\n    let promise;\n\n    if (inBrowser) {\n      if (!this.config.refreshCallback) {\n        throw new Error('Cannot refresh access token without refreshCallback');\n      }\n\n      promise = Promise.resolve(this.config.refreshCallback(this.webex, this));\n    }\n\n    return (promise || this.webex.request({\n      method: 'POST',\n      uri: this.config.tokenUrl,\n      form: {\n        grant_type: 'refresh_token',\n        redirect_uri: this.config.redirect_uri,\n        refresh_token: this.refresh_token\n      },\n      auth: {\n        user: this.config.client_id,\n        pass: this.config.client_secret,\n        sendImmediately: true\n      },\n      shouldRefreshAccessToken: false\n    })\n      .then((res) => res.body))\n      .then((obj) => {\n        if (!obj) {\n          throw new Error('token: refreshCallback() did not produce an object');\n        }\n        // If the authentication server did not send back a refresh token, copy\n        // the current refresh token and related values to the response (note:\n        // at time of implementation, CI never sends a new refresh token)\n        if (!obj.refresh_token) {\n          Object.assign(obj, pick(this, 'refresh_token', 'refresh_token_expires', 'refresh_token_expires_in'));\n        }\n\n        // If the new token is the same as the previous token, then we may have\n        // found a bug in CI; log the details and reject the Promise\n        if (this.access_token === obj.access_token) {\n          this.logger.error('token: new token matches current token');\n          // log the tokens if it is not production\n          if (process.env.NODE_ENV !== 'production') {\n            this.logger.error('token: current token:', this.access_token);\n            this.logger.error('token: new token:', obj.access_token);\n          }\n\n          return Promise.reject(new Error('new token matches current token'));\n        }\n\n        if (this.previousToken) {\n          this.previousToken.revoke();\n          this.unset('previousToken');\n        }\n\n        obj.previousToken = this;\n        obj.scope = this.scope;\n\n        return new Token(obj, {parent: this.parent});\n      })\n      .catch(processGrantError);\n  },\n\n  @oneFlight\n  /**\n   * Revokes this token and unsets its local properties\n   * @instance\n   * @memberof Token\n   * @returns {Promise}\n   */\n  revoke() {\n    if (this.isExpired) {\n      this.logger.info('token: already expired, not making making revocation request');\n\n      return Promise.resolve();\n    }\n\n    if (!this.canAuthorize) {\n      this.logger.info('token: no longer valid, not making revocation request');\n\n      return Promise.resolve();\n    }\n\n    // FIXME we need to use the user token revocation endpoint to revoke a token\n    // without a client_secret, but it doesn't current support using a token to\n    // revoke itself\n    // Note: I'm not making a canRevoke property because there should be changes\n    // coming to the user token revocation endpoint that allow us to do this\n    // correctly.\n    if (!this.config.client_secret) {\n      this.logger.info('token: no client secret available, not making revocation request');\n\n      return Promise.resolve();\n    }\n\n    this.logger.info('token: revoking access token');\n\n    return this.webex.request({\n      method: 'POST',\n      uri: this.config.revokeUrl,\n      form: {\n        token: this.access_token,\n        token_type_hint: 'access_token'\n      },\n      auth: {\n        user: this.config.client_id,\n        pass: this.config.client_secret,\n        sendImmediately: true\n      },\n      shouldRefreshAccessToken: false\n    })\n      .then(() => {\n        this.unset([\n          'access_token',\n          'expires',\n          'expires_in',\n          'token_type'\n        ]);\n        this.logger.info('token: access token revoked');\n      })\n      .catch(processGrantError);\n  },\n\n  set(...args) {\n    // eslint-disable-next-line prefer-const\n    let [attrs, options] = this._filterSetParameters(...args);\n\n    if (!attrs.token_type && attrs.access_token && attrs.access_token.includes(' ')) {\n      const [token_type, access_token] = attrs.access_token.split(' ');\n\n      attrs = Object.assign({}, attrs, {access_token, token_type});\n    }\n    const now = Date.now();\n\n    if (!attrs.expires && attrs.expires_in) {\n      attrs.expires = now + attrs.expires_in * 1000;\n    }\n\n    if (!attrs.refresh_token_expires && attrs.refresh_token_expires_in) {\n      attrs.refresh_token_expires = now + attrs.refresh_token_expires_in * 1000;\n    }\n\n    if (attrs.scope) {\n      attrs.scope = sortScope(attrs.scope);\n    }\n\n    return Reflect.apply(WebexPlugin.prototype.set, this, [attrs, options]);\n  },\n\n  /**\n   * Renders the token object as an HTTP Header Value\n   * @instance\n   * @memberof Token\n   * @returns {string}\n   * @see {@link Object#toString()}\n   */\n  toString() {\n    if (!this._string) {\n      throw new Error('cannot stringify Token');\n    }\n\n    return this._string;\n  },\n\n  /**\n   * Uses a non-producation api to return information about this token. This\n   * method is primarily for tests and will throw if NODE_ENV === production\n   * @instance\n   * @memberof Token\n   * @private\n   * @returns {Promise}\n   */\n  validate() {\n    if (process.env.NODE_ENV === 'production') {\n      throw new Error('Token#validate() must not be used in production');\n    }\n\n    return this.webex.request({\n      method: 'POST',\n      service: 'conversation',\n      resource: 'users/validateAuthToken',\n      body: {\n        token: this.access_token\n      }\n    })\n      .catch((reason) => {\n        if ('statusCode' in reason) {\n          return Promise.reject(reason);\n        }\n        this.logger.info('REMINDER: If you\\'re investigating a network error here, it\\'s normal');\n\n        // If we got an error that isn't a WebexHttpError, assume the problem is\n        // that we don't have the wdm plugin loaded and service/resource isn't\n        // a valid means of identifying a request.\n        const convApi = process.env.CONVERSATION_SERVICE || process.env.CONVERSATION_SERVICE_URL || 'https://conv-a.wbx2.com/conversation/api/v1';\n\n        return this.webex.request({\n          method: 'POST',\n          uri: `${convApi}/users/validateAuthToken`,\n          body: {\n            token: this.access_token\n          },\n          headers: {\n            authorization: `Bearer ${this.access_token}`\n          }\n        });\n      })\n      .then((res) => res.body);\n  }\n});\n\nexport default Token;\n"]}