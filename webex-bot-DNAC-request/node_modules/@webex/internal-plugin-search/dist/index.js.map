{"version":3,"sources":["index.js"],"names":["default","Search","config","payloadTransformer","predicates","name","direction","test","ctx","options","resolve","service","url","webex","internal","services","getServiceFromUrl","extract","body","response","then","res","activities","items","transforms","fn","object","encryption","encryptText","searchEncryptionKeyUrl","query","q"],"mappings":";;;;;;;;;;;;;;;AAOA;;;;;2CAiFQA,O;;;;AApFR;;;;AAIA;;;;AAEA;;AACA;;;;AAEA,uCAAuB,QAAvB,EAAiCC,gBAAjC,EAAyC;AACvCC,0BADuC;AAEvCC,sBAAoB;AAClBC,gBAAY,CACV;AACEC,YAAM,oBADR;AAEEC,iBAAW,UAFb;AAGEC,UAHF,gBAGOC,GAHP,EAGYC,OAHZ,EAGqB;AACjB,YAAI,CAAC,mBAAIA,OAAJ,EAAa,YAAb,CAAL,EAAiC;AAC/B,iBAAO,kBAAQC,OAAR,CAAgB,KAAhB,CAAP;AACD;;AAED,YAAI,CAAC,mBAAID,OAAJ,EAAa,6BAAb,CAAL,EAAkD;AAChD,iBAAO,kBAAQC,OAAR,CAAgB,KAAhB,CAAP;AACD;;AAED,YAAID,QAAQE,OAAR,KAAoB,UAAxB,EAAoC;AAClC,iBAAO,kBAAQD,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED,YAAID,QAAQG,GAAZ,EAAiB;AACf,cAAMD,UAAUH,IAAIK,KAAJ,CAAUC,QAAV,CAAmBC,QAAnB,CAA4BC,iBAA5B,CAA8CP,QAAQG,GAAtD,CAAhB;;AAEA,iBAAO,kBAAQF,OAAR,CAAgBC,WAAWA,QAAQN,IAAR,KAAiB,UAA5C,CAAP;AACD;;AAED,eAAO,kBAAQK,OAAR,CAAgB,KAAhB,CAAP;AACD,OAvBH;AAwBEO,aAxBF,mBAwBUR,OAxBV,EAwBmB;AACf,eAAO,kBAAQC,OAAR,CAAgBD,QAAQS,IAAxB,CAAP;AACD;AA1BH,KADU,EA6BV;AACEb,YAAM,sBADR;AAEEC,iBAAW,SAFb;AAGEC,UAHF,gBAGOC,GAHP,EAGYW,QAHZ,EAGsB;AAClB,eAAO,kBAAQT,OAAR,CAAgB,mBAAIS,QAAJ,EAAc,qCAAd,CAAhB,EACJC,IADI,CACC,UAACC,GAAD,EAAS;AACb,cAAI,CAACA,GAAL,EAAU;AACR,mBAAO,kBAAQX,OAAR,CAAgB,KAAhB,CAAP;AACD;;AAED,cAAIS,SAASV,OAAT,CAAiBE,OAAjB,KAA6B,UAAjC,EAA6C;AAC3C,mBAAO,kBAAQD,OAAR,CAAgB,IAAhB,CAAP;AACD;;AAED,cAAIS,SAASV,OAAT,CAAiBG,GAArB,EAA0B;AACxB,gBAAMD,UAAUH,IAAIK,KAAJ,CAAUC,QAAV,CAAmBC,QAAnB,CAA4BC,iBAA5B,CAA8CG,SAASV,OAAT,CAAiBG,GAA/D,CAAhB;;AAEA,mBAAO,kBAAQF,OAAR,CAAgBC,WAAWA,QAAQN,IAAR,KAAiB,UAA5C,CAAP;AACD;;AAED,iBAAO,kBAAQK,OAAR,CAAgB,KAAhB,CAAP;AACD,SAjBI,CAAP;AAkBD,OAtBH;AAuBEO,aAvBF,mBAuBUE,QAvBV,EAuBoB;AAChB,eAAO,kBAAQT,OAAR,CAAgBS,SAASD,IAAT,CAAcI,UAAd,CAAyBC,KAAzC,CAAP;AACD;AAzBH,KA7BU,CADM;AA0DlBC,gBAAY,CACV;AACEnB,YAAM,oBADR;AAEEC,iBAAW,UAFb;AAGEmB,QAHF,cAGKjB,GAHL,EAGUkB,MAHV,EAGkB;AACd,eAAOlB,IAAIK,KAAJ,CAAUC,QAAV,CAAmBa,UAAnB,CAA8BC,WAA9B,CAA0CF,OAAOG,sBAAjD,EAAyEH,OAAOI,KAAhF,EACJV,IADI,CACC,UAACW,CAAD,EAAO;AACXL,iBAAOI,KAAP,GAAeC,CAAf;AACD,SAHI,CAAP;AAID;AARH,KADU;AA1DM;AAFmB,CAAzC,E,CAbA","file":"index.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {registerInternalPlugin} from '@webex/webex-core';\nimport {has} from 'lodash';\n\nimport Search from './search';\nimport config from './config';\n\nimport '@webex/internal-plugin-conversation';\nimport '@webex/internal-plugin-encryption';\n\nregisterInternalPlugin('search', Search, {\n  config,\n  payloadTransformer: {\n    predicates: [\n      {\n        name: 'encryptSearchQuery',\n        direction: 'outbound',\n        test(ctx, options) {\n          if (!has(options, 'body.query')) {\n            return Promise.resolve(false);\n          }\n\n          if (!has(options, 'body.searchEncryptionKeyUrl')) {\n            return Promise.resolve(false);\n          }\n\n          if (options.service === 'argonaut') {\n            return Promise.resolve(true);\n          }\n\n          if (options.url) {\n            const service = ctx.webex.internal.services.getServiceFromUrl(options.url);\n\n            return Promise.resolve(service && service.name === 'argonaut');\n          }\n\n          return Promise.resolve(false);\n        },\n        extract(options) {\n          return Promise.resolve(options.body);\n        }\n      },\n      {\n        name: 'transformObjectArray',\n        direction: 'inbound',\n        test(ctx, response) {\n          return Promise.resolve(has(response, 'body.activities.items[0].objectType'))\n            .then((res) => {\n              if (!res) {\n                return Promise.resolve(false);\n              }\n\n              if (response.options.service === 'argonaut') {\n                return Promise.resolve(true);\n              }\n\n              if (response.options.url) {\n                const service = ctx.webex.internal.services.getServiceFromUrl(response.options.url);\n\n                return Promise.resolve(service && service.name === 'argonaut');\n              }\n\n              return Promise.resolve(false);\n            });\n        },\n        extract(response) {\n          return Promise.resolve(response.body.activities.items);\n        }\n      }\n    ],\n    transforms: [\n      {\n        name: 'encryptSearchQuery',\n        direction: 'outbound',\n        fn(ctx, object) {\n          return ctx.webex.internal.encryption.encryptText(object.searchEncryptionKeyUrl, object.query)\n            .then((q) => {\n              object.query = q;\n            });\n        }\n      }\n    ]\n  }\n});\n\nexport {default} from './search';\n"]}