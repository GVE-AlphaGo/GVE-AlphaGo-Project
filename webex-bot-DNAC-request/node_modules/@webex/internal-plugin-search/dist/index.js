'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _has2 = require('lodash/has');

var _has3 = _interopRequireDefault(_has2);

var _search = require('./search');

Object.defineProperty(exports, 'default', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_search).default;
  }
});

var _webexCore = require('@webex/webex-core');

var _search2 = _interopRequireDefault(_search);

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

require('@webex/internal-plugin-conversation');

require('@webex/internal-plugin-encryption');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _webexCore.registerInternalPlugin)('search', _search2.default, {
  config: _config2.default,
  payloadTransformer: {
    predicates: [{
      name: 'encryptSearchQuery',
      direction: 'outbound',
      test: function test(ctx, options) {
        if (!(0, _has3.default)(options, 'body.query')) {
          return _promise2.default.resolve(false);
        }

        if (!(0, _has3.default)(options, 'body.searchEncryptionKeyUrl')) {
          return _promise2.default.resolve(false);
        }

        if (options.service === 'argonaut') {
          return _promise2.default.resolve(true);
        }

        if (options.url) {
          var service = ctx.webex.internal.services.getServiceFromUrl(options.url);

          return _promise2.default.resolve(service && service.name === 'argonaut');
        }

        return _promise2.default.resolve(false);
      },
      extract: function extract(options) {
        return _promise2.default.resolve(options.body);
      }
    }, {
      name: 'transformObjectArray',
      direction: 'inbound',
      test: function test(ctx, response) {
        return _promise2.default.resolve((0, _has3.default)(response, 'body.activities.items[0].objectType')).then(function (res) {
          if (!res) {
            return _promise2.default.resolve(false);
          }

          if (response.options.service === 'argonaut') {
            return _promise2.default.resolve(true);
          }

          if (response.options.url) {
            var service = ctx.webex.internal.services.getServiceFromUrl(response.options.url);

            return _promise2.default.resolve(service && service.name === 'argonaut');
          }

          return _promise2.default.resolve(false);
        });
      },
      extract: function extract(response) {
        return _promise2.default.resolve(response.body.activities.items);
      }
    }],
    transforms: [{
      name: 'encryptSearchQuery',
      direction: 'outbound',
      fn: function fn(ctx, object) {
        return ctx.webex.internal.encryption.encryptText(object.searchEncryptionKeyUrl, object.query).then(function (q) {
          object.query = q;
        });
      }
    }]
  }
}); /*!
     * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
     */
//# sourceMappingURL=index.js.map
