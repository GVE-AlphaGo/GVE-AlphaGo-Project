{"version":3,"sources":["people.js"],"names":["People","WebexPlugin","extend","namespace","children","batcher","PeopleBatcher","get","person","reject","Error","_getMe","id","personId","request","list","options","Array","isArray","peopleIds","all","map","service","resource","qs","then","res","Page","webex","inferPersonIdFromUuid","base64","decode","includes","err","encode","body","oneFlight"],"mappings":";;;;;;;;;;;;;;yBAAA;;;;AAIA;;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;;AAQA;;;AAGA,IAAMA,SAASC,uBAAYC,MAAZ,SAAmB;AAChCC,aAAW,QADqB;;AAGhCC,YAAU;AACRC,aAASC;AADD,GAHsB;AAMhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BAC,KApCgC,eAoC5BC,MApC4B,EAoCpB;AACV,QAAI,CAACA,MAAL,EAAa;AACX,aAAO,kBAAQC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iCAAV,CAAf,CAAP;AACD;AACD,QAAIF,WAAW,IAAf,EAAqB;AACnB,aAAO,KAAKG,MAAL,EAAP;AACD;AACD,QAAMC,KAAKJ,OAAOK,QAAP,IAAmBL,OAAOI,EAA1B,IAAgCJ,MAA3C;;AAEA,WAAO,KAAKH,OAAL,CAAaS,OAAb,CAAqBF,EAArB,CAAP;AACD,GA9C+B;;;AAgDhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EAG,MA/HgC,gBA+H3BC,OA/H2B,EA+HlB;AAAA;;AACZ,QAAIC,MAAMC,OAAN,CAAcF,OAAd,CAAJ,EAA4B;AAC1B,UAAMG,YAAYH,OAAlB;;AAEA,aAAO,kBAAQI,GAAR,CAAYD,UAAUE,GAAV,CAAc,UAACR,QAAD;AAAA,eAAc,MAAKR,OAAL,CAAaS,OAAb,CAAqBD,QAArB,CAAd;AAAA,OAAd,CAAZ,CAAP;AACD;;AAED,WAAO,KAAKC,OAAL,CAAa;AAClBQ,eAAS,OADS;AAElBC,gBAAU,QAFQ;AAGlBC,UAAIR;AAHc,KAAb,EAKJS,IALI,CAKC,UAACC,GAAD;AAAA,aAAS,IAAIC,eAAJ,CAASD,GAAT,EAAc,MAAKE,KAAnB,CAAT;AAAA,KALD,CAAP;AAMD,GA5I+B;;;AA8IhC;;;;;;AAMAC,uBApJgC,iCAoJVjB,EApJU,EAoJN;AACxB;AACA;AACA,QAAI;AACF,UAAIkB,eAAOC,MAAP,CAAcnB,EAAd,EAAkBoB,QAAlB,CAA2B,eAA3B,CAAJ,EAAiD;AAC/C,eAAOpB,EAAP;AACD;AACF,KAJD,CAKA,OAAOqB,GAAP,EAAY;AACV;AACD;;AAED,WAAOH,eAAOI,MAAP,6BAAwCtB,EAAxC,CAAP;AACD,GAjK+B;AA2KhCD,QA3KgC,oBA2KvB;AACP,WAAO,KAAKiB,KAAL,CAAWd,OAAX,CAAmB;AACxBQ,eAAS,OADe;AAExBC,gBAAU;AAFc,KAAnB,EAIJE,IAJI,CAIC,UAACC,GAAD;AAAA,aAASA,IAAIS,IAAb;AAAA,KAJD,CAAP;AAKD,GAjL+B;AAAA;AAAA,CAAnB,8CA0KZC,iBA1KY,0EAAf;;kBAoLepC,M","file":"people.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {WebexPlugin, Page} from '@webex/webex-core';\nimport {base64, oneFlight} from '@webex/common';\n\nimport PeopleBatcher from './people-batcher';\n\n/**\n * @typedef {Object} PersonObject\n * @property {string} id - (server generated) Unique identifier for the person\n * @property {Array<email>} emails - Email addresses of the person\n * @property {string} displayName - Display name of the person\n * @property {isoDate} created - (server generated) The date and time that the person was created\n */\n\n/**\n * @class\n */\nconst People = WebexPlugin.extend({\n  namespace: 'People',\n\n  children: {\n    batcher: PeopleBatcher\n  },\n  /**\n   * Returns a single person by ID\n   * @instance\n   * @memberof People\n   * @param {PersonObject|uuid|string} person\n   * @returns {Promise<PersonObject>}\n   * @example\n   * webex.rooms.create({title: 'Get Person Example'})\n   *   .then(function(room) {\n   *     return webex.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(membership) {\n   *     return webex.people.get(membership.personId);\n   *   })\n   *   .then(function(alice) {\n   *     var assert = require('assert');\n   *     assert(alice.id);\n   *     assert(Array.isArray(alice.emails));\n   *     assert.equal(alice.emails.filter(function(email) {\n   *       return email === 'alice@example.com';\n   *     }).length, 1);\n   *     assert(alice.displayName);\n   *     assert(alice.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(person) {\n    if (!person) {\n      return Promise.reject(new Error('A person with an id is required'));\n    }\n    if (person === 'me') {\n      return this._getMe();\n    }\n    const id = person.personId || person.id || person;\n\n    return this.batcher.request(id);\n  },\n\n  /**\n   * Returns a list of people\n   * @instance\n   * @memberof People\n   * @param {Object | uuid[]} options or array of uuids\n   * @param {email} options.email - Returns people with an email that contains this string\n   * @param {string} options.displayName - Returns people with a name that contains this string\n   * @param {bool} showAllTypes optional flag that requires Hydra to send every type field,\n   * even if the type is not \"person\" (e.g.: SX10, webhook_intergation, etc.)\n   * @returns {Promise<Page<PersonObject>>}\n   * @example\n   * var room;\n   * webex.rooms.create({title: 'List People Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.create({\n   *       personEmail: 'bob@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.people.list({email: 'alice@example.com'});\n   *   })\n   *   .then(function(people) {\n   *     var assert = require('assert');\n   *     assert.equal(people.length, 1);\n   *     var person = people.items[0];\n   *     assert(person.id);\n   *     assert(Array.isArray(person.emails));\n   *     assert(person.displayName);\n   *     assert(person.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   *  @example <caption>Example usage of array method</caption>\n   * var room;\n   * var aliceId;\n   * var bobId;\n   * webex.rooms.create({title: 'List People Array Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(membership) {\n   *     aliceId = membership.personId;\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.create({\n   *       personEmail: 'bob@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(membership) {\n   *     bobId = membership.personId;\n   *   })\n   *   .then(function() {\n   *     return webex.people.list([aliceId, bobId]);\n   *   })\n   *   .then(function(people) {\n   *     var assert = require('assert');\n   *     assert.equal(people.length, 2);\n   *     var person = people.items[0];\n   *     assert(person.id);\n   *     assert(Array.isArray(person.emails));\n   *     assert(person.displayName);\n   *     assert(person.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    if (Array.isArray(options)) {\n      const peopleIds = options;\n\n      return Promise.all(peopleIds.map((personId) => this.batcher.request(personId)));\n    }\n\n    return this.request({\n      service: 'hydra',\n      resource: 'people',\n      qs: options\n    })\n      .then((res) => new Page(res, this.webex));\n  },\n\n  /**\n   * Converts a uuid to a hydra id without a network dip.\n   * @param {string} id\n   * @private\n   * @returns {string}\n   */\n  inferPersonIdFromUuid(id) {\n    // base64.validate seems to return true for uuids, so we need a different\n    // check\n    try {\n      if (base64.decode(id).includes('ciscospark://')) {\n        return id;\n      }\n    }\n    catch (err) {\n      // ignore\n    }\n\n    return base64.encode(`ciscospark://us/PEOPLE/${id}`);\n  },\n\n  /**\n   * Fetches the current user from the /people/me endpoint\n   * @instance\n   * @memberof People\n   * @private\n   * @returns {Promise<PersonObject>}\n   */\n  @oneFlight\n  _getMe() {\n    return this.webex.request({\n      service: 'hydra',\n      resource: 'people/me'\n    })\n      .then((res) => res.body);\n  }\n});\n\nexport default People;\n"]}