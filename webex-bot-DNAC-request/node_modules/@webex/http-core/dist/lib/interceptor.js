'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _defineProperty = require('babel-runtime/core-js/reflect/define-property');

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _get2 = require('lodash/get');

var _get3 = _interopRequireDefault(_get2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class
 */
/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */

var Interceptor = function () {
  /**
   * @constructor
   * @param {Object} attrs
   * @returns {UrlInterceptor}
   */
  function Interceptor(attrs) {
    var _this = this;

    (0, _classCallCheck3.default)(this, Interceptor);

    if (attrs) {
      (0, _keys2.default)(attrs).forEach(function (key) {
        var value = attrs[key];

        (0, _defineProperty2.default)(_this, key, {
          enumerable: true,
          value: value
        });
      });
    }
  }

  /**
   * Logs the options of a request. This should be utilized
   * during the intercepting process, but can be used at any
   * time otherwise.
   * @param {object} options
   * @returns {void}
   */


  (0, _createClass3.default)(Interceptor, [{
    key: 'logOptions',
    value: function logOptions() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var logger = (0, _get3.default)(this, 'webex.logger', console);

      if (!process.env.ENABLE_VERBOSE_NETWORK_LOGGING || !logger) {
        return;
      }

      // prepend a header for the interceptor
      logger.info('/***** Interceptor ****************************************************\\');

      logger.info(this.constructor.name + ' - ' + (0, _stringify2.default)(options, null, 2));
    }

    /**
     * @abstract
     * @returns {Interceptor}
     */

  }, {
    key: 'onRequest',


    /**
     * Transform request options before sending them
     * @param {Object} options
     * @returns {Promise<Object>}
     */
    value: function onRequest(options) {
      return _promise2.default.resolve(options);
    }

    /**
     * Handle request failures
     * @param {Object} options
     * @param {Error} reason
     * @returns {RejectedPromise<Error>}
     */

  }, {
    key: 'onRequestError',
    value: function onRequestError(options, reason) {
      return _promise2.default.reject(reason);
    }

    /**
     * Transform response before returning it
     * @param {Object} options
     * @param {HttpResponse} response
     * @returns {Promise<HttpResponse>}
     */

  }, {
    key: 'onResponse',
    value: function onResponse(options, response) {
      return _promise2.default.resolve(response);
    }

    /**
     * Handle response errors
     * @param {Object} options
     * @param {WebexHttpError} reason
     * @returns {Promise<WebexHttpError>}
     */

  }, {
    key: 'onResponseError',
    value: function onResponseError(options, reason) {
      return _promise2.default.reject(reason);
    }
  }], [{
    key: 'create',
    value: function create() {
      throw new Error('`Interceptor.create()` must be defined');
    }
  }]);
  return Interceptor;
}();

exports.default = Interceptor;
//# sourceMappingURL=interceptor.js.map
