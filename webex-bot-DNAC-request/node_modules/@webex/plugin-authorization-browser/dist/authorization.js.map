{"version":3,"sources":["authorization.js"],"names":["OAUTH2_CSRF_TOKEN","EMPTY_OBJECT_STRING","base64","encode","Authorization","WebexPlugin","extend","derived","isAuthenticating","deps","fn","isAuthorizing","session","default","type","ready","namespace","initialize","attrs","options","ret","prototype","parse","location","url","webex","getWindow","href","_checkForErrors","hash","includes","substr","querystring","state","JSON","decode","tokenData","_parseHash","_cleanUrl","process","nextTick","credentials","set","supertoken","initiateLogin","csrf_token","_generateSecurityToken","config","clientType","initiateAuthorizationCodeGrant","initiateImplicitGrant","logger","info","buildLoginUrl","response_type","resolve","requestAccessTokenFromJwt","jwt","hydraUri","internal","services","get","env","HYDRA_SERVICE_URL","request","method","uri","headers","authorization","then","body","access_token","token","token_type","expires_in","expiresIn","logout","noRedirect","buildLogoutUrl","query","error","ErrorConstructor","grantErrors","select","history","replaceState","forEach","key","stringify","format","uuid","v4","sessionStorage","setItem","_verifySecurityToken","undefined","parseInt","refresh_token_expires_in","sessionToken","getItem","removeItem","Error","oneFlight"],"mappings":"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","file":"authorization.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint camelcase: [0] */\n\nimport querystring from 'querystring';\nimport url from 'url';\n\nimport {base64, oneFlight, whileInFlight} from '@webex/common';\nimport {grantErrors, WebexPlugin} from '@webex/webex-core';\nimport {cloneDeep, isEmpty, omit} from 'lodash';\nimport uuid from 'uuid';\n\nconst OAUTH2_CSRF_TOKEN = 'oauth2-csrf-token';\nconst EMPTY_OBJECT_STRING = base64.encode(JSON.stringify({}));\n\n/**\n * Browser support for OAuth2. Automatically parses the URL hash for an access\n * token\n * @class\n * @name AuthorizationBrowser\n */\nconst Authorization = WebexPlugin.extend({\n  derived: {\n    /**\n     * Alias of {@link AuthorizationBrowser#isAuthorizing}\n     * @instance\n     * @memberof AuthorizationBrowser\n     * @type {boolean}\n     */\n    isAuthenticating: {\n      deps: ['isAuthorizing'],\n      fn() {\n        return this.isAuthorizing;\n      }\n    }\n  },\n\n  session: {\n    /**\n     * Indicates if an Authorization Code exchange is inflight\n     * @instance\n     * @memberof AuthorizationBrowser\n     * @type {boolean}\n     */\n    isAuthorizing: {\n      default: false,\n      type: 'boolean'\n    },\n    ready: {\n      default: false,\n      type: 'boolean'\n    }\n  },\n\n  namespace: 'Credentials',\n\n  /**\n   * Initializer\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} attrs {@link AmpersandState}\n   * @param {boolean} attrs.parse Controls whether or not the the url should get\n   * parsed for an access token\n   * @private\n   * @returns {Authorization}\n   */\n  // eslint-disable-next-line complexity\n  initialize(attrs, options) {\n    const ret = Reflect.apply(WebexPlugin.prototype.initialize, this, [attrs, options]);\n\n    // Reminder, we can't do parse based on config, because config is not\n    // available until nextTick and we want to be able to throw errors found in\n    // the url.\n    if (attrs.parse === false) {\n      this.ready = true;\n\n      return ret;\n    }\n    const location = url.parse(this.webex.getWindow().location.href, true);\n\n    this._checkForErrors(location);\n\n    let {hash} = location;\n\n    if (!hash) {\n      this.ready = true;\n\n      return ret;\n    }\n    if (hash.includes('#')) {\n      hash = hash.substr(1);\n    }\n    location.hash = querystring.parse(hash);\n    if (location.hash.state) {\n      location.hash.state = JSON.parse(base64.decode(location.hash.state));\n    }\n    const tokenData = this._parseHash(location);\n\n    if (!tokenData) {\n      return ret;\n    }\n    this._cleanUrl(location);\n\n    // Wait until nextTick in case `credentials` hasn't initialized yet\n    process.nextTick(() => {\n      this.webex.credentials.set({supertoken: tokenData});\n      this.ready = true;\n    });\n\n    return ret;\n  },\n\n  /**\n   * Kicks off an oauth flow\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} options\n   * @returns {Promise}\n   */\n  initiateLogin(options = {}) {\n    options.state = options.state || {};\n    options.state.csrf_token = this._generateSecurityToken();\n\n    // If we're not explicitly a confidential client, assume we're a public\n    // client\n    if (this.config.clientType === 'confidential') {\n      return this.initiateAuthorizationCodeGrant(options);\n    }\n\n    return this.initiateImplicitGrant(options);\n  },\n\n  @whileInFlight('isAuthorizing')\n  /**\n   * Kicks off the Authorization Code grant flow. Typically called via\n   * {@link AuthorizationBrowser#initiateLogin}\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} options\n   * @returns {Promise}\n   */\n  initiateImplicitGrant(options) {\n    this.logger.info('authorization: initiating implicit grant flow');\n    this.webex.getWindow().location = this.webex.credentials.buildLoginUrl(Object.assign({response_type: 'token'}, options));\n\n    return Promise.resolve();\n  },\n\n  @whileInFlight('isAuthorizing')\n  /**\n   * Kicks off the Implicit Code grant flow. Typically called via\n   * {@link AuthorizationBrowser#initiateLogin}\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} options\n   * @returns {Promise}\n   */\n  initiateAuthorizationCodeGrant(options) {\n    this.logger.info('authorization: initiating authorization code grant flow');\n    this.webex.getWindow().location = this.webex.credentials.buildLoginUrl(Object.assign({response_type: 'code'}, options));\n\n    return Promise.resolve();\n  },\n\n  @oneFlight\n  /**\n   * Requests a Webex Teams access token for a user already authenticated into\n   * your product.\n   *\n   * Note: You'll need to supply a jwtRefreshCallback of the form\n   * `Promise<jwt> = jwtRefreshCallback(webex)` for automatic token refresh to\n   * work.\n   *\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} options\n   * @param {Object} options.jwt This is a jwt generated by your backend that\n   * identifies a user in your system\n   * @returns {Promise}\n   */\n  requestAccessTokenFromJwt({jwt}) {\n    let hydraUri = this.webex.internal.services.get('hydra', true);\n\n    if (hydraUri) {\n      // add a `/` to hydra's uri from the services catalog so that\n      // it matches the current env service format.\n      hydraUri += '/';\n    }\n\n    hydraUri = hydraUri ||\n      process.env.HYDRA_SERVICE_URL ||\n      'https://api.ciscospark.com/v1/';\n\n    return this.webex.request({\n      method: 'POST',\n      uri: `${hydraUri}jwt/login`,\n      headers: {\n        authorization: jwt\n      }\n    })\n      .then(({body}) => ({\n        access_token: body.token,\n        token_type: 'Bearer',\n        expires_in: body.expiresIn\n      }))\n      .then((token) => {\n        this.webex.credentials.set({\n          supertoken: token\n        });\n      });\n  },\n\n  /**\n   * Called by {@link WebexCore#logout()}. Redirects to the logout page\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} options\n   * @param {boolean} options.noRedirect if true, does not redirect\n   * @returns {Promise}\n   */\n  logout(options = {}) {\n    if (!options.noRedirect) {\n      this.webex.getWindow().location = this.webex.credentials.buildLogoutUrl(options);\n    }\n  },\n\n  /**\n   * Checks if the result of the login redirect contains an error string\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} location\n   * @private\n   * @returns {Promise}\n   */\n  _checkForErrors(location) {\n    const {query} = location;\n\n    if (query && query.error) {\n      const ErrorConstructor = grantErrors.select(query.error);\n\n      throw new ErrorConstructor(query);\n    }\n  },\n\n  /**\n   * Removes no-longer needed values from the url (access token, csrf token, etc)\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} location\n   * @private\n   * @returns {Promise}\n   */\n  _cleanUrl(location) {\n    location = cloneDeep(location);\n    if (this.webex.getWindow().history && this.webex.getWindow().history.replaceState) {\n      [\n        'access_token',\n        'token_type',\n        'expires_in',\n        'refresh_token',\n        'refresh_token_expires_in'\n      ].forEach((key) => Reflect.deleteProperty(location.hash, key));\n      if (!isEmpty(location.hash.state)) {\n        location.hash.state = base64.encode(JSON.stringify(omit(location.hash.state, 'csrf_token')));\n        if (location.hash.state === EMPTY_OBJECT_STRING) {\n          Reflect.deleteProperty(location.hash, 'state');\n        }\n      }\n      else {\n        Reflect.deleteProperty(location.hash, 'state');\n      }\n      location.hash = querystring.stringify(location.hash);\n      this.webex.getWindow().history.replaceState({}, null, url.format(location));\n    }\n  },\n\n  /**\n   * Generates a CSRF token and sticks in in sessionStorage\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @private\n   * @returns {Promise}\n   */\n  _generateSecurityToken() {\n    this.logger.info('authorization: generating csrf token');\n\n    const token = uuid.v4();\n\n    this.webex.getWindow().sessionStorage.setItem('oauth2-csrf-token', token);\n\n    return token;\n  },\n\n  /**\n   * Parses the url hash into an access token object\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} location\n   * @private\n   * @returns {Object}\n   */\n  _parseHash(location) {\n    const hash = cloneDeep(location.hash);\n\n    if (hash) {\n      this._verifySecurityToken(hash);\n    }\n    if (!hash.access_token) {\n      this.ready = true;\n\n      return undefined;\n    }\n    if (hash.expires_in) {\n      hash.expires_in = parseInt(hash.expires_in, 10);\n    }\n    if (hash.refresh_token_expires_in) {\n      hash.refresh_token_expires_in = parseInt(hash.refresh_token_expires_in, 10);\n    }\n\n    return hash;\n  },\n\n  /**\n   * Checks if the CSRF token in sessionStorage is the same as the one returned\n   * in the url.\n   * @instance\n   * @memberof AuthorizationBrowser\n   * @param {Object} hash\n   * @private\n   * @returns {Promise}\n   */\n  _verifySecurityToken(hash) {\n    const sessionToken = this.webex.getWindow().sessionStorage.getItem(OAUTH2_CSRF_TOKEN);\n\n    this.webex.getWindow().sessionStorage.removeItem(OAUTH2_CSRF_TOKEN);\n    if (!sessionToken) {\n      return;\n    }\n\n    if (!hash.state) {\n      throw new Error(`Expected CSRF token ${sessionToken}, but not found in redirect hash`);\n    }\n\n    if (!hash.state.csrf_token) {\n      throw new Error(`Expected CSRF token ${sessionToken}, but not found in redirect hash`);\n    }\n\n    const token = hash.state.csrf_token;\n\n    if (token !== sessionToken) {\n      throw new Error(`CSRF token ${token} does not match stored token ${sessionToken}`);\n    }\n  }\n});\n\nexport default Authorization;\n"]}