{"version":3,"sources":["index.js"],"names":["safeSetTimeout","safeSetInterval","timer","setTimeout","unref","interval","setInterval"],"mappings":";;;;;QAWgBA,c,GAAAA,c;QAiBAC,e,GAAAA,e;AA5BhB;;;;AAIA;;;;;;;AAOO,SAASD,cAAT,GAAiC;AACtC,MAAME,QAAQC,sCAAd;;AAEA,MAAID,MAAME,KAAV,EAAiB;AACfF,UAAME,KAAN;AACD;;AAED,SAAOF,KAAP;AACD;;AAED;;;;;;;AAOO,SAASD,eAAT,GAAkC;AACvC,MAAMI,WAAWC,uCAAjB;;AAEA,MAAID,SAASD,KAAb,EAAoB;AAClBC,aAASD,KAAT;AACD;;AAED,SAAOC,QAAP;AACD","file":"index.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n/**\n * Wrapper around setTimout which (in node) unrefs the returned timer to avoid\n * wedging the process open unexpectedly.\n * @param {Mixed} args\n * @protected\n * @returns {Timer|Number}\n */\nexport function safeSetTimeout(...args) {\n  const timer = setTimeout(...args);\n\n  if (timer.unref) {\n    timer.unref();\n  }\n\n  return timer;\n}\n\n/**\n * Wrapper around setTimout which (in node) unrefs the returned timer to avoid\n * wedging the process open unexpectedly.\n * @param {Mixed} args\n * @protected\n * @returns {Timer|Number}\n */\nexport function safeSetInterval(...args) {\n  const interval = setInterval(...args);\n\n  if (interval.unref) {\n    interval.unref();\n  }\n\n  return interval;\n}\n"]}