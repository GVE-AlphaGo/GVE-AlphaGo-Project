'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _webexCore = require('@webex/webex-core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class
 * @extends {Lyra}
 * @memberof Lyra
 */
var Device = _webexCore.WebexPlugin.extend({
  namespace: 'Lyra',

  /**
   * Gets the audio state of the device
   * @param {Types~LyraSpace} space
   * @param {string} space.url
   * @returns {Promise<LyraAudioState>} {volume, microphones, url}
   */
  getAudioState: function getAudioState(space) {
    return this.webex.request({
      method: 'GET',
      uri: space.url + '/audio'
    }).then(function (res) {
      return res.body;
    });
  },


  /**
   * Updates audio state for lyra device, should be called every 10 minutes or
   * when mic or volume state is changed
   * @param {Types~LyraSpace} space
   * @param {string} space.url
   * @param {Types~LyraAudioState} audioState
   * @param {object} audioState.volume optional
   * @param {boolean} audioState.volume.level
   * @param {object} audioState.microphones optional
   * @param {boolean} audioState.microphones.muted
   * @param {string} audioState.deviceUrl
   * @returns {Promise}
   */
  putAudioState: function putAudioState(space) {
    var audioState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (!audioState.deviceUrl) {
      return _promise2.default.reject(new Error('audioState.deviceUrl is required'));
    }

    return this.webex.request({
      method: 'PUT',
      uri: space.url + '/audio',
      body: audioState
    }).then(function (res) {
      return res.body;
    });
  },


  /**
   * Mutes lyra device
   * @param {Types~LyraSpace} space
   * @param {string} space.url
   * @returns {Promise}
   */
  mute: function mute(space) {
    return this.webex.request({
      method: 'POST',
      uri: space.url + '/audio/microphones/actions/mute/invoke'
    });
  },


  /**
   * Unmutes lyra device
   * @param {Types~LyraSpace} space
   * @param {string} space.url
   * @returns {Promise}
   */
  unmute: function unmute(space) {
    return this.webex.request({
      method: 'POST',
      uri: space.url + '/audio/microphones/actions/un-mute/invoke'
    });
  },


  /**
   * Increases lyra device's volume
   * @param {Types~LyraSpace} space
   * @param {string} space.url
   * @returns {Promise}
   */
  increaseVolume: function increaseVolume(space) {
    return this.webex.request({
      method: 'POST',
      uri: space.url + '/audio/volume/actions/increase/invoke'
    });
  },


  /**
   * Decreases lyra device's volume
   * @param {Types~LyraSpace} space
   * @param {string} space.url
   * @returns {Promise}
   */
  decreaseVolume: function decreaseVolume(space) {
    return this.webex.request({
      method: 'POST',
      uri: space.url + '/audio/volume/actions/decrease/invoke'
    });
  },


  /**
   * Sets lyra device's volume but should use increase and decrease api instead
   * @param {Types~LyraSpace} space
   * @param {string} space.url
   * @param {integer} level to be set
   * @returns {Promise}
   */
  setVolume: function setVolume(space) {
    var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    return this.webex.request({
      method: 'POST',
      uri: space.url + '/audio/volume/actions/set/invoke',
      body: {
        level: level
      }
    });
  },
  version: '1.80.147'
}); /*!
     * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
     */

exports.default = Device;
//# sourceMappingURL=device.js.map
