{"version":3,"sources":["space.js"],"names":["Space","WebexPlugin","extend","namespace","list","webex","request","method","api","resource","then","res","body","items","get","space","spaceId","id","identity","reject","Error","join","options","passType","pass","type","deviceUrl","internal","device","url","data","verificationInitiation","uri","leave","removeAllDevices","params","base64","toBase64Url","querystring","stringify","verifyOccupant","occupantId","getCurrentBindings","bindConversation","conversation","kmsResourceObjectUrl","kmsMessage","resourceUri","userIds","conversationUrl","_bindConversation","resolve","encodedDeviceUrl","encode","bindingCleanupAfterCall","unbindConversation","parameters","authId","encryption","kms","prepareRequest","req","wrapped","deleteBinding","bindingId"],"mappings":"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","file":"space.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {WebexPlugin} from '@webex/webex-core';\nimport querystring from 'querystring';\nimport {base64} from '@webex/common';\n\n/**\n * @class\n * @extends {Lyra}\n * @memberof Lyra\n */\nconst Space = WebexPlugin.extend({\n  namespace: 'Lyra',\n\n  /**\n   * Lists lyra spaces associated with user\n   *\n   * @returns {Promise<Array>} spaces\n   */\n  list() {\n    return this.webex.request({\n      method: 'GET',\n      api: 'lyra',\n      resource: '/spaces'\n    })\n      .then((res) => res.body.items);\n  },\n\n  /**\n   * Retrieves a lyra space info\n   * @param {Types~LyraSpace} space\n   * @param {string} space.id\n   * @param {string} space.identity.id\n   * @returns {Promise<LyraSpace>} response body\n   */\n  get(space = {}) {\n    const spaceId = space.id || space.identity && space.identity.id;\n\n    if (!spaceId) {\n      return Promise.reject(new Error('space.id is required'));\n    }\n\n    return this.webex.request({\n      method: 'GET',\n      api: 'lyra',\n      resource: `/spaces/${spaceId}`\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Joins a lyra space, update every 10 minutes to keep alive for MANUAL\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {object} options\n   * @param {string} options.passType\n   * @param {string} options.data additional data such as proof for ultrasound\n   * @param {string} options.uri use a custom uri\n   * @returns {Promise}\n   */\n  join(space, options) {\n    options = Object.assign({\n      passType: 'MANUAL'\n    }, options);\n\n    const body = {\n      pass: {\n        type: options.passType\n      },\n      deviceUrl: this.webex.internal.device.url\n    };\n\n    if (options.data) {\n      body.pass.data = options.data;\n    }\n\n    if (options.verificationInitiation) {\n      body.verificationInitiation = options.verificationInitiation;\n    }\n\n    // if options.uri is available use it, since that would have the\n    // complete lyra service URL\n    if (options.uri) {\n      return this.webex.request({\n        method: 'PUT',\n        uri: options.uri,\n        body\n      });\n    }\n\n    return this.webex.request({\n      method: 'PUT',\n      api: 'lyra',\n      resource: `${space.url}/occupants/@me`,\n      body\n    });\n  },\n\n  /**\n   * Leaves a lyra space\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {object} options\n   * @param {boolean} options.removeAllDevices remove all devices of current user also\n   * @returns {Promise}\n   */\n  leave(space, options = {}) {\n    // all devices are removed by default (when deviceUrl is not supplied)\n    let uri = `${space.url}/occupants/@me`;\n\n    if (!options.removeAllDevices) {\n      const params = {\n        deviceUrl: base64.toBase64Url(this.webex.internal.device.url)\n      };\n\n      uri += `?${querystring.stringify(params)}`;\n    }\n\n    return this.webex.request({\n      method: 'DELETE',\n      api: 'lyra',\n      resource: uri\n    });\n  },\n\n  /**\n   * Verifies a space occupant (to be used by the lyra device)\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {string} occupantId id of user to verify\n   * @returns {Promise}\n   */\n  verifyOccupant(space, occupantId) {\n    const body = {\n      pass: {\n        type: 'VERIFICATION'\n      }\n    };\n\n    return this.webex.request({\n      method: 'PUT',\n      uri: `${space.url}/occupants/${occupantId}`,\n      body\n    });\n  },\n\n\n  /**\n   * Gets the state of bindings in this Lyra space\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  getCurrentBindings(space) {\n    return this.webex.request({\n      method: 'GET',\n      uri: `${space.url}/bindings`\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Binds a conversation to lyra space\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {string} space.id\n   * @param {string} space.identity.id\n   * @param {Types~Conversation} conversation\n   * @param {string} conversation.kmsResourceObjectUrl\n   * @param {string} conversation.url\n   * @param {object} options\n   * @param {boolean} options.uri complete lyra service URL\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  bindConversation(space = {}, conversation = {}, options = {}) {\n    const spaceId = space.id || space.identity && space.identity.id;\n\n    if (!space.url) {\n      return Promise.reject(new Error('space.url is required'));\n    }\n\n    if (!spaceId) {\n      return Promise.reject(new Error('space.id is required'));\n    }\n\n    if (!conversation.kmsResourceObjectUrl) {\n      return Promise.reject(new Error('conversation.kmsResourceObjectUrl is required'));\n    }\n\n    if (!conversation.url) {\n      return Promise.reject(new Error('conversation.url is required'));\n    }\n\n    const body = {\n      kmsMessage: {\n        method: 'create',\n        uri: '/authorizations',\n        resourceUri: `${conversation.kmsResourceObjectUrl}`,\n        userIds: [spaceId]\n      },\n      conversationUrl: conversation.url\n    };\n\n    const request = {\n      method: 'POST',\n      body\n    };\n\n    // if options.uri is available use it, since that would have the\n    // complete lyra service URL\n    if (options.uri) {\n      request.uri = options.uri;\n    }\n    else {\n      request.api = 'lyra';\n      request.resource = `${space.url}/bindings`;\n    }\n\n    return this._bindConversation(spaceId)\n      .then(() => this.webex.request(request))\n      .then((res) => res.body);\n  },\n\n  /**\n   * Binds a conversation to lyra space by posting capabilities to Lyra.\n   *\n   * Lyra no longer automatically enables binding for a space containing a device with type \"SPARK_BOARD\".\n   * Webexboard now is running the CE code stack which supports posting of capabilities to Lyra.\n   * @param {String} spaceId space ID\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  _bindConversation(spaceId) {\n    // Skip until we can bind a conversation to lyra space by posting capabilities to Lyra.\n    /* eslint no-unreachable: 1 */\n    return Promise.resolve();\n\n    // PUT /lyra/api/v1/spaces/{spaceId}/devices/{encodedDeviceUrl}/capabilities\n    const encodedDeviceUrl = base64.encode(this.webex.internal.device.url);\n    const resource = `spaces/${spaceId}/devices/${encodedDeviceUrl}/capabilities`;\n\n    return this.webex.request({\n      method: 'PUT',\n      api: 'lyra',\n      resource,\n      body: {\n        bindingCleanupAfterCall: true\n      }\n    });\n  },\n\n  /**\n   * Removes binding between a conversation and a lyra space using conversation\n   * url\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {string} space.id\n   * @param {string} space.identity.id\n   * @param {Types~Conversation} conversation\n   * @param {string} conversation.kmsResourceObjectUrl\n   * @param {string} conversation.url\n   * @param {object} options\n   * @param {boolean} options.uri complete lyra service URL\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  unbindConversation(space = {}, conversation = {}, options = {}) {\n    const spaceId = space.id || space.identity && space.identity.id;\n\n    if (!space.url) {\n      return Promise.reject(new Error('space.url is required'));\n    }\n\n    if (!spaceId) {\n      return Promise.reject(new Error('space.id is required'));\n    }\n\n    if (!conversation.url) {\n      return Promise.reject(new Error('conversation.url is required'));\n    }\n\n    if (!conversation.kmsResourceObjectUrl) {\n      return Promise.reject(new Error('conversation.kmsResourceObjectUrl is required'));\n    }\n\n    const parameters = {\n      kmsMessage: {\n        method: 'delete',\n        uri: `${conversation.kmsResourceObjectUrl}/authorizations?${querystring.stringify({authId: spaceId})}`\n      },\n      conversationUrl: base64.toBase64Url(conversation.url)\n    };\n\n    return this.webex.internal.encryption.kms.prepareRequest(parameters.kmsMessage)\n      .then((req) => {\n        parameters.kmsMessage = req.wrapped;\n        // if options.uri is available use it, since that would have the\n        // complete lyra service URL\n        if (options.uri) {\n          return this.webex.request({\n            method: 'DELETE',\n            uri: `${options.uri}?${querystring.stringify(parameters)}`\n          });\n        }\n\n        return this.webex.request({\n          method: 'DELETE',\n          api: 'lyra',\n          resource: `${space.url}/bindings?${querystring.stringify(parameters)}`\n        });\n      });\n  },\n\n  /**\n   * Delete a binding using binding id\n   * @param {Types~LyraSpace} space\n   * @param {string} space.url\n   * @param {string} space.identity.id\n   * @param {object} options\n   * @param {string} options.kmsResourceObjectUrl\n   * @param {string} options.bindingId\n   * @returns {Promise<LyraBindings>} bindings response body\n   */\n  deleteBinding(space = {}, options = {}) {\n    const spaceId = space.id || space.identity && space.identity.id;\n\n    if (!space.url) {\n      return Promise.reject(new Error('space.url is required'));\n    }\n\n    if (!spaceId) {\n      return Promise.reject(new Error('space.id is required'));\n    }\n\n    if (!options.kmsResourceObjectUrl) {\n      return Promise.reject(new Error('options.kmsResourceObjectUrl is required'));\n    }\n\n    if (!options.bindingId) {\n      return Promise.reject(new Error('options.bindingId is required'));\n    }\n\n    const parameters = {\n      kmsMessage: {\n        method: 'delete',\n        uri: `${options.kmsResourceObjectUrl}/authorizations?${querystring.stringify({authId: spaceId})}`\n      }\n    };\n\n    return this.webex.internal.encryption.kms.prepareRequest(parameters.kmsMessage)\n      .then((req) => {\n        parameters.kmsMessage = req.wrapped;\n\n        return this.webex.request({\n          method: 'DELETE',\n          uri: `${space.url}/bindings/${options.bindingId}?${querystring.stringify(parameters)}`\n        });\n      });\n  }\n});\n\nexport default Space;\n"]}