{"version":3,"sources":["memberships.js"],"names":["debug","require","Memberships","WebexPlugin","extend","listen","webex","SDK_EVENT","EXTERNAL","RESOURCE","MEMBERSHIPS","then","envelope","eventEnvelope","internal","mercury","connect","listenTo","INTERNAL","TEAMS_ACTIVITY","event","onWebexApiEvent","create","membership","request","method","service","resource","body","res","get","id","items","list","options","qs","Page","listWithReadStatus","deconstructedId","roomId","conversation","cluster","participantAckFilter","activitiesLimit","resp","roomUUID","particpants","participants","lastReadInfo","roomType","tags","myId","me","isRoomHidden","includes","ACTIVITY_TAG","HIDDEN","i","length","participant","participantInfo","entryUUID","personId","personEmail","entryEmailAddress","entryEmail","personDisplayName","displayName","personOrgId","orgId","isMonitor","roomProperties","lastSeenId","lastSeenActivityUUID","lastSeenDate","lastSeenActivityDate","isModerator","push","resolve","e","reject","remove","statusCode","undefined","update","updateLastSeen","message","activity","acknowledge","ack","object","actor","target","emailAddress","created","published","data","verb","ACTIVITY_VERB","CREATE","membershipCreatedEventDataArray","map","output","getMembershipEvent","EVENT_TYPE","CREATED","forEach","trigger","ADD","membershipCreatedEventData","LEAVE","membershipDeletedEventData","DELETED","ADD_MODERATOR","REMOVE_MODERATOR","HIDE","membershipUpdatedEventData","UPDATED","ACKNOWLEDGE","membershipSeenEventData","SEEN","sdkEvent","member","space","actorId","SPACE_TYPE","DIRECT","ACTIVITY_FIELD","ACTOR","TARGET","OBJECT","logger","error"],"mappings":"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","file":"memberships.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {\n  ensureConvoAvailability,\n  SDK_EVENT,\n  createEventEnvelope,\n  ensureMyIdIsAvailable,\n  buildHydraMembershipId,\n  buildHydraMessageId,\n  buildHydraOrgId,\n  buildHydraPersonId,\n  buildHydraRoomId,\n  getHydraRoomType,\n  deconstructHydraId\n} from '@webex/common';\nimport {WebexPlugin, Page} from '@webex/webex-core';\nimport {cloneDeep} from 'lodash';\n\nconst debug = require('debug')('memberships');\n\n/**\n * @typedef {Object} MembershipObject\n * @property {string} id - Unique identifier for the membership\n * @property {string} roomId - The room ID\n * @property {string} personId - The person ID\n * @property {email} personEmail - The email address of the person / room member\n * @property {boolean} isModerator - Indicates whether the specified person should be a room moderator\n * @property {boolean} isMonitor - Indicates whether the specified member is a room monitor\n * @property {isoDate} created - The date and time that this membership was created\n */\n\n/**\n * Memberships represent a person's relationship to a room. Use this API to list\n * members of any room that you're in or create memberships to invite someone\n * to a room. Memberships can also be updated to make someone a moderator\n * or deleted to remove them from the room.\n * @class\n * @name Memberships\n */\nconst Memberships = WebexPlugin.extend({\n  /**\n   * Register to listen for incoming membership events\n   * This is an alternate approach to registering for membership webhooks.\n   * The events passed to any registered handlers will be similar to the webhook JSON,\n   * but will omit webhook specific fields such as name, secret, url, etc.\n   * To utilize the `listen()` method, the authorization token used\n   * will need to have `spark:all` and `spark:kms` scopes enabled.\n   * Note that by configuring your application to enable or disable `spark:all`\n   * via its configuration page will also enable or disable `spark:kms`.\n   * See the <a href=\"https://js.samples.s4d.io/browser-socket/\">Sample App</a>\n   * for more details.\n   * @instance\n   * @memberof Memberships\n   * @returns {Promise}\n   * @example\n   * webex.memberships.listen()\n   *   .then(() => {\n   *     console.log('listening to membership events');\n   *     webex.memberships.on('created', (event) => {\n   *       console.log(`Got a membership:created event:\\n${event}`);\n   *     }\n   *     webex.memberships.on('updated', (event) => {\n   *        console.log(`Got a membership:updated event:\\n${event}`);\n   *     }\n   *     webex.memberships.on('seen', (event) => {\n   *       // This represents a \"read receipt\" and will include a\n   *       // lastSeenId for the message this member has just \"read\",\n   *       // There is currently no equivelent webhook for this event.\n   *       console.log(`Got a membership:seen event:\\n${event}`);\n   *     }\n   *     webex.memberships.on('deleted', (event) =>  => {\n   *       console.log(`Got a membership:created event:\\n${event}`);\n   *     }\n   *   })\n   *   .catch((e) => console.error(`Unable to register for membership events: ${e}`));\n   * // App logic goes here...\n   * // Later when it is time to clean up\n   * webex.memberships.stopListening();\n   * webex.memberships.off('created');\n   * webex.memberships.off('updated');\n   * webex.memberships.off('seen');\n   * webex.memberships.off('deleted');\n\n   */\n  listen() {\n    // Create a common envelope that we will wrap all events in\n    return createEventEnvelope(this.webex,\n      SDK_EVENT.EXTERNAL.RESOURCE.MEMBERSHIPS)\n      .then((envelope) => {\n        this.eventEnvelope = envelope;\n\n        // Register to listen to events\n        return this.webex.internal.mercury.connect().then(() => {\n          this.listenTo(this.webex.internal.mercury,\n            SDK_EVENT.INTERNAL.TEAMS_ACTIVITY,\n            (event) => this.onWebexApiEvent(event));\n        });\n      });\n  },\n\n  /**\n   * Adds a person to a room. The person can be added by ID (`personId`) or by\n   * Email Address (`personEmail`). The person can be optionally added to the room\n   * as a moderator.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * webex.rooms.create({title: 'Create Membership Example'})\n   *   .then(function(room) {\n   *     return webex.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *    });\n   *   })\n   *   .then(function(membership) {\n   *     var assert = require('assert');\n   *     assert(membership.id);\n   *     assert(membership.roomId);\n   *     assert(membership.personId);\n   *     assert(membership.personEmail);\n   *     assert('isModerator' in membership);\n   *     assert('isMonitor' in membership);\n   *     assert(membership.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(membership) {\n    return this.request({\n      method: 'POST',\n      service: 'hydra',\n      resource: 'memberships',\n      body: membership\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single membership.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * var membership;\n   * webex.rooms.create({title: 'Get Membership Example'})\n   *   .then(function(room) {\n   *     return webex.memberships.create({\n   *       personEmail: 'alice@example.com',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return webex.memberships.get(m.id);\n   *   })\n   *   .then(function(m) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(m, membership);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      service: 'hydra',\n      resource: `memberships/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Returns a list of memberships. In most cases the results will only contain\n   * rooms that the authentiated user is a member of. You can filter the results\n   * by room to list people in a room or by person to find rooms that a\n   * specific person is a member of.\n   * @instance\n   * @memberof Memberships\n   * @param {Object} options\n   * @param {string} options.personId\n   * @param {string} options.personEmail\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<MembershipObject>>}\n   * @example\n   * var room;\n   * webex.rooms.create({title: 'List Membership Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 2);\n   *     for (var i = 0; i < memberships.length; i+= 1) {\n   *       assert.equal(memberships.items[i].roomId, room.id);\n   *     }\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: 'hydra',\n      resource: 'memberships',\n      qs: options\n    })\n      .then((res) => new Page(res, this.webex));\n  },\n\n  /**\n   * Returns a list of memberships with details about the lastSeenId for each\n   * user, allowing a client to indicate \"read status\" in a space GUI\n   *\n   * This differs from the memberships.list() function in the following ways:\n   *  -- it accepts only a room or object with a valid roomId\n   *  -- no other options, eg: max, are considered\n   *  -- results are not paginated\n   *  -- memberships in the return do not include the\n   *     \"created\", \"isRoomHidden\", fields\n   *  -- memberships in the return do include the new\n   *    \"lastSeenId\", and \"lastSeenDate\" fields\n   *     these will not exist if the member has never \"seen\" the space\n   *\n   * In general this function should be used only when the\n   * client needs to access read status info.\n   *\n   * This function may be deprecated when this info is provided in the membership\n   * objects returned in the list function.\n   *\n   *\n   * @instance\n   * @memberof Memberships\n   * @param {Object} options\n   * @param {string} options.roomId\n   * @returns {Promise<MembershipObjectList>}\n   */\n  listWithReadStatus(options) {\n    const deconstructedId = deconstructHydraId(options.roomId);\n    const conversation = {\n      id: deconstructedId.id,\n      cluster: deconstructedId.cluster\n    };\n\n    return ensureMyIdIsAvailable(this.webex)\n      .then(() => ensureConvoAvailability(this.webex)\n        .then(() => this.webex.internal.conversation.get(conversation,\n          {\n            participantAckFilter: 'all', // show lastAck info for each participant\n            activitiesLimit: 0 // don't send the whole history of activity\n          })\n          .then((resp) => {\n            try {\n              // We keep track of the last read message by each user\n              const roomUUID = resp.id;\n              const roomId = buildHydraRoomId(roomUUID);\n              const particpants = resp.participants.items;\n              const lastReadInfo = {items: []};\n              const roomType = getHydraRoomType(resp.tags);\n              const myId = this.webex.internal.me.id;\n              const isRoomHidden = resp.tags.includes(SDK_EVENT.INTERNAL.ACTIVITY_TAG.HIDDEN);\n\n              for (let i = 0; i < particpants.length; i += 1) {\n                const participant = particpants[i];\n                const participantInfo = {\n                  id: buildHydraMembershipId(participant.entryUUID, roomUUID),\n                  roomId,\n                  personId: buildHydraPersonId(participant.entryUUID),\n                  personEmail: participant.entryEmailAddress ||\n                    participant.entryEmail,\n                  personDisplayName: participant.displayName,\n                  personOrgId: buildHydraOrgId(participant.orgId),\n                  isMonitor: false, // deprecated, but included for completeness\n                  roomType\n                  // created is not available in the conversations payload\n                };\n\n                if ((isRoomHidden) && (participantInfo.personId === myId)) {\n                  participantInfo.isRoomHidden = isRoomHidden;\n                }\n\n                if ('roomProperties' in participant) {\n                  if ('lastSeenActivityDate' in participant.roomProperties) {\n                    participantInfo.lastSeenId =\n                      buildHydraMessageId(participant.roomProperties.lastSeenActivityUUID);\n                    participantInfo.lastSeenDate =\n                      participant.roomProperties.lastSeenActivityDate;\n                  }\n                  if ('isModerator' in participant.roomProperties) {\n                    participantInfo.isModerator = participant.roomProperties.isModerator;\n                  }\n                }\n\n                lastReadInfo.items.push(participantInfo);\n              }\n\n              return Promise.resolve(lastReadInfo);\n            }\n            catch (e) {\n              return Promise.reject(e);\n            }\n          })));\n  },\n\n  /**\n   * Deletes a single membership.\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise}\n   * @example\n   * var membership, room;\n   * webex.rooms.create({title: 'Remove Membership Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.create({\n   *      personEmail: 'alice@example.com',\n   *      roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     membership = m;\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 2);\n   *     return webex.memberships.remove(membership);\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     var assert = require('assert');\n   *     assert.equal(memberships.length, 1);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: `memberships/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n\n        return res.body;\n      });\n  },\n\n  /**\n   * Used to update a single membership's properties\n   * @instance\n   * @memberof Memberships\n   * @param {MembershipObject|uuid} membership\n   * @returns {Promise<MembershipObject>}\n   * @example\n   * var membership, room;\n   * webex.rooms.create({title: 'Memberships Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.memberships.list({roomId: room.id});\n   *   })\n   *   .then(function(memberships) {\n   *     membership = memberships.items[0];\n   *     var assert = require('assert');\n   *     assert.equal(membership.isModerator, false);\n   *     membership.isModerator = true;\n   *     return webex.memberships.update(membership);\n   *   })\n   *   .then(function() {\n   *     return webex.memberships.get(membership.id);\n   *   })\n   *   .then(function(membership) {\n   *     var assert = require('assert');\n   *     assert.equal(membership.isModerator, true);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  update(membership) {\n    const id = membership.id || membership;\n\n    return this.request({\n      method: 'PUT',\n      service: 'hydra',\n      resource: `memberships/${id}`,\n      body: membership\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * Updates the lastSeenId attribute of a membership.\n   * Call this method to send a \"read receipt\" for a given message.\n   * This will update the lastSeenId for the user's membership in\n   * space where the message is.\n   * @instance\n   * @memberof Memberships\n   * @param {string} message\n   * @returns {Promise<MembershipObject>}\n   */\n  updateLastSeen(message) {\n    const activity = {\n      id: deconstructHydraId(message.id).id\n    };\n    const deconstructedId = deconstructHydraId(message.roomId);\n    const conversation = {\n      id: deconstructedId.id,\n      cluster: deconstructedId.cluster\n    };\n\n    return ensureConvoAvailability(this.webex)\n      .then(() => this.webex.internal.conversation.acknowledge(conversation, activity)\n        .then((ack) => ({\n          lastSeenId: buildHydraMessageId(ack.object.id),\n          id: buildHydraMembershipId(ack.actor.entryUUID,\n            ack.target.id),\n          personId: buildHydraPersonId(ack.actor.entryUUID),\n          personEmail: ack.actor.emailAddress || ack.actor.entryEmail,\n          personDisplayName: ack.actor.displayName,\n          personOrgId: buildHydraOrgId(ack.actor.orgId),\n          roomId: buildHydraRoomId(ack.target.id),\n          roomType: getHydraRoomType(ack.target.tags),\n          isRoomHidden: false, // any activity unhides a space.\n          isMonitor: false, // deprecated, returned for back compat\n          created: ack.published\n        })));\n  },\n\n  /**\n   * This function is called when an internal membership events fires,\n   * if the user registered for these events with the public listen() method.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Memberships\n   * @param {Object} event\n   * @returns {void}\n   */\n  onWebexApiEvent(event) {\n    const {activity} = event.data;\n\n    /* eslint-disable no-case-declarations */\n    switch (activity.verb) {\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.CREATE:\n        const membershipCreatedEventDataArray =\n          activity.object.participants.items.map((participant) => {\n            const output = cloneDeep(activity);\n\n            output.target = cloneDeep(activity.object);\n            output.object = cloneDeep(participant);\n\n            return this.getMembershipEvent(output,\n              SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n          });\n\n        membershipCreatedEventDataArray.forEach((data) => {\n          if (data) {\n            debug(`membership \"created\" payload: ${JSON.stringify(data)}`);\n            this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, data);\n          }\n        });\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.ADD:\n        const membershipCreatedEventData =\n          this.getMembershipEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n\n        if (membershipCreatedEventData) {\n          debug(`membership \"created\" payload: \\\n            ${JSON.stringify(membershipCreatedEventData)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, membershipCreatedEventData);\n        }\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.LEAVE:\n        const membershipDeletedEventData =\n          this.getMembershipEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED);\n\n        if (membershipDeletedEventData) {\n          debug(`membership \"deleted\" payload: \\\n            ${JSON.stringify(membershipDeletedEventData)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED, membershipDeletedEventData);\n        }\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.ADD_MODERATOR:\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.REMOVE_MODERATOR:\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE:\n        const membershipUpdatedEventData =\n          this.getMembershipEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.UPDATED);\n\n        if (membershipUpdatedEventData) {\n          debug(`membership \"updated\" payload: \\\n            ${JSON.stringify(membershipUpdatedEventData)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.UPDATED, membershipUpdatedEventData);\n        }\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE:\n        const membershipSeenEventData =\n          this.getMembershipEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.SEEN);\n\n        if (membershipSeenEventData) {\n          debug(`membership \"updated\" payload: \\\n            ${JSON.stringify(membershipSeenEventData)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.SEEN, membershipSeenEventData);\n        }\n        break;\n\n      default:\n        break;\n    }\n  },\n\n  /**\n   * Constructs the data object for an event on the memberships resource,\n   * adhering to Hydra's Webehook data structure memberships.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Memberships\n   * @param {Object} activity from mercury\n   * @param {Object} event type of \"webhook\" event\n   * @returns {Object} constructed event\n   */\n  getMembershipEvent(activity, event) {\n    try {\n      const sdkEvent = cloneDeep(this.eventEnvelope);\n      let member;\n      let space;\n\n      sdkEvent.event = event;\n      sdkEvent.data.created = activity.published;\n      sdkEvent.actorId = buildHydraPersonId(activity.actor.entryUUID);\n      if (activity.verb !== SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE) {\n        sdkEvent.data.roomId = buildHydraRoomId(activity.target.id);\n        sdkEvent.data.roomType = getHydraRoomType(activity.target.tags);\n        sdkEvent.data.isRoomHidden = false; // any activity unhides a space.\n      }\n      else {\n        sdkEvent.data.roomId = buildHydraRoomId(activity.object.id);\n        sdkEvent.data.roomType = SDK_EVENT.EXTERNAL.SPACE_TYPE.DIRECT;\n        // currently hidden attribute is only set on 1-1\n        sdkEvent.data.isRoomHidden = true;\n      }\n      if (activity.verb !== SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE) {\n        if ((activity.object.roomProperties) && (activity.object.roomProperties.isModerator)) {\n          sdkEvent.data.isModerator = true;\n        }\n        else {\n          sdkEvent.data.isModerator = false;\n        }\n      }\n      // This is deprecated but still sent in the webhooks\n      // We won't send it for our new SDK events\n      // sdkEvent.data.isMonitor = false;\n\n      if (activity.verb === SDK_EVENT.INTERNAL.ACTIVITY_VERB.ACKNOWLEDGE) {\n        // For a read receipt the person is the \"actor\" or the one who did the reading\n        member = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.ACTOR;\n        // The space with the read message is the \"target\"\n        space = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.TARGET;\n        // And the \"object\" is the message that was last seen\n        sdkEvent.data.lastSeenId = buildHydraMessageId(activity.object.id);\n      }\n      else if (activity.verb === SDK_EVENT.INTERNAL.ACTIVITY_VERB.HIDE) {\n        // For a hide activity the person is also the \"actor\"\n        member = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.ACTOR;\n        // But the space is now the \"object\"\n        space = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.OBJECT;\n      }\n      else {\n        // For most memberships events the person is the 'object\"\n        member = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.OBJECT;\n        // and the space is the \"target\"\n        space = SDK_EVENT.INTERNAL.ACTIVITY_FIELD.TARGET;\n      }\n\n      sdkEvent.data.id = buildHydraMembershipId(activity[member].entryUUID,\n        activity[space].id);\n      sdkEvent.data.personId = buildHydraPersonId(activity[member].entryUUID);\n      sdkEvent.data.personEmail =\n        activity[member].emailAddress || activity[member].entryEmail;\n      sdkEvent.data.personDisplayName = activity[member].displayName;\n      sdkEvent.data.personOrgId = buildHydraOrgId(activity[member].orgId);\n\n      return sdkEvent;\n    }\n    catch (e) {\n      this.webex.logger.error(`Unable to generate SDK event from mercury \\\n'socket activity for memberships:${event} event: ${e.message}`);\n\n      return null;\n    }\n  }\n\n});\n\nexport default Memberships;\n"]}