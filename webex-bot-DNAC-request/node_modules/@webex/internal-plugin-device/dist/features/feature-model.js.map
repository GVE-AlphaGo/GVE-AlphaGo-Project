{"version":3,"sources":["feature-model.js"],"names":["FeatureModel","AmpState","extend","idAttribute","props","key","lastModified","mutable","type","val","value","constructor","attrs","options","parse","prototype","model","parsedModel","Number","FEATURE_TYPES","NUMBER","BOOLEAN","STRING","serialize","args","Date","toISOString","set","optns"],"mappings":"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","file":"feature-model.js","sourcesContent":["// External dependencies.\nimport AmpState from 'ampersand-state';\nimport {defaults, isObject} from 'lodash';\n\nimport {FEATURE_TYPES} from '../constants';\n\n/**\n * The model returned from the {@link FeatureModel#parse} method.\n *\n * @typedef {Object} ParsedFeatureModel\n * @property {boolean|number|string} ParsedFeatureModel.value - The parsed val.\n * @property {string} ParsedFeatureModel.type - The type of the parsed val.\n */\n\n/**\n * Feature model.\n *\n * @description\n * This model contains details on a single feature and is received from the\n * **WDM** service upon registration.\n */\nconst FeatureModel = AmpState.extend({\n\n  idAttribute: 'key', // needed by Ampersand to determine unique item\n\n  // Ampersand property members.\n\n  props: {\n    /**\n     * Contains the unique identifier for this feature to be addressed by.\n     *\n     * @type {string}\n     */\n    key: 'string',\n\n    /**\n     * This property contains the date in which this feature was last modified.\n     *\n     * @type {date}\n     */\n    lastModified: 'date',\n\n    /**\n     * This property defines whether or not the feature is mutable.\n     *\n     * @type {boolean}\n     */\n    mutable: 'boolean',\n\n    /**\n     * This property contains the data type the string value should be\n     * interpreted as.\n     *\n     * @type {FEATURE_TYPES}\n     */\n    type: 'string',\n\n    /**\n     * This property contains the string value of this feature.\n     *\n     * @type {string}\n     */\n    val: 'string',\n\n    /**\n     * This property contains the interpreted value of this feature.\n     *\n     * @type {any}\n     */\n    value: 'any'\n  },\n\n  /**\n   * Class object constructor. This method safely initializes the class object\n   * prior to it fully loading to allow data to be accessed and modified\n   * immediately after construction instead of initialization.\n   *\n   * @override\n   * @param {Object} attrs - An object to map against the feature's properties.\n   * @param {Object} [options={}] - Ampersand options for `parse` and `parent`.\n   */\n  constructor(attrs, options = {}) {\n    defaults(options, {parse: true});\n\n    return Reflect.apply(\n      AmpState.prototype.constructor,\n      this,\n      [attrs, options]\n    );\n  },\n\n  // Ampsersand method members.\n\n  /**\n   * Parse {@link FeatureModel} properties recieved as strings from **WDM**\n   * and cast them as their appropriate types.\n   *\n   * @private\n   * @memberof FeatureModel\n   * @param {Object} model - The model to parse.\n   * @property {string} model.val - The value to be parsed.\n   * @returns {ParsedFeatureModel} - The parsed model.\n   */\n  parse(model) {\n    // Validate that a model was provided and that it is an object.\n    if (!model || typeof model !== 'object') {\n      // Return an empty object to satisfy the requirements of `Ampersand`.\n      return {};\n    }\n\n    const parsedModel = {...model};\n    const {val} = parsedModel;\n\n    // Validate that the value is a number.\n    if (!Number.isNaN(Number(val))) {\n      parsedModel.type = FEATURE_TYPES.NUMBER;\n      parsedModel.value = Number(val);\n    }\n    // Validate if the value should be a true boolean.\n    else if (val === 'true') {\n      parsedModel.type = FEATURE_TYPES.BOOLEAN;\n      parsedModel.value = true;\n    }\n    // Validate if the value should be a false boolean.\n    else if (val === 'false') {\n      parsedModel.type = FEATURE_TYPES.BOOLEAN;\n      parsedModel.value = false;\n    }\n    // In all other cases, the value is string, even if it is undefined.\n    else {\n      parsedModel.type = FEATURE_TYPES.STRING;\n      parsedModel.value = val;\n    }\n\n    return parsedModel;\n  },\n\n  /**\n   * Serialize the feature using the parent ampersand method with its date as an\n   * ISO string. This converts the feature into a request-transportable object.\n   *\n   * @override\n   * @param  {Record<string,boolean>} [args] - List of properties to serialize.\n   * @returns {Object} - The request-ready transport object.\n   */\n  serialize(...args) {\n    // Call the overloaded class member.\n    const attrs = Reflect.apply(AmpState.prototype.serialize, this, args);\n\n    // Validate that the overloaded class member returned an object with the\n    // `lastModified` key-value pair and instance it as an ISO string.\n    if (attrs.lastModified) {\n      attrs.lastModified = (new Date(attrs.lastModified).toISOString());\n    }\n\n    return attrs;\n  },\n\n  /**\n   * Set a property of this object to a specific value. This method utilizes\n   * code that exists within the `ampersand-state` dependency to handle\n   * scenarios in which `key = {\"key\": \"value\"}` or\n   * `key = \"key\", value = \"value\"`. Since the snippet is pulled directly from\n   * `ampersand-state`, there is no need to test both scenarios.\n   *\n   * @override\n   * @param {object | string} key - The key value, or object to be set.\n   * @param {any} value - The key value or object to set the keyed pair to.\n   * @param {any} options - The object to set the keyed pair to.\n   * @returns {any} - The changed property.\n   */\n  set(key, value, options) {\n    // Declare formatted output variables for properly setting the targetted\n    // property for this method.\n    let attrs;\n    let optns;\n\n    // Validate if the key is an instance of any object or not.\n    if (isObject(key) || key === null) {\n      attrs = key;\n      optns = value;\n    }\n    else {\n      attrs = {};\n      attrs[key] = value;\n      optns = options;\n    }\n\n    attrs = this.parse(attrs, optns);\n\n    return Reflect.apply(AmpState.prototype.set, this, [attrs, optns]);\n  }\n});\n\nexport default FeatureModel;\n"]}