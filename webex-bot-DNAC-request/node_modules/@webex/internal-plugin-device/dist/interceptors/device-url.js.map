{"version":3,"sources":["device-url.js"],"names":["DeviceUrlInterceptor","options","headers","service","uri","webex","internal","device","services","url","CISCO_DEVICE_URL","resolve","waitForService","then","getServiceFromUrl","serviceName","name","invalidServices","includes","catch","error","message","match","reject","Interceptor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AAGA;;;;AAEA;;;AATA;;;;IAYqBA,oB;;;;;;;;;;;;AASnB;;;;;8BAKUC,O,EAAS;AAAA,UACVC,OADU,GACeD,OADf,CACVC,OADU;AAAA,UACDC,OADC,GACeF,OADf,CACDE,OADC;AAAA,UACQC,GADR,GACeH,OADf,CACQG,GADR;AAAA,4BAEU,KAAKC,KAAL,CAAWC,QAFrB;AAAA,UAEVC,MAFU,mBAEVA,MAFU;AAAA,UAEFC,QAFE,mBAEFA,QAFE;;AAIjB;;AACA,UACE,CAACD,OAAOE,GAAR,IACCP,WAAWQ,+BAAoBR,OAA/B,IAA0C,CAACA,QAAQQ,2BAAR,CAF9C,EAGE;AACA,eAAO,kBAAQC,OAAR,CAAgBV,OAAhB,CAAP;AACD;;AAED;AACA,aAAOO,SAASI,cAAT,CAAwB,EAACT,gBAAD,EAAUM,KAAKL,GAAf,EAAxB,EACJS,IADI,CACC,UAACJ,GAAD,EAAS;AACb;AADa,oCAEeD,SAASM,iBAAT,CAA2BL,GAA3B,CAFf;AAAA,YAEAM,WAFA,yBAENC,IAFM;;AAGb,YAAMC,kBAAkB,CAAC,UAAD,EAAa,OAAb,EAAsB,MAAtB,CAAxB;;AAEA;AACA;AACA,YAAI,CAACA,gBAAgBC,QAAhB,CAAyBH,WAAzB,CAAL,EAA4C;AAC1C,6BAAId,OAAJ,iBAAyBS,2BAAzB,UAA+CH,OAAOE,GAAtD;AACD;;AAED,eAAOR,OAAP;AACD,OAbI,EAcJkB,KAdI,CAcE,UAACC,KAAD,EAAW;AAChB;AACA,YAAIA,MAAMC,OAAN,CAAcC,KAAd,CAAoB,6BAApB,CAAJ,EAAwD;AACtD,iBAAOrB,OAAP;AACD;;AAED,eAAO,kBAAQsB,MAAR,CAAeH,KAAf,CAAP;AACD,OArBI,CAAP;AAsBD;;;;AAhDD;;;6BAGgB;AACd;AACA,aAAO,IAAIpB,oBAAJ,CAAyB,EAACK,OAAO,IAAR,EAAzB,CAAP;AACD;;;EAP+CmB,qB;;kBAA7BxB,oB","file":"device-url.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {Interceptor} from '@webex/http-core';\nimport {set} from 'lodash';\n\nimport {CISCO_DEVICE_URL} from '../constants';\n\n/**\n  * Adds 'cisco-device-url' header, as appropriate, to requests\n  */\nexport default class DeviceUrlInterceptor extends Interceptor {\n  /**\n   * @returns {DeviceUrlInterceptor}\n   */\n  static create() {\n    /* eslint no-invalid-this: [0] */\n    return new DeviceUrlInterceptor({webex: this});\n  }\n\n  /**\n   * @see Interceptor#onRequest\n   * @param {Object} options\n   * @returns {Object}\n   */\n  onRequest(options) {\n    const {headers, service, uri} = options;\n    const {device, services} = this.webex.internal;\n\n    // Check if header is already set before moving forward\n    if (\n      !device.url ||\n      (headers && CISCO_DEVICE_URL in headers && !headers[CISCO_DEVICE_URL])\n    ) {\n      return Promise.resolve(options);\n    }\n\n    // Wait for catalog and service to be defined.\n    return services.waitForService({service, url: uri})\n      .then((url) => {\n        // Grab the service name with the url returned from waitForService\n        const {name: serviceName} = services.getServiceFromUrl(url);\n        const invalidServices = ['idbroker', 'oauth', 'saml'];\n\n        // Check if service is not one of the invalid services\n        // Assign the url to the device header\n        if (!invalidServices.includes(serviceName)) {\n          set(options, `headers['${CISCO_DEVICE_URL}']`, device.url);\n        }\n\n        return options;\n      })\n      .catch((error) => {\n        // Validate that the error came from getServiceFromUrl\n        if (error.message.match(/was not found after waiting/)) {\n          return options;\n        }\n\n        return Promise.reject(error);\n      });\n  }\n}\n"]}