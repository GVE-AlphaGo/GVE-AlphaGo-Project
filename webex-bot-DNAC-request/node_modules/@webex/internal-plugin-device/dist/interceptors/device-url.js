'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _set2 = require('lodash/set');

var _set3 = _interopRequireDefault(_set2);

var _httpCore = require('@webex/http-core');

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
  * Adds 'cisco-device-url' header, as appropriate, to requests
  */
/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */

var DeviceUrlInterceptor = function (_Interceptor) {
  (0, _inherits3.default)(DeviceUrlInterceptor, _Interceptor);

  function DeviceUrlInterceptor() {
    (0, _classCallCheck3.default)(this, DeviceUrlInterceptor);
    return (0, _possibleConstructorReturn3.default)(this, (DeviceUrlInterceptor.__proto__ || (0, _getPrototypeOf2.default)(DeviceUrlInterceptor)).apply(this, arguments));
  }

  (0, _createClass3.default)(DeviceUrlInterceptor, [{
    key: 'onRequest',


    /**
     * @see Interceptor#onRequest
     * @param {Object} options
     * @returns {Object}
     */
    value: function onRequest(options) {
      var headers = options.headers,
          service = options.service,
          uri = options.uri;
      var _webex$internal = this.webex.internal,
          device = _webex$internal.device,
          services = _webex$internal.services;

      // Check if header is already set before moving forward

      if (!device.url || headers && _constants.CISCO_DEVICE_URL in headers && !headers[_constants.CISCO_DEVICE_URL]) {
        return _promise2.default.resolve(options);
      }

      // Wait for catalog and service to be defined.
      return services.waitForService({ service: service, url: uri }).then(function (url) {
        // Grab the service name with the url returned from waitForService
        var _services$getServiceF = services.getServiceFromUrl(url),
            serviceName = _services$getServiceF.name;

        var invalidServices = ['idbroker', 'oauth', 'saml'];

        // Check if service is not one of the invalid services
        // Assign the url to the device header
        if (!invalidServices.includes(serviceName)) {
          (0, _set3.default)(options, 'headers[\'' + _constants.CISCO_DEVICE_URL + '\']', device.url);
        }

        return options;
      }).catch(function (error) {
        // Validate that the error came from getServiceFromUrl
        if (error.message.match(/was not found after waiting/)) {
          return options;
        }

        return _promise2.default.reject(error);
      });
    }
  }], [{
    key: 'create',

    /**
     * @returns {DeviceUrlInterceptor}
     */
    value: function create() {
      /* eslint no-invalid-this: [0] */
      return new DeviceUrlInterceptor({ webex: this });
    }
  }]);
  return DeviceUrlInterceptor;
}(_httpCore.Interceptor);

exports.default = DeviceUrlInterceptor;
//# sourceMappingURL=device-url.js.map
