{"version":3,"sources":["uuid-utils.js"],"names":["constructHydraId","deconstructHydraId","buildHydraMessageId","buildHydraPersonId","buildHydraRoomId","buildHydraOrgId","buildHydraMembershipId","getHydraRoomType","getHydraFiles","hydraBaseUrl","isRequired","Error","type","id","cluster","toUpperCase","payload","split","pop","uuid","hydraTypes","MESSAGE","PEOPLE","ROOM","ORGANIZATION","personUUID","spaceUUID","MEMBERSHIP","tags","includes","SDK_EVENT","INTERNAL","ACTIVITY_TAG","ONE_ON_ONE","EXTERNAL","SPACE_TYPE","DIRECT","GROUP","activity","hydraFiles","files","object","items","i","length","contentId","CONTENT","push"],"mappings":"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","file":"uuid-utils.js","sourcesContent":["import {encode, decode} from './base64';\nimport {SDK_EVENT, hydraTypes} from './constants';\n\nconst hydraBaseUrl = 'https://api.ciscospark.com/v1';\n\nconst isRequired = () => {\n  throw Error('parameter is required');\n};\n\n/**\n * Constructs a Hydra ID for a given UUID and type.\n *\n * @export\n * @param {string} type one of PEOPLE, TEAM, ROOM\n * @param {any} id identifying the \"TYPE\" object\n * @param {string} cluster containing the \"TYPE\" object\n * @returns {string}\n */\nexport function constructHydraId(\n  type = isRequired(),\n  id = isRequired(),\n  cluster = 'us'\n) {\n  if (!type.toUpperCase) {\n    throw Error('\"type\" must be a string');\n  }\n\n  return encode(`ciscospark://${cluster}/${type.toUpperCase()}/${id}`);\n}\n\n/**\n * @typedef {Object} DeconstructedHydraId\n * @property {UUID} id identifying the object\n * @property {String} type of the object\n * @property {String} cluster containing the object\n */\n\n/**\n * Deconstructs a Hydra ID.\n *\n * @export\n * @param {String} id Hydra style id\n * @returns {DeconstructedHydraId} deconstructed id\n */\nexport function deconstructHydraId(id) {\n  const payload = decode(id).split('/');\n\n  return {\n    id: payload.pop(),\n    type: payload.pop(),\n    cluster: payload.pop()\n  };\n}\n\n/**\n * Constructs a Hydra ID for a message based on internal UUID\n *\n * @export\n * @param {any} uuid\n * @param {string} cluster containing the message\n * @returns {string}\n */\nexport function buildHydraMessageId(uuid, cluster) {\n  return constructHydraId(hydraTypes.MESSAGE, uuid, cluster);\n}\n\n/**\n * Constructs a Hydra ID for a person based on internal UUID\n *\n * @export\n * @param {any} uuid\n * @param {string} cluster containing the person\n * @returns {string}\n */\nexport function buildHydraPersonId(uuid, cluster) {\n  return constructHydraId(hydraTypes.PEOPLE, uuid, cluster);\n}\n\n/**\n * Constructs a Hydra ID for a room based on internal UUID\n *\n * @export\n * @param {any} uuid\n * @param {string} cluster containing the room\n * @returns {string}\n */\nexport function buildHydraRoomId(uuid, cluster) {\n  return constructHydraId(hydraTypes.ROOM, uuid, cluster);\n}\n\n/**\n * Constructs a Hydra ID for an organization based on internal UUID\n *\n * @export\n * @param {any} uuid\n * @param {string} cluster containing the organization\n * @returns {string}\n */\nexport function buildHydraOrgId(uuid, cluster) {\n  return constructHydraId(hydraTypes.ORGANIZATION, uuid, cluster);\n}\n\n/**\n * Constructs a Hydra ID for an membership based on an\n * internal UUID for the person, and the space\n *\n * @export\n * @param {any} personUUID\n * @param {any} spaceUUID\n * @param {string} cluster containing the membership\n * @returns {string}\n */\nexport function buildHydraMembershipId(personUUID, spaceUUID, cluster) {\n  return constructHydraId(hydraTypes.MEMBERSHIP,\n    `${personUUID}:${spaceUUID}`, cluster);\n}\n\n/**\n * Returns a Hydra roomType based on conversation tags\n *\n * @export\n * @param {arra} tags\n * @param {any} spaceUUID\n * @returns {string}\n */\nexport function getHydraRoomType(tags) {\n  if (tags.includes(SDK_EVENT.INTERNAL.ACTIVITY_TAG.ONE_ON_ONE)) {\n    return SDK_EVENT.EXTERNAL.SPACE_TYPE.DIRECT;\n  }\n\n  return SDK_EVENT.EXTERNAL.SPACE_TYPE.GROUP;\n}\n\n/**\n * Returns file URLs for the activity, adhering to Hydra details,\n * e.g., https://api.ciscospark.com/v1/contents/Y2lzY29zcGF...\n * @see https://developer.webex.com/docs/api/v1/messages/get-message-details\n * @param {Object} activity from mercury\n * @param {string} cluster containing the files\n * @returns {Array} file URLs\n */\nexport function getHydraFiles(activity, cluster) {\n  const hydraFiles = [];\n  const {files} = activity.object;\n\n  if (files) {\n    const {items} = files;\n\n    // Note: Generated ID is dependent on file order.\n    for (let i = 0; i < items.length; i += 1) {\n      const contentId =\n        constructHydraId(hydraTypes.CONTENT, `${activity.id}/${i}`, cluster);\n\n      hydraFiles.push(`${hydraBaseUrl}/contents/${contentId}`);\n    }\n  }\n\n  return hydraFiles;\n}\n"]}