'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ensureMyIdIsAvailable = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

/**
 * Stores SDK users info in the sdk object if it doesn't already exist
 * @param {object} webex - sdk object
 * @returns {Promise} - Returns a promise that user info will be available
 */
var ensureMyIdIsAvailable = exports.ensureMyIdIsAvailable = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(webex) {
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!('me' in webex.internal)) {
              _context.next = 2;
              break;
            }

            return _context.abrupt('return', _promise2.default.resolve());

          case 2:
            return _context.abrupt('return', webex.people.get('me').then(function (person) {
              webex.internal.me = person;

              return _promise2.default.resolve();
            }));

          case 3:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function ensureMyIdIsAvailable(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.createEventEnvelope = createEventEnvelope;

var _common = require('@webex/common');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Creates a 'webhook' envelope to wrap Webex Teams events in
 * @param {object} webex - sdk object
 * @param {string} resource - resource to create an envelope for
 * @returns {object} - Returns a promise of an event envelope object
 */
function createEventEnvelope(webex, resource) {
  return ensureMyIdIsAvailable(webex).then(function () {
    return _promise2.default.resolve({
      createdBy: webex.internal.me.id,
      orgId: webex.internal.me.orgId,
      resource: resource,
      // id -- webhook id concept does not correlate to SDK socket event
      // name -- webhook name concept does not correlate to SDK socket event
      // targetUrl -- targetUrl concept does not correlate to SDK socket event
      // secret -- secret concept does not correlate to SDK socket event
      ownedBy: _common.SDK_EVENT.EXTERNAL.OWNER.CREATOR,
      status: _common.SDK_EVENT.EXTERNAL.STATUS.ACTIVE,
      created: new Date().toISOString(),
      data: {}
    });
  }).catch(function (e) {
    _promise2.default.reject(new Error('Unable to get person info for ' + resource + ' event envelope: ' + e.message));
  });
} /*!
   * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
   */
//# sourceMappingURL=event-envelope.js.map
