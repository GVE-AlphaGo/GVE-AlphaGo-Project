{"version":3,"sources":["event-envelope.js"],"names":["webex","internal","resolve","people","get","then","person","me","ensureMyIdIsAvailable","createEventEnvelope","resource","createdBy","id","orgId","ownedBy","SDK_EVENT","EXTERNAL","OWNER","CREATOR","status","STATUS","ACTIVE","created","Date","toISOString","data","catch","e","reject","Error","message"],"mappings":";;;;;;;;;;;;;;;;;;;AAgCA;;;;;;sFAKO,iBAAqCA,KAArC;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEA,QAAQA,MAAMC,QAFd;AAAA;AAAA;AAAA;;AAAA,6CAGI,kBAAQC,OAAR,EAHJ;;AAAA;AAAA,6CAMEF,MAAMG,MAAN,CAAaC,GAAb,CAAiB,IAAjB,EACJC,IADI,CACC,UAACC,MAAD,EAAY;AAChBN,oBAAMC,QAAN,CAAeM,EAAf,GAAoBD,MAApB;;AAEA,qBAAO,kBAAQJ,OAAR,EAAP;AACD,aALI,CANF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeM,qB;;;;;QAzBNC,mB,GAAAA,mB;;AARhB;;;;AAEA;;;;;;AAMO,SAASA,mBAAT,CAA6BT,KAA7B,EAAoCU,QAApC,EAA8C;AACnD,SAAOF,sBAAsBR,KAAtB,EACJK,IADI,CACC;AAAA,WAAM,kBAAQH,OAAR,CAAgB;AAC1BS,iBAAWX,MAAMC,QAAN,CAAeM,EAAf,CAAkBK,EADH;AAE1BC,aAAOb,MAAMC,QAAN,CAAeM,EAAf,CAAkBM,KAFC;AAG1BH,wBAH0B;AAI1B;AACA;AACA;AACA;AACAI,eAASC,kBAAUC,QAAV,CAAmBC,KAAnB,CAAyBC,OARR;AAS1BC,cAAQJ,kBAAUC,QAAV,CAAmBI,MAAnB,CAA0BC,MATR;AAU1BC,eAAS,IAAIC,IAAJ,GAAWC,WAAX,EAViB;AAW1BC,YAAM;AAXoB,KAAhB,CAAN;AAAA,GADD,EAaDC,KAbC,CAaK,UAACC,CAAD,EAAO;AACf,sBAAQC,MAAR,CAAe,IAAIC,KAAJ,oCAA2CnB,QAA3C,yBACHiB,EAAEG,OADC,CAAf;AAED,GAhBI,CAAP;AAiBD,C,CA9BD","file":"event-envelope.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {SDK_EVENT} from '@webex/common';\n\n/**\n * Creates a 'webhook' envelope to wrap Webex Teams events in\n * @param {object} webex - sdk object\n * @param {string} resource - resource to create an envelope for\n * @returns {object} - Returns a promise of an event envelope object\n */\nexport function createEventEnvelope(webex, resource) {\n  return ensureMyIdIsAvailable(webex)\n    .then(() => Promise.resolve({\n      createdBy: webex.internal.me.id,\n      orgId: webex.internal.me.orgId,\n      resource,\n      // id -- webhook id concept does not correlate to SDK socket event\n      // name -- webhook name concept does not correlate to SDK socket event\n      // targetUrl -- targetUrl concept does not correlate to SDK socket event\n      // secret -- secret concept does not correlate to SDK socket event\n      ownedBy: SDK_EVENT.EXTERNAL.OWNER.CREATOR,\n      status: SDK_EVENT.EXTERNAL.STATUS.ACTIVE,\n      created: new Date().toISOString(),\n      data: {}\n    })).catch((e) => {\n      Promise.reject(new Error(`Unable to get person info for ${resource} \\\nevent envelope: ${e.message}`));\n    });\n}\n\n/**\n * Stores SDK users info in the sdk object if it doesn't already exist\n * @param {object} webex - sdk object\n * @returns {Promise} - Returns a promise that user info will be available\n */\nexport async function ensureMyIdIsAvailable(webex) {\n  // If we don't have it, save info about our user\n  if (('me' in webex.internal)) {\n    return Promise.resolve();\n  }\n\n  return webex.people.get('me')\n    .then((person) => {\n      webex.internal.me = person;\n\n      return Promise.resolve();\n    });\n}\n"]}