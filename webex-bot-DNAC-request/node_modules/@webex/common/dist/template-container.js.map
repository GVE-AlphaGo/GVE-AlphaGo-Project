{"version":3,"sources":["template-container.js"],"names":["make","containers","TopContainer","shift","data","sizes","ChildContainer","length","name","concat","map","container","join","Container","args","set","ret","get","clear","key","mine","keys","delete","next","size","undefined","overwrite","has","insert","util","inspect","depth","add","push","TypeError","default"],"mappings":";;;;;;;;;;;;;;;;;;;AAIA;;;;;;AAEA;;;;;;AAMA,SAASA,IAAT,GAA6B;AAAA,oCAAZC,UAAY;AAAZA,cAAY;AAAA;;AAC3B,MAAMC,eAAeD,WAAWE,KAAX,EAArB;;AAEA,MAAMC,OAAO,uBAAb;AACA,MAAMC,QAAQ,uBAAd;;AAEA,MAAMC,iBAAiBL,WAAWM,MAAX,GAAoB,CAApB,GAAwBP,sBAAQC,UAAR,CAAxB,GAA8CA,WAAW,CAAX,CAArE;;AAEA,MAAMO,aAAW,CAACN,aAAaM,IAAd,EAAoBC,MAApB,CAA2BR,WAAWS,GAAX,CAAe,UAACC,SAAD;AAAA,WAAeA,UAAUH,IAAzB;AAAA,GAAf,CAA3B,EAA0EI,IAA1E,CAA+E,IAA/E,CAAX,MAAN;;AAEA;;;;AAV2B,MAarBC,SAbqB;AAczB;;;AAGA,yBAAqB;AAAA;;AAAA,yCAANC,IAAM;AAANA,YAAM;AAAA;;AACnBV,WAAKW,GAAL,CAAS,IAAT,qCAAmBb,YAAnB,gBAAmCY,IAAnC;AACAT,YAAMU,GAAN,CAAU,IAAV,EAAgB,CAAhB;AACD;;AAED;;;;;;AAtByB;AAAA;;;AA8BzB;;;;;AA9ByB,4BAmCZ;AACX,eAAO,KAAKA,GAAL,uBAAP;AACD;;AAED;;;;;AAvCyB;AAAA;AAAA,8BA2CjB;AACN,YAAMC,MAAMZ,KAAKa,GAAL,CAAS,IAAT,EAAeC,KAAf,EAAZ;;AAEAb,cAAMU,GAAN,CAAU,IAAV,EAAgB,CAAhB;;AAEA,eAAOC,GAAP;AACD;;AAED;;;;;;;AAnDyB;AAAA;AAAA,8BAyDlBG,GAzDkB,EAyDJ;AACnB,YAAMC,OAAOhB,KAAKa,GAAL,CAAS,IAAT,CAAb;;AADmB,2CAANI,IAAM;AAANA,cAAM;AAAA;;AAGnB,YAAI,CAACA,KAAKd,MAAV,EAAkB;AAChB,iBAAOa,KAAKE,MAAL,CAAYH,GAAZ,CAAP;AACD;;AAED,YAAMI,OAAOH,KAAKH,GAAL,CAASE,GAAT,CAAb;;AAEA,YAAI,CAACI,IAAL,EAAW;AACT,iBAAO,KAAP;AACD;;AAED,YAAMP,MAAMO,KAAKD,MAAL,aAAeD,IAAf,CAAZ;;AAEA,YAAIL,GAAJ,EAAS;AACPX,gBAAMU,GAAN,CAAU,IAAV,EAAgBV,MAAMY,GAAN,CAAU,IAAV,IAAkB,CAAlC;AACD;;AAED,YAAIM,KAAKC,IAAL,KAAc,CAAlB,EAAqB;AACnBJ,eAAKE,MAAL,CAAYH,GAAZ;AACD;;AAED,eAAOH,GAAP;AACD;;AAED;;;;;;;AAnFyB;AAAA;AAAA,0BAyFrBG,GAzFqB,EAyFP;AAChB,YAAMC,OAAOhB,KAAKa,GAAL,CAAS,IAAT,CAAb;;AAEA,YAAI,CAACG,KAAKH,GAAV,EAAe;AACb,iBAAOG,IAAP;AACD;;AALe,2CAANC,IAAM;AAANA,cAAM;AAAA;;AAOhB,YAAI,CAACA,KAAKd,MAAV,EAAkB;AAChB,iBAAOa,KAAKH,GAAL,CAASE,GAAT,CAAP;AACD;;AAED,YAAMI,OAAOH,KAAKH,GAAL,CAASE,GAAT,CAAb;;AAEA,YAAI,CAACI,IAAL,EAAW;AACT,iBAAOE,SAAP;AACD;;AAED,YAAI,CAACF,KAAKN,GAAV,EAAe;AACb,iBAAOM,IAAP;AACD;;AAED,eAAOA,KAAKN,GAAL,aAAYI,IAAZ,CAAP;AACD;;AAED;;;;;;;AAjHyB;AAAA;AAAA,4BAuHZ;AACX,eAAO,OAAO,KAAKJ,GAAL,uBAAP,KAA6B,WAApC;AACD;;AAED;;;;;;;;AA3HyB;AAAA;AAAA,4BAkIZ;AACX,YAAIS,YAAY,KAAhB;;AADW,2CAANZ,IAAM;AAANA,cAAM;AAAA;;AAGX,YAAI,KAAKa,GAAL,aAAYb,IAAZ,CAAJ,EAAuB;AACrBY,sBAAY,IAAZ;AACD;AACD,YAAMN,OAAOhB,KAAKa,GAAL,CAAS,IAAT,CAAb;;AAEA,YAAME,MAAML,KAAKX,KAAL,EAAZ;;AAEA,YAAI,CAACiB,KAAKH,GAAV,EAAe;AACbW,mCAAOR,IAAP,EAAaD,GAAb,SAAqBL,IAArB;;AAEA,iBAAO,IAAP;AACD;;AAED,YAAIS,OAAOH,KAAKH,GAAL,CAASE,GAAT,CAAX;;AAEA,YAAI,CAACI,IAAL,EAAW;AACT,cAAI,CAACjB,cAAL,EAAqB;AACnBsB,qCAAOR,IAAP,EAAaD,GAAb,SAAqBL,IAArB;;AAEA,mBAAO,IAAP;AACD;AACDS,iBAAO,IAAIjB,cAAJ,EAAP;AACAsB,iBAAOR,IAAP,EAAaD,GAAb,EAAkBI,IAAlB;AACD;AACDK,iCAAOL,IAAP,SAAgBT,IAAhB;;AAEA,YAAI,CAACY,SAAL,EAAgB;AACdrB,gBAAMU,GAAN,CAAU,IAAV,EAAgBV,MAAMY,GAAN,CAAU,IAAV,IAAkB,CAAlC;AACD;;AAED,eAAO,IAAP;AACD;;AAED;;;;;AAtKyB;AAAA;AAAA,gCA0Kf;AACR,6BAAmBT,IAAnB,cACFqB,eAAKC,OAAL,CAAa1B,KAAKa,GAAL,CAAS,IAAT,CAAb,EAA6B,EAACc,OAAO,IAAR,EAA7B,CADE;AAGD;AA9KwB;AAAA;AAAA,0BA0Bd;AACT,eAAO1B,MAAMY,GAAN,CAAU,IAAV,CAAP;AACD;AA5BwB;AAAA;AAAA;;AAiL3B,SAAOJ,SAAP;AACD;;AAED;;;;;;;AAhMA;;;;AAuMA,SAASe,MAAT,CAAgBjB,SAAhB,EAAoC;AAAA,qCAANG,IAAM;AAANA,QAAM;AAAA;;AAClC,MAAIH,UAAUqB,GAAd,EAAmB;AACjBrB,cAAUqB,GAAV,kBAAiBlB,IAAjB;;AAEA;AACD;;AAED,MAAIH,UAAUI,GAAd,EAAmB;AACjBJ,cAAUI,GAAV,kBAAiBD,IAAjB;;AAEA;AACD;;AAED,MAAIH,UAAUsB,IAAd,EAAoB;AAClBtB,cAAUsB,IAAV,kBAAkBnB,IAAlB;;AAEA;AACD;AACD,QAAM,IAAIoB,SAAJ,CAAc,gEAAd,CAAN;AACD;QACeC,O,GAARnC,I","file":"template-container.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport util from 'util';\n\n/**\n * Factory which produces a multi-keyed container based on the provided set of\n * constructors\n * @param {mixed} containers\n * @returns {Container}\n */\nfunction make(...containers) {\n  const TopContainer = containers.shift();\n\n  const data = new WeakMap();\n  const sizes = new WeakMap();\n\n  const ChildContainer = containers.length > 1 ? make(...containers) : containers[0];\n\n  const name = `(${[TopContainer.name].concat(containers.map((container) => container.name)).join(', ')})`;\n\n  /**\n   * Container that wraps an arbitrary set of tupples to their values\n   */\n  class Container {\n    /**\n     * @constructs Container\n     */\n    constructor(...args) {\n      data.set(this, new TopContainer(...args));\n      sizes.set(this, 0);\n    }\n\n    /**\n     * getter for .size\n     * @returns {number}\n     */\n    get size() {\n      return sizes.get(this);\n    }\n\n    /**\n     * Identical to Container#set() but leads slightly more intuitive code when\n     * the container is based on a Set rather than a Map.\n     * @returns {Container}\n     */\n    add(...args) {\n      return this.set(...args);\n    }\n\n    /**\n     * Removes all items from the container\n     * @returns {undefined}\n     */\n    clear() {\n      const ret = data.get(this).clear();\n\n      sizes.set(this, 0);\n\n      return ret;\n    }\n\n    /**\n     * Removes the specified item to the container\n     * @param {mixed} key\n     * @param {Array<mixed>} keys\n     * @returns {boolean}\n     */\n    delete(key, ...keys) {\n      const mine = data.get(this);\n\n      if (!keys.length) {\n        return mine.delete(key);\n      }\n\n      const next = mine.get(key);\n\n      if (!next) {\n        return false;\n      }\n\n      const ret = next.delete(...keys);\n\n      if (ret) {\n        sizes.set(this, sizes.get(this) - 1);\n      }\n\n      if (next.size === 0) {\n        mine.delete(key);\n      }\n\n      return ret;\n    }\n\n    /**\n     * Retrieves the specified item from the container\n     * @param {mixed} key\n     * @param {Array<mixed>} keys\n     * @returns {mixed}\n     */\n    get(key, ...keys) {\n      const mine = data.get(this);\n\n      if (!mine.get) {\n        return mine;\n      }\n\n      if (!keys.length) {\n        return mine.get(key);\n      }\n\n      const next = mine.get(key);\n\n      if (!next) {\n        return undefined;\n      }\n\n      if (!next.get) {\n        return next;\n      }\n\n      return next.get(...keys);\n    }\n\n    /**\n     * Indicates whether the container holds the specified item\n     * @param {mixed} key\n     * @param {Array<mixed>} keys\n     * @returns {Boolean}\n     */\n    has(...args) {\n      return typeof this.get(...args) !== 'undefined';\n    }\n\n    /**\n     * Stores the specified item in the container\n     * @param {mixed} key\n     * @param {Array<mixed>} args\n     * @param {mixed} value\n     * @returns {Container}\n     */\n    set(...args) {\n      let overwrite = false;\n\n      if (this.has(...args)) {\n        overwrite = true;\n      }\n      const mine = data.get(this);\n\n      const key = args.shift();\n\n      if (!mine.get) {\n        insert(mine, key, ...args);\n\n        return this;\n      }\n\n      let next = mine.get(key);\n\n      if (!next) {\n        if (!ChildContainer) {\n          insert(mine, key, ...args);\n\n          return this;\n        }\n        next = new ChildContainer();\n        insert(mine, key, next);\n      }\n      insert(next, ...args);\n\n      if (!overwrite) {\n        sizes.set(this, sizes.get(this) + 1);\n      }\n\n      return this;\n    }\n\n    /**\n     * @private\n     * @returns {string}\n     */\n    inspect() {\n      return `Container${name} {\n  ${util.inspect(data.get(this), {depth: null})}\n}`;\n    }\n  }\n\n  return Container;\n}\n\n/**\n * Inserts into an arbitrary container\n * @param {Map|WeakMap|Set|WeakSet} container\n * @param {Array<mixed>} args\n * @private\n * @returns {undefined}\n */\nfunction insert(container, ...args) {\n  if (container.add) {\n    container.add(...args);\n\n    return;\n  }\n\n  if (container.set) {\n    container.set(...args);\n\n    return;\n  }\n\n  if (container.push) {\n    container.push(...args);\n\n    return;\n  }\n  throw new TypeError('Could not determine how to insert into the specified container');\n}\nexport {make as default};\n"]}