'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _webexCore = require('@webex/webex-core');

var _loggerProxy = require('../common/logs/logger-proxy');

var _loggerProxy2 = _interopRequireDefault(_loggerProxy);

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class MeetingRequest
 */
var MeetingRequest = function (_StatelessWebexPlugin) {
  (0, _inherits3.default)(MeetingRequest, _StatelessWebexPlugin);

  function MeetingRequest() {
    (0, _classCallCheck3.default)(this, MeetingRequest);
    return (0, _possibleConstructorReturn3.default)(this, (MeetingRequest.__proto__ || (0, _getPrototypeOf2.default)(MeetingRequest)).apply(this, arguments));
  }

  (0, _createClass3.default)(MeetingRequest, [{
    key: 'getActiveMeetings',

    /**
       *  get all the active meetings for the user
       * @returns {Array} return locus array
      */
    value: function getActiveMeetings() {
      var _this2 = this;

      return this.request({
        api: _constants.API.LOCUS,
        resource: _constants.RESOURCE.LOCI
      }).then(function (res) {
        return _this2.determineRedirections(res.body);
      }).catch(function (error) {
        _loggerProxy2.default.logger.error('MeetingRequest->getActiveMeetings# failed to get locus details, ' + error);
      });
    }

    // locus federation, determines and populate locus if the responseBody has remote URLs to fetch locus details

    /**
     *  Fetches indivdual locus rather then getting all at once
     * @param {object} responseBody determine the locus and fetch them if a remoteUrl is given
     * @returns {Promise}  returns locusObject array
     */

  }, {
    key: 'determineRedirections',
    value: function determineRedirections(responseBody) {
      var _this3 = this;

      if (responseBody.remoteLocusClusterUrls && responseBody.remoteLocusClusterUrls.length) {
        return _promise2.default.all(responseBody.remoteLocusClusterUrls.map(function (url) {
          return _this3.request({
            method: _constants.HTTP_VERBS.GET,
            url: url,
            runWhitelistedDomains: true // allows auth token for whitelisted domain
          }).then(function (res) {
            responseBody.loci = responseBody.loci.concat(res.body.loci);
            responseBody.locusUrls = responseBody.locusUrls.concat(res.body.locusUrls);

            return _promise2.default.resolve(responseBody);
          }).catch(function (error) {
            _loggerProxy2.default.logger.error('MeetingRequest->determineRedirections# failed to get locus details from url: ' + url + ', reason: ' + error);
          });
        })).then(function () {
          return _promise2.default.resolve(responseBody);
        });
      }

      return _promise2.default.resolve(responseBody);
    }
  }]);
  return MeetingRequest;
}(_webexCore.StatelessWebexPlugin);

exports.default = MeetingRequest;
//# sourceMappingURL=request.js.map
