{"version":3,"sources":["collection.js"],"names":["MeetingCollection","meeting","meetings","id","key","value","Collection"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;AACA;;;;IAIqBA,iB;;;AACnB;;;;;AAKA,+BAAc;AAAA;AAAA,uJACN,UADM;AAEb;;;;wBAEGC,O,EAAS;AACX,WAAKC,QAAL,CAAcD,QAAQE,EAAtB,IAA4BF,OAA5B;;AAEA,aAAO,KAAKC,QAAL,CAAcD,QAAQE,EAAtB,CAAP;AACD;;AAGD;;;;;;;;;;;6BAQSC,G,EAAKC,K,EAAO;AACnB,UAAID,OAAOC,KAAX,EAAkB;AAChB,eAAO,oBAAK,KAAKH,QAAV,EAAoB,UAACD,OAAD;AAAA,iBAAcA,QAAQG,GAAR,MAAiBC,KAA/B;AAAA,SAApB,CAAP;AACD;;AAED,aAAO,IAAP;AACD;;;EA/B4CC,oB;;kBAA1BN,iB","file":"collection.js","sourcesContent":["import {find} from 'lodash';\n\nimport Collection from '../common/collection';\n/**\n * @export\n * @class MeetingCollection\n */\nexport default class MeetingCollection extends Collection {\n  /**\n   * @constructor\n   * @public\n   * @memberof MeetingCollection\n   */\n  constructor() {\n    super('meetings');\n  }\n\n  set(meeting) {\n    this.meetings[meeting.id] = meeting;\n\n    return this.meetings[meeting.id];\n  }\n\n\n  /**\n   * get a specific meeting searching for key\n   * @param {String} key\n   * @param {Any} value\n   * @returns {Meeting} if found, else returns null\n   * @public\n   * @memberof MeetingCollection\n   */\n  getByKey(key, value) {\n    if (key && value) {\n      return find(this.meetings, (meeting) => (meeting[key] === value));\n    }\n\n    return null;\n  }\n}\n"]}