'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _constants = require('../constants');

var _parameter = require('../common/errors/parameter');

var _parameter2 = _interopRequireDefault(_parameter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MeetingsUtil = {};

MeetingsUtil.extractDestination = function (destination, type) {
  var dest = destination;

  if (type === _constants._LOCUS_ID_) {
    if (!(destination && destination.url)) {
      throw new _parameter2.default('You cannot create a meeting by locus without a locus.url defined');
    }
    var temp = destination.url.split('/');

    dest = temp[temp.length - 1];
  }

  return dest;
};

MeetingsUtil.getMeetingAddedType = function (type) {
  return type === _constants._LOCUS_ID_ ? _constants._INCOMING_ : _constants._CREATED_;
};

MeetingsUtil.handleRoapMercury = function (envelope, meetingCollection) {
  var data = envelope.data;
  var eventType = data.eventType;


  if (eventType === _constants.LOCUSEVENT.MESSAGE_ROAP) {
    var meeting = meetingCollection.getByKey(_constants.CORRELATION_ID, data.correlationId);

    if (meeting) {
      meeting.roap.roapEvent(data);
    }
  }
};

MeetingsUtil.checkForCorrelationId = function (deviceUrl, locus) {
  var devices = [];

  if (locus) {
    if (locus && locus.self && locus.self.devices) {
      devices = locus.self.devices;
    }

    var foundDevice = devices.find(function (device) {
      return device.url === deviceUrl;
    });

    if (foundDevice && foundDevice.correlationId) {
      return foundDevice.correlationId;
    }
  }

  return false;
};

exports.default = MeetingsUtil;
//# sourceMappingURL=util.js.map
