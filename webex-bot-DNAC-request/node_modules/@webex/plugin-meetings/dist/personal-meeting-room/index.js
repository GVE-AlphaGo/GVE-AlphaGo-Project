'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _webexCore = require('@webex/webex-core');

var _constants = require('../constants');

var _request = require('../meeting-info/request');

var _request2 = _interopRequireDefault(_request);

var _parameter = require('../common/errors/parameter');

var _parameter2 = _interopRequireDefault(_parameter);

var _request3 = require('./request');

var _request4 = _interopRequireDefault(_request3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class PersonalMeetingRoom
 */
var PersonalMeetingRoom = function (_StatelessWebexPlugin) {
  (0, _inherits3.default)(PersonalMeetingRoom, _StatelessWebexPlugin);

  /**
   *
   * @param {Object} attrs
   * @param {Object} options
   */
  function PersonalMeetingRoom(attrs, options) {
    (0, _classCallCheck3.default)(this, PersonalMeetingRoom);

    /**
     * The pmr server object
     * @instance
     * @type {Object}
     * @public
     * @memberof PersonalMeetingRoom
    */
    var _this = (0, _possibleConstructorReturn3.default)(this, (PersonalMeetingRoom.__proto__ || (0, _getPrototypeOf2.default)(PersonalMeetingRoom)).call(this, {}, options));

    _this.namespace = _constants.MEETINGS;
    _this.pmr = null;
    /**
     * The pmr sip Uri
     * @instance
     * @type {String}
     * @public
     * @memberof PersonalMeetingRoom
    */
    _this.sipUri = null;
    /**
     * The pmr link
     * @instance
     * @type {String}
     * @public
     * @memberof PersonalMeetingRoom
    */
    _this.link = null;
    /**
     * The pmr server object
     * @instance
     * @type {Object}
     * @public
     * @memberof PersonalMeetingRoom
    */
    _this.userId = null;
    /**
     * The pmr name
     * @instance
     * @type {String}
     * @public
     * @memberof PersonalMeetingRoom
    */
    _this.name = null;
    /**
     * The meeting info request server interface
     * @instance
     * @type {MeetingInfoRequest}
     * @private
     * @memberof PersonalMeetingRoom
    */
    _this.meetingInfoRequest = new _request2.default({}, options);
    /**
     * The pmr server request interface
     * @instance
     * @type {Object}
     * @private
     * @memberof PersonalMeetingRoom
    */
    _this.personalMeetingRoomRequest = new _request4.default({}, options);
    return _this;
  }

  /**
   * claims a pmr and updates the cached PMR values
   * @param {String} link
   * @param {String} pin
   * @param {Boolean} [preferred] defaults to true to set this claimed PMR as the preferred
   * @returns {Promise}
   * @public
   * @memberof PersonalMeetingRoom
   */


  (0, _createClass3.default)(PersonalMeetingRoom, [{
    key: 'claim',
    value: function claim(link, pin) {
      var _this2 = this;

      var preferred = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      var options = {
        userId: this.webex.internal.device.userId,
        passcode: pin,
        meetingAddress: link,
        preferred: preferred
      };

      return this.personalMeetingRoomRequest.claimPmr(options).then(function (pmr) {
        if (pmr && pmr.body) {
          _this2.set(pmr.body);
        } else {
          return _promise2.default.reject(new _parameter2.default('No PMR body provided. PMR values not updated.'));
        }

        return pmr.body;
      });
    }

    /**
     * @param {Object} body the response body from meeting info request
     * @returns {undefined}
     * @private
     * @memberof PersonalMeetingRoom
     */

  }, {
    key: 'set',
    value: function set(body) {
      this.pmr = body;
      this.sipUri = body.sipMeetingUri;
      this.meetingLink = body.webExMeetingLink || body.meetingLink;
      this.userId = body.owner;
      this.name = body.meetingName;
      this.number = body.meetingNumber;
    }

    /**
     * TODO: implement TTL for syncing and caching so to not request again and again
     * @param {Object} options
     * @returns {Promise}
     * @public
     * @memberof PersonalMeetingRoom
     */

  }, {
    key: 'get',
    value: function get() {
      var _this3 = this;

      var options = {
        type: _constants._PERSONAL_ROOM_,
        destination: this.webex.internal.device.userId
      };

      return this.meetingInfoRequest.fetchMeetingInfo(options).then(function (pmr) {
        if (pmr && pmr.body && pmr.body.isPmr) {
          _this3.set(pmr.body);
        } else {
          return _promise2.default.reject(new TypeError('The PMR requested is NOT a PMR. PMR values not set.'));
        }

        return pmr.body;
      });
    }
  }]);
  return PersonalMeetingRoom;
}(_webexCore.StatelessWebexPlugin);

exports.default = PersonalMeetingRoom;
//# sourceMappingURL=index.js.map
