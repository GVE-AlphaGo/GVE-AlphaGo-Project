{"version":3,"sources":["request.js"],"names":["PersonalMeetingRoomRequest","namespace","MEETINGS","options","userId","passcode","meetingAddress","preferred","ParameterError","validPin","PersonalMeetingRoomUtil","getClaimPmrPin","reject","validLink","getClaimPmrLink","request","getClaimedRequestParams","StatelessWebexPlugin"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;;;AAEA;;;;;;AAGA;;;IAGqBA,0B;;;;;;;;;;;;;;oPACnBC,S,GAAYC,mB;;;;;;;AAEZ;;;;;;6BAMSC,O,EAAS;AAChB,UAAI,CAACA,OAAD,IAAY,CAACA,QAAQC,MAArB,IAA+B,CAACD,QAAQE,QAAxC,IAAoD,CAACF,QAAQG,cAA7D,IAA+E,CAACH,QAAQI,SAA5F,EAAuG;AACrG,cAAM,IAAIC,mBAAJ,CAAmB,gGAAnB,CAAN;AACD;AACD,UAAMC,WAAWC,eAAwBC,cAAxB,CAAuCR,QAAQE,QAA/C,CAAjB;;AAEA,UAAI,CAACI,QAAL,EAAe;AACb,eAAO,kBAAQG,MAAR,CAAe,IAAIJ,mBAAJ,CAAmB,gDAAnB,CAAf,CAAP;AACD;AACD,UAAMK,YAAYH,eAAwBI,eAAxB,CAAwCX,QAAQG,cAAhD,CAAlB;;AAEA,UAAI,CAACO,SAAL,EAAgB;AACd,eAAO,kBAAQD,MAAR,CAAe,IAAIJ,mBAAJ,CAAmB,gDAAnB,CAAf,CAAP;AACD;AACD,UAAMO,UAAUL,eAAwBM,uBAAxB,CAAgDH,SAAhD,EAA2DJ,QAA3D,EAAqEN,OAArE,CAAhB;;AAEA,aAAO,KAAKY,OAAL,CAAaA,OAAb,CAAP;AACD;;;EA1BqDE,+B;;kBAAnCjB,0B","file":"request.js","sourcesContent":["import {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport {MEETINGS} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\nimport PersonalMeetingRoomUtil from './util';\n\n\n/**\n * @class MeetingInfoRequest\n */\nexport default class PersonalMeetingRoomRequest extends StatelessWebexPlugin {\n  namespace = MEETINGS;\n\n  /**\n   *\n   * @param {Object} options with format of {userId, passcode, meetingAddress, preferred}\n   * @returns {Promise} returns a promise that resolves/rejects the result of the request\n   * @memberof PersonalMeetingRoomRequest\n   */\n  claimPmr(options) {\n    if (!options || !options.userId || !options.passcode || !options.meetingAddress || !options.preferred) {\n      throw new ParameterError('Claiming a PMR should be done with userId, passcode, preferred, and meetingAddress in options.');\n    }\n    const validPin = PersonalMeetingRoomUtil.getClaimPmrPin(options.passcode);\n\n    if (!validPin) {\n      return Promise.reject(new ParameterError('The host pin provided was of an invalid format'));\n    }\n    const validLink = PersonalMeetingRoomUtil.getClaimPmrLink(options.meetingAddress);\n\n    if (!validLink) {\n      return Promise.reject(new ParameterError('The PMR link provided was of an invalid format'));\n    }\n    const request = PersonalMeetingRoomUtil.getClaimedRequestParams(validLink, validPin, options);\n\n    return this.request(request);\n  }\n}\n"]}