'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _constants = require('../constants');

var _util = require('./util.js');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class Member
 */
/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */
var Member = function () {

  /**
   * @param {Object} participant - the locus participant
   * @param {Object} [options] - constructor params
   * @param {String} options.selfId
   * @param {String} options.hostId
   * @param {String} options.contentSharingId
   * @param {String} options.type
   * @returns {Member}
   * @memberof Member
   */
  function Member(participant) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck3.default)(this, Member);
    this.namespace = _constants.MEETINGS;

    /**
     * The server participant object
     * @instance
     * @type {Object}
     * @private
     * @memberof Member
    */
    this.participant = null;
    /**
     * The member id
     * @instance
     * @type {String}
     * @public
     * @memberof Member
    */
    this.id = null;
    /**
     * The member name
     * @instance
     * @type {String}
     * @public
     * @memberof Member
    */
    this.name = null;
    /**
     * The member email
     * @instance
     * @type {String}
     * @public
     * @memberof Member
    */
    this.email = null;
    /**
     * @instance
     * @type {Boolean}
     * @public
     * @memberof Member
    */
    this.isAudioMuted = null;
    /**
     * @instance
     * @type {Boolean}
     * @public
     * @memberof Member
    */
    this.isVideoMuted = null;
    /**
     * @instance
     * @type {Boolean}
     * @public
     * @memberof Member
    */
    this.isSelf = null;
    /**
     * @instance
     * @type {Boolean}
     * @public
     * @memberof Member
    */
    this.isHost = null;
    /**
     * @instance
     * @type {Boolean}
     * @public
     * @memberof Member
    */
    this.isGuest = null;
    /**
     * @instance
     * @type {Boolean}
     * @public
     * @memberof Member
    */
    this.isInLobby = null;
    /**
     * @instance
     * @type {Boolean}
     * @public
     * @memberof Member
    */
    this.isInMeeting = null;
    /**
     * @instance
     * @type {Boolean}
     * @public
     * @memberof Member
    */
    this.isNotAdmitted = null;
    /**
     * @instance
     * @type {Boolean}
     * @public
     * @memberof Member
    */
    this.isContentSharing = null;
    /**
     * @instance
     * @type {Boolean}
     * @public
     * @memberof Member
    */
    this.status = null;
    /**
     * @instance
     * @type {Boolean}
     * @public
     * @memberof Member
    */
    this.isDevice = null;
    /**
     * @instance
     * @type {Boolean}
     * @public
     * @memberof Member
    */
    this.isUser = null;
    /**
         * Is this member associated to another user by way of pairing (typical of devices)
     * @instance
     * @type {String}
     * @public
     * @memberof Member
    */
    this.associatedUser = null;
    /**
     * @instance
     * @type {Boolean}
     * @public
     * @memberof Member
    */
    this.isRecording = null;
    /**
     * @instance
     * @type {Boolean}
     * @public
     * @memberof Member
    */
    this.isMutable = null;
    /**
     * @instance
     * @type {Boolean}
     * @public
     * @memberof Member
    */
    this.isRemovable = null;
    /**
     * @instance
     * @type {String}
     * @private
     * @memberof Member
    */
    this.type = null;
    /**
     * @instance
     * @type {Boolean}
     * @public
     * @memberof Member
    */
    this.isModerator = null;
    /**
     * @instance
     * @type {Boolean}
     * @public
     * @memberof Member
    */
    this.isModeratorAssignmentProhibited = null;
    // TODO: more participant types
    // such as native client, web client, is a device, what type of phone, etc
    this.processParticipant(participant);
    this.processParticipantOptions(participant, options);
    this.processMember();
  }

  /**
   * set all the participant values extracted directly from locus participant
   * @param {Object} participant the locus participant object
   * @returns {undefined}
   * @private
   * @memberof Member
   */


  (0, _createClass3.default)(Member, [{
    key: 'processParticipant',
    value: function processParticipant(participant) {
      this.participant = participant;
      if (participant) {
        this.id = _util2.default.extractId(participant);
        this.name = _util2.default.extractName(participant);
        this.email = _util2.default.extractEmail(participant);
        this.isAudioMuted = _util2.default.isAudioMuted(participant);
        this.isVideoMuted = _util2.default.isVideoMuted(participant);
        this.isGuest = _util2.default.isGuest(participant);
        this.isUser = _util2.default.isUser(participant);
        this.isDevice = _util2.default.isDevice(participant);
        this.isModerator = _util2.default.isModerator(participant);
        this.isModeratorAssignmentProhibited = _util2.default.isModeratorAssignmentProhibited(participant);
        this.processStatus(participant);
        // must be done last
        this.isNotAdmitted = _util2.default.isNotAdmitted(participant, this.isGuest, this.status);
      }
    }

    /**
     * Use the members options and participant values to set on the member
     * @param {Object} participant the locus participant object
     * @param {Object} options the passed in options, what was set on members
     * @returns {undefined}
     * @private
     * @memberof Member
     */

  }, {
    key: 'processParticipantOptions',
    value: function processParticipantOptions(participant, options) {
      if (participant && options) {
        this.processIsSelf(participant, options.selfId);
        this.processIsHost(participant, options.hostId);
        this.processIsContentSharing(participant, options.contentSharingId);
        this.processType(options.type);
        this.processIsRecording(participant, options.recordingId);
      }
    }

    /**
     * processes what already exists on the member to determine other info about the member
     * @returns {undefined}
     * @private
     * @memberof Member
     */

  }, {
    key: 'processMember',
    value: function processMember() {
      // must occur after self, guest, meeting, and type properties are calculated
      this.isRemovable = _util2.default.isRemovable(this.isSelf, this.isGuest, this.isInMeeting, this.type);
      // must occur after self, device, meeting, mute status, and type properties are calculated
      this.isMutable = _util2.default.isMutable(this.isSelf, this.isDevice, this.isInMeeting, this.isAudioMuted, this.type);
    }

    /**
     * set the status on member object
     * @param {Object} participant the locus participant object
     * @returns {undefined}
     * @private
     * @memberof Member
     */

  }, {
    key: 'processStatus',
    value: function processStatus(participant) {
      this.status = _util2.default.extractStatus(participant);
      switch (this.status) {
        case _constants._IN_LOBBY_:
          this.isInLobby = true;
          this.isInMeeting = false;
          break;
        case _constants._IN_MEETING_:
          this.isInLobby = false;
          this.isInMeeting = true;
          break;
        case _constants._NOT_IN_MEETING_:
          this.isInLobby = false;
          this.isInMeeting = false;
          break;
        default:
          this.isInLobby = false;
          this.isInMeeting = false;
      }
    }

    /**
     * set the isContentSharing on member
     * @param {Boolean} flag
     * @returns {undefined}
     * @public
     * @memberof Member
     */

  }, {
    key: 'setIsContentSharing',
    value: function setIsContentSharing(flag) {
      this.isContentSharing = flag;
    }

    /**
     * set the isHost on member
     * @param {Boolean} flag
     * @returns {undefined}
     * @public
     * @memberof Member
     */

  }, {
    key: 'setIsHost',
    value: function setIsHost(flag) {
      this.isHost = flag;
    }

    /**
     * set the isSelf on member
     * @param {Boolean} flag
     * @returns {undefined}
     * @public
     * @memberof Member
     */

  }, {
    key: 'setIsSelf',
    value: function setIsSelf(flag) {
      this.isSelf = flag;
    }

    /**
     * determine if this member is content sharing
     * @param {Object} participant
     * @param {String} sharingId
     * @returns {undefined}
     * @public
     * @memberof Member
     */

  }, {
    key: 'processIsContentSharing',
    value: function processIsContentSharing(participant, sharingId) {
      if (_util2.default.isUser(participant)) {
        this.isContentSharing = _util2.default.isSame(participant, sharingId);
      } else if (_util2.default.isDevice(participant)) {
        this.isContentSharing = _util2.default.isAssociatedSame(participant, sharingId);
      }
    }

    /**
     * Determine if this member is recording
     * @param {Object} participant
     * @param {String} recordingId
     * @returns {undefined}
     * @public
     * @memberof Member
     */

  }, {
    key: 'processIsRecording',
    value: function processIsRecording(participant, recordingId) {
      this.isRecording = _util2.default.isSame(participant, recordingId);
    }

    /**
     * determine if this member is the self
     * @param {Object} participant
     * @param {String} selfId
     * @returns {undefined}
     * @private
     * @memberof Member
     */

  }, {
    key: 'processIsSelf',
    value: function processIsSelf(participant, selfId) {
      if (_util2.default.isUser(participant)) {
        this.isSelf = _util2.default.isSame(participant, selfId);
      } else if (_util2.default.isDevice(participant)) {
        this.isSelf = _util2.default.isAssociatedSame(participant, selfId);
        this.associatedUser = selfId;
      }
    }

    /**
     * determine if this member is the host
     * @param {Object} participant
     * @param {String} hostId
     * @returns {undefined}
     * @private
     * @memberof Member
     */

  }, {
    key: 'processIsHost',
    value: function processIsHost(participant, hostId) {
      if (_util2.default.isUser(participant)) {
        this.isHost = _util2.default.isSame(participant, hostId);
      } else if (_util2.default.isDevice(participant)) {
        this.isHost = _util2.default.isAssociatedSame(participant, hostId);
      }
    }

    /**
     * set the type for the member, could be MEETING or CALL
     * @param {String} type
     * @returns {undefined}
     * @private
     * @memberof Member
     */

  }, {
    key: 'processType',
    value: function processType(type) {
      this.type = type;
    }
  }]);
  return Member;
}();

exports.default = Member;
//# sourceMappingURL=index.js.map
