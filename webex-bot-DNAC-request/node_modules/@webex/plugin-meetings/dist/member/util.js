'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _constants = require('../constants');

var _parameter = require('../common/errors/parameter');

var _parameter2 = _interopRequireDefault(_parameter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MemberUtil = {};

/**
 * @param {Object} participant the locus participant
 * @returns {Boolean}
 */
MemberUtil.isUser = function (participant) {
  return participant && participant.type === _constants._USER_;
};

MemberUtil.isModerator = function (participant) {
  return participant && participant.moderator;
};

/**
 * @param {Object} participant the locus participant
 * @returns {Boolean}
 */
MemberUtil.isGuest = function (participant) {
  return participant && participant.guest;
};

/**
 * @param {Object} participant the locus participant
 * @returns {Boolean}
 */
MemberUtil.isDevice = function (participant) {
  return participant && participant.type === _constants._RESOURCE_ROOM_;
};

MemberUtil.isModeratorAssignmentProhibited = function (participant) {
  return participant && participant.moderatorAssignmentNotAllowed;
};

/**
 * checks to see if the participant id is the same as the passed id
 * there are multiple ids that can be used
 * @param {Object} participant the locus participant
 * @param {String} id
 * @returns {Boolean}
 */
MemberUtil.isSame = function (participant, id) {
  return participant && (participant.id === id || participant.person && participant.person.id === id);
};

/**
 * checks to see if the participant id is the same as the passed id for associated devices
 * there are multiple ids that can be used
 * @param {Object} participant the locus participant
 * @param {String} id
 * @returns {Boolean}
 */
MemberUtil.isAssociatedSame = function (participant, id) {
  return participant && participant.associatedUsers && participant.associatedUsers.some(function (user) {
    return user.id === id || user.person && user.person.id === id;
  });
};

/**
 * @param {Object} participant the locus participant
 * @param {Boolean} isGuest
 * @param {String} status
 * @returns {Boolean}
 */
MemberUtil.isNotAdmitted = function (participant, isGuest, status) {
  return participant && participant.guest && (participant.devices && participant.devices[0] && participant.devices[0].intent && participant.devices[0].intent.type === _constants._WAIT_ && isGuest && status === _constants._IN_LOBBY_ || !status === _constants._IN_MEETING_);
};

/**
 * @param {Object} participant the locus participant
 * @returns {Boolean}
 */
MemberUtil.isAudioMuted = function (participant) {
  if (!participant) {
    throw new _parameter2.default('Audio could not be processed, participant is undefined.');
  }
  var mutedStatus = MemberUtil.isMuted(participant.status, _constants.AUDIO_STATUS);

  if (participant.controls && participant.controls.audio) {
    if (participant.controls.audio.muted) {
      return true;
    }
    if (mutedStatus) {
      return true;
    }
  }

  return false;
};

/**
 * @param {Object} participant the locus participant
 * @returns {Boolean}
 */
MemberUtil.isVideoMuted = function (participant) {
  if (!participant) {
    throw new _parameter2.default('Video could not be processed, participant is undefined.');
  }

  return MemberUtil.isMuted(participant.status, _constants.VIDEO_STATUS);
};

/**
 * utility method for audio/video muted status
 * @param {String} status
 * @param {String} accessor
 * @returns {Boolean}
 */
MemberUtil.isMuted = function (status, accessor) {
  if (status) {
    if (status[accessor] === _constants._RECEIVE_ONLY_) {
      return true;
    }
    if (status[accessor] === _constants._SEND_RECEIVE_) {
      return false;
    }
  }

  return null;
};

/**
 * utility method for getting the recording member for later comparison
 * @param {Object} controls
 * @returns {String|null}
 */
MemberUtil.getRecordingMember = function (controls) {
  if (!controls) {
    return null;
  }
  if (controls.record && controls.record.recording && controls.record.meta) {
    return controls.record.meta.modifiedBy;
  }

  return null;
};

/**
 * @param {Object} participant the locus participant
 * @returns {Boolean}
 */
MemberUtil.isRecording = function (participant) {
  if (!participant) {
    throw new _parameter2.default('Recording could not be processed, participant is undefined.');
  }
  if (participant.controls && participant.controls.localRecord) {
    return participant.controls.localRecord.recording;
  }

  return false;
};

MemberUtil.isRemovable = function (isSelf, isGuest, isInMeeting, type) {
  if (isGuest || isSelf) {
    return false;
  }
  if (type === _constants._CALL_) {
    return false;
  }
  if (isInMeeting) {
    return true;
  }

  return false;
};

MemberUtil.isMutable = function (isSelf, isDevice, isInMeeting, isMuted, type) {
  if (!isInMeeting) {
    return false;
  }
  if (isMuted) {
    return false;
  }
  if (type === _constants._CALL_) {
    return false;
  }
  if (isSelf || isDevice) {
    return true;
  }

  return false;
};

/**
 * @param {Object} participant the locus participant
 * @returns {String}
 */
MemberUtil.extractStatus = function (participant) {
  if (!(participant && participant.devices && participant.devices.length)) {
    return _constants._NOT_IN_MEETING_;
  }
  if (participant.state === _constants._JOINED_) {
    return _constants._IN_MEETING_;
  }
  if (participant.state === _constants._IDLE_) {
    if (participant.devices && participant.devices.length > 0) {
      var foundDevice = participant.devices.find(function (device) {
        return device.intent && (device.intent.type === _constants._WAIT_ || device.intent.type === _constants._OBSERVE_);
      });

      return foundDevice ? _constants._IN_LOBBY_ : _constants._NOT_IN_MEETING_;
    }

    return _constants._NOT_IN_MEETING_;
  }
  if (participant.state === _constants._LEFT_) {
    return _constants._NOT_IN_MEETING_;
  }

  return _constants._NOT_IN_MEETING_;
};

/**
 * @param {Object} participant the locus participant
 * @returns {String}
 */
MemberUtil.extractId = function (participant) {
  if (participant) {
    return participant.id;
  }

  return null;
};

/**
 * @param {Object} participant the locus participant
 * @returns {String}
 */
MemberUtil.extractName = function (participant) {
  if (participant && participant.person) {
    return participant.person.name;
  }

  return null;
};

MemberUtil.extractEmail = function (participant) {
  if (participant && participant.person) {
    return participant.person.email;
  }

  return null;
};

exports.default = MemberUtil;
//# sourceMappingURL=util.js.map
