{"version":3,"sources":["index.js"],"names":["ReconnectionManager","meeting","status","RECONNECTION","STATE","DEFAULT_STATUS","tryCount","DEFAULT_TRY_COUNT","webex","configure","backOff","config","reconnection","retry","start","enabled","locusInfo","fullState","state","_ACTIVE_","active","internal","mercury","connected","COMPLETE","ReconnectionError","validatedReconnect","validate","execute","reject","IN_PROGRESS","media","then","LoggerProxy","logger","log","Date","resolve","catch","err","error","times","FAILURE","setTimeout","reconnect","rate","recreate","promise","Media","attachMedia","mediaProperties","peerConnection","setRemoteStream","reconnectMedia","meetingId","roap","sendRoapMediaRequest","sdp","roapSeq","warn","cleanup","reInitiatePeerconnection","PeerConnectionManager","close","unsetPeerConnection"],"mappings":"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","file":"index.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport {_ACTIVE_, RECONNECTION} from '../constants';\nimport ReconnectionError from '../common/errors/reconnection';\nimport PeerConnectionManager from '../peer-connection-manager';\nimport Media from '../media';\n\n/**\n * @export\n * @class ReconnectionManager\n*/\nexport default class ReconnectionManager {\n  /**\n   * @param {Meeting} meeting\n   */\n  constructor(meeting) {\n    /**\n     * @instance\n     * @type {String}\n     * @private\n     * @memberof ReconnectionManager\n    */\n    this.status = RECONNECTION.STATE.DEFAULT_STATUS;\n    /**\n     * @instance\n     * @type {Number}\n     * @private\n     * @memberof ReconnectionManager\n    */\n    this.tryCount = RECONNECTION.STATE.DEFAULT_TRY_COUNT;\n    /**\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof ReconnectionManager\n    */\n    this.webex = meeting.webex;\n    this.configure(meeting);\n  }\n\n  /**\n   * @param {Meeting} meeting\n   * @returns {undefined}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  configure(meeting) {\n    this.backOff = meeting.config.reconnection.retry.backOff.start;\n  }\n\n  /**\n   * @returns {undefined}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  reset() {\n    this.status = RECONNECTION.STATE.DEFAULT_STATUS;\n    this.tryCount = RECONNECTION.STATE.DEFAULT_TRY_COUNT;\n  }\n\n  /**\n   * @param {Meeting} meeting\n   * @returns {Boolean}\n   * @returns {ReconnectionError}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  validate(meeting) {\n    if (meeting.config.reconnection.enabled) {\n      if (\n        meeting.locusInfo &&\n          meeting.locusInfo.fullState &&\n          (\n            meeting.locusInfo.fullState.state === _ACTIVE_ &&\n            meeting.locusInfo.fullState.active\n          )\n      ) {\n        if (meeting.webex.internal.mercury.connected) {\n          if (\n            this.status !== RECONNECTION.STATE.DEFAULT_STATUS ||\n            this.status !== RECONNECTION.STATE.COMPLETE\n          ) {\n            return true;\n          }\n\n          return new ReconnectionError('Multiple reconnections cannot occur concurrently');\n        }\n\n        return new ReconnectionError('mercury is not connected, cannot reconnect');\n      }\n\n      return new ReconnectionError('locus server for this call is not active, cannot reconnect');\n    }\n\n    return new ReconnectionError('Reconnection is not enabled.');\n  }\n\n  /**\n   * Initiates a media reconnect for the active meeting\n   * @param {Meeting} meeting\n   * @returns {Promise}\n   * @public\n   * @memberof ReconnectionManager\n   */\n  reconnect(meeting) {\n    const validatedReconnect = this.validate(meeting);\n\n    return validatedReconnect === true ? this.execute(meeting) : Promise.reject(validatedReconnect);\n  }\n\n  /**\n   * @param {Meeting} meeting\n   * @returns {Promise}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  execute(meeting) {\n    this.status = RECONNECTION.STATE.IN_PROGRESS;\n\n    return this.media(meeting)\n      .then((media) => {\n        LoggerProxy.logger.log(`ReconnectionManager->execute#Media reestablished at: ${new Date()}`);\n        this.status = RECONNECTION.STATE.COMPLETE;\n\n        return Promise.resolve(media);\n      })\n      .catch((err) => { // eslint-disable-line\n        LoggerProxy.logger.error(`ReconnectionManager->execute#Media reestablishment failed at: ${new Date()}`);\n        if (this.tryCount > meeting.config.reconnection.retry.times) {\n          this.status = RECONNECTION.STATE.FAILURE;\n\n          return Promise.reject(new ReconnectionError(err));\n        }\n        // exponential backoff and retry logic\n        setTimeout(() =>\n          this.reconnect(meeting),\n        this.backOff *= meeting.config.reconnection.retry.backOff.rate);\n      });\n  }\n\n  /**\n   * @param {Meeting} meeting\n   * @param {boolean} [recreate] default false to re attach media if true\n   * @returns {Promise}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  reconnectMedia(meeting, recreate = false) {\n    let promise = null;\n\n    if (recreate) {\n      promise = Media.attachMedia(meeting.mediaProperties)\n        .then((peerConnection) => meeting.setRemoteStream(peerConnection));\n    }\n    else {\n      promise = Media.reconnectMedia(meeting.mediaProperties.peerConnection, meeting.meetingId);\n    }\n\n    return Promise.resolve(promise)\n      .then(() => meeting.roap\n        .sendRoapMediaRequest({\n          sdp: meeting.mediaProperties.peerConnection.sdp,\n          roapSeq: meeting.roapSeq,\n          meeting // or can pass meeting ID\n        }));\n  }\n\n  /**\n   * @param {Meeting} meeting\n   * @returns {Promise} see #Meeting.addMedia\n   * @private\n   * @memberof ReconnectionManager\n   */\n  media(meeting) {\n    this.tryCount += 1;\n    LoggerProxy.logger.log(`Reconnection->media#Begin reestablishment of media at ${new Date()}`);\n\n\n    // TODO: chekc peerconnection status\n    // create an offer\n    return this.reconnectMedia(meeting)\n      .then((media) => Promise.resolve(media))\n      .catch((err) => {\n        LoggerProxy.logger.warn(`Reconnection->media#Media could not reuse peer connection, failed with ${err}`);\n        // TODO: test getting to this scenario\n        ReconnectionManager.cleanup(meeting);\n        meeting.mediaProperties.reInitiatePeerconnection();\n\n        return meeting.reconnectMedia(true)\n          .catch((error) => {\n            LoggerProxy.logger.error(`ReconnectionManager->media#Error reconnecting , error: ${error}`);\n          });\n      });\n  }\n\n  /**\n   * @param {Meeting} meeting\n   * @returns {undefined}\n   * @private\n   * @memberof ReconnectionManager\n   */\n  static cleanup(meeting) {\n    // close pcs, unset to null and reuse the streams with new pcs\n    PeerConnectionManager.close(meeting.mediaProperties.peerConnection);\n    meeting.mediaProperties.unsetPeerConnection();\n  }\n}\n"]}