'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _constants = require('../constants');

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class MediaProperties
 */
var MediaProperties = function () {

  /**
   * @param {Object} [options] -- to auto construct
   * @returns {MediaProperties}
   */
  function MediaProperties() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck3.default)(this, MediaProperties);
    this.namespace = _constants.MEETINGS;

    this.peerConnection = _util2.default.createPeerConnection();
    this.mediaDirection = options.mediaDirection;
    this.videoTrack = options.videoTrack;
    this.audioTrack = options.audioTrack;
    this.shareTrack = options.shareTrack;
    this.remoteStream = options.remoteStream;
    this.remoteShare = options.remoteShare;
    this.mediaSettings = {};
  }

  (0, _createClass3.default)(MediaProperties, [{
    key: 'setMediaDirection',
    value: function setMediaDirection(mediaDirection) {
      this.mediaDirection = mediaDirection;
    }
  }, {
    key: 'setMediaSettings',
    value: function setMediaSettings(type, values) {
      this.mediaSettings[type] = values;
    }
  }, {
    key: 'setMediaPeerConnection',
    value: function setMediaPeerConnection(peerConnection) {
      this.peerConnection = peerConnection;
    }
  }, {
    key: 'setLocalVideoTrack',
    value: function setLocalVideoTrack(videoTrack) {
      this.videoTrack = videoTrack;
    }
  }, {
    key: 'setLocalAudioTrack',
    value: function setLocalAudioTrack(audioTrack) {
      this.audioTrack = audioTrack;
    }
  }, {
    key: 'setLocalShareTrack',
    value: function setLocalShareTrack(shareTrack) {
      this.shareTrack = shareTrack;
    }
  }, {
    key: 'setRemoteStream',
    value: function setRemoteStream(remoteStream) {
      this.remoteStream = remoteStream;
    }
  }, {
    key: 'setRemoteShare',
    value: function setRemoteShare(remoteShare) {
      this.remoteShare = remoteShare;
    }
  }, {
    key: 'unsetPeerConnection',
    value: function unsetPeerConnection() {
      this.peerConnection = null;
    }
  }, {
    key: 'reInitiatePeerconnection',
    value: function reInitiatePeerconnection() {
      this.peerConnection = _util2.default.createPeerConnection();
    }
  }, {
    key: 'unsetLocalVideoTrack',
    value: function unsetLocalVideoTrack() {
      this.videoTrack = null;
    }
  }, {
    key: 'unsetLocalShareTrack',
    value: function unsetLocalShareTrack() {
      this.shareTrack = null;
    }
  }, {
    key: 'unsetLocalAudioTrack',
    value: function unsetLocalAudioTrack() {
      this.audioTrack = null;
    }
  }, {
    key: 'unsetRemoteStream',
    value: function unsetRemoteStream() {
      this.remoteStream = null;
    }
  }, {
    key: 'unsetRemoteShare',
    value: function unsetRemoteShare() {
      this.remoteShare = null;
    }
  }, {
    key: 'unsetLocalVideoTracks',
    value: function unsetLocalVideoTracks() {
      this.unsetLocalVideoTrack();
      this.unsetLocalShareTrack();
    }
  }, {
    key: 'unsetRemoteStreams',
    value: function unsetRemoteStreams() {
      this.unsetRemoteStream();
      this.unsetRemoteShare();
    }
  }, {
    key: 'unsetShareStreams',
    value: function unsetShareStreams() {
      this.unsetLocalShareTrack();
      this.unsetRemoteShare();
    }
  }, {
    key: 'unsetMediaStreams',
    value: function unsetMediaStreams() {
      this.unsetLocalVideoTrack();
      this.unsetRemoteStream();
    }
  }]);
  return MediaProperties;
}();

exports.default = MediaProperties;
//# sourceMappingURL=properties.js.map
