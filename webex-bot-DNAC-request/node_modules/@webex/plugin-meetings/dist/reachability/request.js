'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _webexCore = require('@webex/webex-core');

var _loggerProxy = require('../common/logs/logger-proxy');

var _loggerProxy2 = _interopRequireDefault(_loggerProxy);

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class RechabilityRequest
 */
var RechabilityRequest = function (_StatelessWebexPlugin) {
  (0, _inherits3.default)(RechabilityRequest, _StatelessWebexPlugin);

  function RechabilityRequest() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, RechabilityRequest);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = RechabilityRequest.__proto__ || (0, _getPrototypeOf2.default)(RechabilityRequest)).call.apply(_ref, [this].concat(args))), _this), _this.getClusters = function () {
      return _this.request({
        method: _constants.HTTP_VERBS.GET,
        shouldRefreshAccessToken: false,
        api: _constants.API.CALLIOPEDISCOVERY,
        resource: _constants.RESOURCE.CLUSTERS
      }).then(function (res) {
        var clusters = res.body.clusters;


        _loggerProxy2.default.logger.info('ReachabilityRequest->getClusters#get clusters successful:' + (0, _stringify2.default)(clusters));

        return (0, _keys2.default)(clusters);
      });
    }, _this.remoteSDPForClusters = function (localSDPList) {
      return _this.request({
        method: _constants.HTTP_VERBS.POST,
        shouldRefreshAccessToken: false,
        api: _constants.API.CALLIOPEDISCOVERY,
        resource: _constants.RESOURCE.REACHABILITY,
        body: { offers: localSDPList }
      }).then(function (res) {
        _loggerProxy2.default.logger.info('ReachabilityRequest->remoteSDPForClusters#Remote SDPs got succcessfully');

        return res.body;
      });
    }, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }
  /**
   * gets the cluster information
   * @returns {Promise}
   */


  /**
     * gets remote SDP For Clusters
     * @param {Object} localSDPList localSDPs for the cluster
     * @returns {Object}
     */


  return RechabilityRequest;
}(_webexCore.StatelessWebexPlugin);

exports.default = RechabilityRequest;
//# sourceMappingURL=request.js.map
