{"version":3,"sources":["request.js"],"names":["RoapRequest","localSdp","reachabilityData","window","localStorage","getItem","REACHABILITY","reachabilityResult","JSON","parse","length","reachability","e","LoggerProxy","logger","error","options","info","roapMessage","resolve","then","deviceUrl","webex","internal","device","url","body","usingResource","resourceId","correlationId","localMedias","attachRechabilityData","audioMuted","videoMuted","locusUrl","PARTICIPANT","sipUrl","services","waitForCatalog","get","LOCI","CALL","invitee","address","sipTarget","ParameterError","request","method","HTTP_VERBS","POST","uri","res","locus","roapSeq","seq","id","split","pop","fullState","lastActive","catch","err","locusSelfUrl","mediaId","meetingId","mediaUrl","MEDIA","messageType","Metrics","postEvent","event","eventType","MEDIA_REQUEST","PUT","deviceType","config","meetings","MEDIA_RESPONSE","mediaConnection","mediaConnections","statusCode","data","parseLocusError","StatelessWebexPlugin"],"mappings":"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","file":"request.js","sourcesContent":["\n/* global window */\nimport {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport {\n  PARTICIPANT,\n  LOCI,\n  CALL,\n  MEDIA,\n  HTTP_VERBS,\n  REACHABILITY\n} from '../constants';\nimport Metrics from '../metrics';\nimport {eventType} from '../metrics/config';\nimport ParameterError from '../common/errors/parameter';\n/**\n * @class RoapRequest\n */\nexport default class RoapRequest extends StatelessWebexPlugin {\n  /**\n   * Joins a meeting via ROAP\n   * @param {Object} options\n   * @returns {Promise} returns a promise that resolves/rejects whatever the request does\n   */\n\n\n  attachRechabilityData(localSdp) {\n    const reachabilityData = window.localStorage.getItem(REACHABILITY.localStorage);\n\n    if (reachabilityData) {\n      try {\n        const reachabilityResult = JSON.parse(reachabilityData);\n\n        /* istanbul ignore else */\n        if (reachabilityResult && Object.keys(reachabilityResult).length) {\n          localSdp.reachability = reachabilityResult;\n        }\n      }\n      catch (e) {\n        LoggerProxy.logger.error(`RoapRequest->attachReachabilityData#Error in parsing reachability data: ${e}`);\n      }\n    }\n\n    return localSdp;\n  }\n\n  joinMeetingWithRoap(options) {\n    LoggerProxy.logger.info('RoapRequest->joinMeetingWithRoap#Join locus with roap');\n    LoggerProxy.logger.info(`RoapRequest->joinMeetingWithRoap#Clocal SDP: ${options.roapMessage}`);\n\n    return Promise.resolve().then(async () => {\n      const deviceUrl = this.webex.internal.device.url;\n      let url = '';\n\n      const body = {\n        deviceUrl,\n        usingResource: options.resourceId || null,\n        correlationId: options.correlationId,\n        localMedias: [\n          {\n            localSdp: JSON.stringify(this.attachRechabilityData({\n              roapMessage: options.roapMessage,\n              audioMuted: false,\n              videoMuted: false\n            }))\n          }\n        ]\n      };\n\n      if (options.locusUrl) {\n        url = `${options.locusUrl}/${PARTICIPANT}`;\n      }\n      else if (options.sipUrl) {\n        await this.webex.internal.services.waitForCatalog('postauth');\n        url = `${this.webex.internal.services.get('locus')}/${LOCI}/${CALL}`;\n        body.invitee = {\n          address: options.sipTarget\n        };\n      }\n      else {\n        throw new ParameterError('Must provide a locusUrl or sipTarget');\n      }\n\n      return this.webex\n        .request({\n          method: HTTP_VERBS.POST,\n          uri: url,\n          body\n        })\n        .then((res) => {\n          const {locus} = res.body;\n\n          locus.roapSeq = options.roapMessage.seq;\n          locus.id = locus.url.split('/').pop();\n          LoggerProxy.logger.info(`RoapRequest->joinMeetingWithRoap#Joined locus [${locus.id}][${locus.fullState.lastActive}]`);\n\n          return locus;\n        })\n        .catch((err) => {\n          LoggerProxy.logger.error(`RoapRequest->joinMeetingWithRoap#failed with error: ${err}`);\n          throw err;\n        });\n    });\n  }\n\n  /**\n   * Sends a ROAP message\n   * @param {Object} options\n   * @param {String} options.roapMessage\n   * @param {String} options.locusId\n   * @param {String} options.locusSelfId\n   * @param {String} options.mediaId\n   * @param {String} options.correlationId\n   * @returns {Promise} returns the response/failure of the request\n   */\n  sendRoap(options) {\n    const {\n      roapMessage, locusSelfUrl, mediaId, correlationId, meetingId\n    } = options;\n\n    if (!mediaId) {\n      LoggerProxy.logger.info('RoapRequest->sendRoap#Race Condition /call mediaID not present');\n    }\n\n    const mediaUrl = `${locusSelfUrl}/${MEDIA}`;\n    const deviceUrl = this.webex.internal.device.url;\n\n    LoggerProxy.logger.info(`RoapRequest->sendRoap#${mediaUrl} \\n ${roapMessage.messageType} \\n seq:${roapMessage.seq}`);\n\n    Metrics.postEvent({event: eventType.MEDIA_REQUEST, meetingId});\n\n    return this.webex\n      .request({\n        uri: mediaUrl,\n        method: HTTP_VERBS.PUT,\n        body: {\n          device: {\n            url: deviceUrl,\n            deviceType: this.config.meetings.deviceType\n          },\n          correlationId,\n          localMedias: [\n            {\n              localSdp: JSON.stringify(this.attachRechabilityData({\n                roapMessage,\n                // eslint-disable-next-line no-warning-comments\n                // TODO: check whats the need for video and audiomute\n                audioMuted: !!options.audioMuted,\n                videoMuted: !!options.videoMuted\n              })),\n              mediaId: options.mediaId\n            }\n          ]\n        }\n      })\n      .then((res) => {\n        Metrics.postEvent({event: eventType.MEDIA_RESPONSE, meetingId});\n\n        // always it will be the first mediaConnection Object\n        const mediaConnection = res.body.mediaConnections && res.body.mediaConnections.length > 0 && res.body.mediaConnections[0];\n\n        LoggerProxy.logger.info(\n          `RoapRequest->sendRoap#:response:${JSON.stringify(mediaConnection, null, 2)}'\\n StatusCode:'${res.statusCode}`\n        );\n        const {locus} = res.body;\n\n        locus.roapSeq = options.roapMessage.seq;\n\n        return locus;\n      })\n      .catch((err) => {\n        Metrics.postEvent({event: eventType.MEDIA_RESPONSE, meetingId, data: {error: Metrics.parseLocusError(err, true)}});\n        LoggerProxy.logger.error(`RoapRequest->sendRoap#Error:${JSON.stringify(err, null, 2)}`);\n        LoggerProxy.logger.error(\n          `RoapRequest->sendRoapRequest#errorBody:${JSON.stringify(roapMessage, null, 2)} + '\\\\n mediaId:'${options.mediaId}`\n        );\n        throw err;\n      });\n  }\n}\n"]}