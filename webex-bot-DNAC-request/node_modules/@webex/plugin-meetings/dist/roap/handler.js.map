{"version":3,"sources":["handler.js"],"names":["checkForAndHandleErrors","action","meeting","correlationId","type","msg","messageType","errorType","RoapUtil","findError","handleError","mediaProperties","peerConnection","then","res","RoapCollection","deleteSessionSequence","seq","catch","err","LoggerProxy","logger","warn","ensureMeeting","handleSessionStep","roap","session","sequenceId","OFFER","_OFFER_","GLARE_OFFER","remote","info","state","RoapHandler","attrs","options","roapOk","roapAnswer","ROAP","ROAP_STATE","WAIT_TX_ANSWER","shouldHandleMedia","updatePeerConnection","answerSdps","locusId","locusSelfId","locusInfo","self","id","mediaId","sdps","audioMuted","isAudioMuted","videoMuted","isVideoMuted","error","WAIT_TX_OK","setRemoteDescription","ERROR","GLARE","tieBreaker","log","step","ROAP_SIGNAL","GLARE_RESOLVED","perform","signal","prefix","RECEIVE_ROAP_MSG","execute","RX_","SEND_ROAP_MSG","local","TX_","SEND_ROAP_MSG_SUCCESS","getSessionSequence","ANSWER","RX_ANSWER","RECEIVE_CALL_LEAVE","deleteSession","RESET_ROAP_STATE","webex","meetings","meetingCollection","get","handleAction","StatelessWebexPlugin"],"mappings":"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","file":"handler.js","sourcesContent":["/* no-param-reassign */\nimport {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport {ROAP, _OFFER_} from '../constants';\nimport RoapUtil from '../roap/util';\nimport RoapCollection from '../roap/collection';\n\nconst checkForAndHandleErrors = (action, meeting, correlationId) => {\n  if (action && action.type) {\n    if (action.msg && action.msg.messageType && action.msg.errorType) {\n      if (RoapUtil.findError(action.msg.messageType, action.msg.errorType, action.type)) {\n        RoapUtil.handleError(meeting.mediaProperties.peerConnection)\n          .then((res) => {\n            if (res) {\n              RoapCollection.deleteSessionSequence(correlationId, action.msg.seq);\n            }\n          })\n          .catch((err) => {\n            LoggerProxy.logger.warn(`RoapHandler->checkForAndHandleErrors#Cannot reset the peer connection with error: ${err}`);\n          });\n\n        return true;\n      }\n    }\n    if (!RoapUtil.ensureMeeting(meeting, action.type)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst handleSessionStep = (roap, session) => {\n  const {seq: sequenceId, messageType} = roap.msg;\n\n  if (session.OFFER && messageType === _OFFER_) {\n    session.GLARE_OFFER = roap.msg;\n    session.GLARE_OFFER.remote = !!roap.remote;\n    LoggerProxy.logger.warn(`RoapHandler->handleSessionStep#Glare condition occurred with new mercury event, sequenceId: ${sequenceId}`);\n  }\n  else {\n    LoggerProxy.logger.info(`RoapHandler->handleSessionStep#Save OFFER/ANSWER seq:${sequenceId} new mercury event ${messageType}local state: ${JSON.stringify(session.state.state, null, 2)}`);\n    session[messageType] = roap.msg;\n    session[messageType].remote = !!roap.remote;\n  }\n};\n\n/**\n * @class RoapHandler\n */\nexport default class RoapHandler extends StatelessWebexPlugin {\n  constructor(attrs, options, roapOk, roapAnswer) {\n    super({}, options);\n    this.attrs = attrs;\n    this.options = options;\n    this.roapOk = roapOk;\n    this.roapAnswer = roapAnswer;\n  }\n\n  /**\n   *\n   * @param {Object} session\n   * @param {Meeting} meeting\n   * @param {Object} action\n   * @returns {null}\n   */\n  perform(session, meeting, action) {\n    switch (session.state.state) {\n      // case ROAP.ROAP_STATE.INIT:\n      // case ROAP.ROAP_STATE.WAIT_RX_OFFER:\n      // case ROAP.ROAP_STATE.WAIT_RX_ANSWER:\n      // case ROAP.ROAP_STATE.WAIT_RX_OK:\n      case ROAP.ROAP_STATE.WAIT_TX_ANSWER:\n        // eslint-disable-next-line no-warning-comments\n        // TODO: sometime the you get an answer while you are creating an offer so SKIP\n        // Server will send the mercury event comes back\n        if (RoapUtil.shouldHandleMedia(meeting)) {\n          RoapUtil.updatePeerConnection(meeting, session)\n            .then((answerSdps) => {\n              this.roapAnswer({\n                locusId: meeting.locusId,\n                locusSelfId: meeting.locusInfo.self.id,\n                mediaId: meeting.mediaId,\n                sdps: answerSdps,\n                seq: session.OFFER.seq,\n                correlationId: meeting.correlationId,\n                audioMuted: meeting.isAudioMuted(),\n                videoMuted: meeting.isVideoMuted()\n              });\n            })\n            .catch((err) => {\n              LoggerProxy.logger.error(`RoapHandler->perform#Error occured during wait receive answer, continuing, ${err}`);\n            });\n        }\n        break;\n      case ROAP.ROAP_STATE.WAIT_TX_OK:\n        if (!RoapUtil.shouldHandleMedia(meeting)) {\n          RoapUtil.setRemoteDescription(meeting, session).then((res) => {\n            this.roapOk(res);\n          });\n        }\n        break;\n      // case ROAP.ROAP_STATE.IDLE_LOCAL_OFFER:\n      case ROAP.ROAP_STATE.ERROR:\n        LoggerProxy.logger.error(`RoapHandler->perform#Roap State ERROR for session: ${session}`);\n        break;\n      case ROAP.ROAP_STATE.GLARE:\n        session.GLARE_OFFER.tieBreaker = session.GLARE_OFFER.tieBreaker || 0;\n        session.OFFER.tieBreaker = session.OFFER.tieBreaker || 0;\n        LoggerProxy.logger.warn('RoapHandler->perform#Roap State resolved the GLARE condition.');\n        if (session.GLARE_OFFER.tieBreaker < session.OFFER.tieBreaker) {\n          // 2\n          LoggerProxy.logger.log('RoapHandler->perform#Roap State local offer won after GLARE.');\n        }\n        else {\n          LoggerProxy.logger.log('RoapHandler->perform#Roap State remote offer won after GLARE.');\n        }\n        session.state.step(ROAP.ROAP_SIGNAL.GLARE_RESOLVED, meeting, action);\n        this.perform(session, meeting);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   *\n   * @param {String} signal\n   * @param {Object} session\n   * @param {Object} action\n   * @param {Meeting} meeting\n   * @param {String} prefix\n   * @returns {null}\n   */\n  execute(signal, session, action, meeting, prefix) {\n    if (session && session.state) {\n      handleSessionStep(action, session);\n      signal = ROAP.ROAP_SIGNAL[`${prefix}${action.msg.messageType}`];\n      session.state.step(signal, meeting, action);\n      this.perform(session, meeting, action);\n    }\n  }\n\n  /**\n   *\n   * @param {Object} session\n   * @param {Object} action\n   * @param {Meeting} meeting\n   * @param {String} correlationId\n   * @returns {Boolean}\n   */\n  handleAction(session, action, meeting, correlationId) {\n    let signal;\n\n    switch (action.type) {\n      case ROAP.RECEIVE_ROAP_MSG:\n        action.remote = true;\n        this.execute(signal, session, action, meeting, ROAP.RX_);\n        break;\n      case ROAP.SEND_ROAP_MSG:\n        action.local = true;\n        this.execute(signal, session, action, meeting, ROAP.TX_);\n        break;\n      case ROAP.SEND_ROAP_MSG_SUCCESS:\n        // This means we got and answer and waiting for 200 ok for /participants\n        if (RoapCollection.getSessionSequence(correlationId, action.seq).ANSWER) {\n          signal = ROAP.ROAP_SIGNAL.RX_ANSWER;\n          // NOTE: When server send back an answer via mercury the\n          // remote SDP is already saved sent and ok message is sent back\n          // We dont have to indicate the roapHandler about the RX_ANSWER via SEND_ROAP_MSG_SUCCESS\n          // RoapHandler.transition(signal, session, meeting);\n        }\n        break;\n      case ROAP.RECEIVE_CALL_LEAVE:\n        RoapCollection.deleteSession(correlationId);\n        LoggerProxy.logger.log(`RoapHandler->handleAction#RECEIVE_CALL_LEAVE event captured, cleaning up the RoapHandler for correlationId: ${correlationId}`); break;\n      case ROAP.RESET_ROAP_STATE:\n        RoapCollection.deleteSessionSequence(correlationId, action.msg.seq);\n        LoggerProxy.logger.log(`RoapHandler->handleAction#RESET_ROAP_STATE event captured, resetting the RoapHandler state based on sequenceId: ${action.msg.seq}`); break;\n      default:\n        return true;\n    }\n\n    return true;\n  }\n\n  /**\n   *\n   * @param {Object} action\n   * @returns {Boolean}\n   */\n  submit(action) {\n    const {correlationId} = action;\n    let {seq} = action;\n\n    if (!seq && action.msg) {\n      seq = action.msg.seq;\n    }\n    const session = RoapCollection.getSessionSequence(correlationId, seq);\n    const meeting = this.webex.meetings.meetingCollection.get(correlationId);\n\n    if (checkForAndHandleErrors(action, meeting, correlationId)) {\n      return true;\n    }\n\n    return this.handleAction(session, action, meeting, correlationId);\n  }\n}\n"]}