'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _constants = require('../constants');

var FullState = {};

FullState.parse = function (fullState) {
  return {
    type: fullState.type || _constants.FULL_STATE.UNKNOWN,
    meetingState: fullState.state,
    locked: fullState.locked
  };
};

FullState.getFullState = function (oldFullState, newFullState) {
  var previous = oldFullState && FullState.parse(oldFullState);
  var current = newFullState && FullState.parse(newFullState);

  return {
    previous: previous,
    current: current,
    updates: {
      isMeetingEnded: FullState.isMeetingEnded(previous, current),
      isMeetingTerminating: FullState.isMeetingTerminating(previous, current),
      meetingTypeChangedTo: FullState.isTypeChanged(previous, current),
      meetingStateChangedTo: FullState.meetingStateChange(previous, current)
    }
  };
};

FullState.isMeetingEnded = function (previous, current) {
  if (current.state === _constants.FULL_STATE.INACTIVE && previous && (previous.state === _constants.FULL_STATE.ACTIVE || previous.state === _constants.FULL_STATE.INITIALIZING || previous.state === _constants.FULL_STATE.TERMINATING)) {
    return true;
  }

  return false;
};

FullState.isMeetingTerminating = function (previous, current) {
  if (current.state === _constants.FULL_STATE.TERMINATING && previous && (previous.state === _constants.FULL_STATE.ACTIVE || previous.state === _constants.FULL_STATE.INITIALIZING)) {
    return true;
  }

  return false;
};

FullState.isTypeChanged = function (previous, current) {
  if (!previous || current.type !== previous.type) {
    return current && current.type;
  }

  return null;
};

FullState.meetingStateChange = function (previous, current) {
  if (!previous || current.meetingState !== previous.meetingState) {
    return current && current.meetingState;
  }

  return null;
};

exports.default = FullState;
//# sourceMappingURL=fullState.js.map
