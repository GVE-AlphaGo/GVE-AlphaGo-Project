"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var InfoUtils = {};

InfoUtils.parse = function (info) {
  var parsed = {
    policy: InfoUtils.parsePolicy(info),
    moderator: InfoUtils.parseModerator(info)
  };

  if (info.sipUri) {
    parsed.sipUri = info.sipUri;
  }

  return parsed;
};
InfoUtils.parsePolicy = function (info) {
  var policy = {};

  // Parses the policy to show valid uses
  if (info && info.displayHints && info.displayHints.joined && info.displayHints.joined.length > 0) {
    // TODO: find a better way
    info.displayHints.joined.forEach(function (key) {
      policy[key] = true;
    });
  }

  return policy;
};

InfoUtils.parseModerator = function (info) {
  var moderator = {};

  if (info && info.displayHints && info.displayHints.moderator && info.displayHints.moderator.length > 0) {
    info.displayHints.moderator.forEach(function (key) {
      moderator[key] = true;
    });
  }

  return moderator;
};

InfoUtils.isLocked = function (policy) {
  return policy.LOCK_STATUS_LOCKED || false;
};

InfoUtils.isUnlocked = function (policy) {
  return policy.LOCK_STATUS_UNLOCKED || false;
};

InfoUtils.getInfos = function (oldInfo, newInfo) {
  var previous = null;

  if (oldInfo) {
    previous = oldInfo;
  }
  var current = newInfo && InfoUtils.parse(newInfo);
  var updates = {};

  if (current) {
    current.isLocked = InfoUtils.isLocked(current.policy);
    current.isUnlocked = InfoUtils.isUnlocked(current.policy);

    if (previous && previous.isUnlocked && current.isLocked || !previous && current.isLocked) {
      updates.isLocked = current.isLocked;
    }
    if (previous && previous.isLocked && current.isUnlocked || !previous && current.isUnlocked) {
      updates.isUnlocked = current.isUnlocked;
    }
  }

  return {
    previous: previous,
    current: current,
    updates: {
      isLocked: InfoUtils.isLocked(current),
      isUnlocked: InfoUtils.isUnlocked(current)
    }
  };
};

exports.default = InfoUtils;
//# sourceMappingURL=infoUtils.js.map
