{"version":3,"sources":["mediaSharesUtils.js"],"names":["MediaSharesUtils","parse","mediaShares","contentId","getContentId","disposition","getDisposition","getMediaShares","oldShare","newShare","previous","current","contentFloor","extractContentFloor","extractContent","length","find","share","name","CONTENT","extractFloor","content","floor","beneficiary","id"],"mappings":";;;;;;AAAA;;AAEA,IAAMA,mBAAmB,EAAzB;;AAEA;;;;;AAKAA,iBAAiBC,KAAjB,GAAyB,UAACC,WAAD,EAAiB;AACxC,MAAIA,WAAJ,EAAiB;AACf,WAAO;AACLC,iBAAWH,iBAAiBI,YAAjB,CAA8BF,WAA9B,CADN;AAELG,mBAAaL,iBAAiBM,cAAjB,CAAgCJ,WAAhC;AAFR,KAAP;AAID;;AAED,SAAO,IAAP;AACD,CATD;;AAWA;;;;;;;AAOAF,iBAAiBO,cAAjB,GAAkC,UAACC,QAAD,EAAWC,QAAX,EAAwB;AACxD,MAAMC,WAAWF,YAAYR,iBAAiBC,KAAjB,CAAuBO,QAAvB,CAA7B;AACA,MAAMG,UAAUF,YAAYT,iBAAiBC,KAAjB,CAAuBQ,QAAvB,CAA5B;;AAEA,SAAO;AACLC,sBADK;AAELC;AAFK,GAAP;AAID,CARD;;AAUA;;;;;AAKAX,iBAAiBM,cAAjB,GAAkC,UAACJ,WAAD,EAAiB;AACjD,MAAMU,eAAeZ,iBAAiBa,mBAAjB,CAAqCX,WAArC,CAArB;;AAEA,SAAOU,eAAeA,aAAaP,WAA5B,GAA0C,IAAjD;AACD,CAJD;;AAMA;;;;;AAKAL,iBAAiBc,cAAjB,GAAkC,UAACZ,WAAD,EAAiB;AACjD,MAAI,CAACA,WAAD,IAAgB,CAACA,YAAYa,MAAjC,EAAyC;AACvC,WAAO,IAAP;AACD;;AAED,SAAOb,YAAYc,IAAZ,CAAiB,UAACC,KAAD;AAAA,WAAWA,MAAMC,IAAN,KAAeC,kBAA1B;AAAA,GAAjB,KAAuD,IAA9D;AACD,CAND;;AAQA;;;;;AAKAnB,iBAAiBoB,YAAjB,GAAgC,UAACC,OAAD,EAAa;AAC3C,MAAI,CAACA,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AAED,SAAOA,QAAQC,KAAf;AACD,CAND;;AAQA;;;;;AAKAtB,iBAAiBa,mBAAjB,GAAuC,UAACX,WAAD,EAAiB;AACtD,MAAMmB,UAAUrB,iBAAiBc,cAAjB,CAAgCZ,WAAhC,CAAhB;;AAEA,SAAOF,iBAAiBoB,YAAjB,CAA8BC,OAA9B,CAAP;AACD,CAJD;;AAMA;;;;;AAKArB,iBAAiBI,YAAjB,GAAgC,UAACF,WAAD,EAAiB;AAC/C,MAAMU,eAAeZ,iBAAiBa,mBAAjB,CAAqCX,WAArC,CAArB;;AAEA,MAAI,CAACU,YAAD,IAAiB,CAACA,aAAaW,WAAnC,EAAgD;AAC9C,WAAO,IAAP;AACD;;AAED,SAAOX,aAAaW,WAAb,CAAyBC,EAAhC;AACD,CARD;;kBAUexB,gB","file":"mediaSharesUtils.js","sourcesContent":["import {CONTENT} from '../constants';\n\nconst MediaSharesUtils = {};\n\n/**\n * parses the relevant values for mediaShares: contentId, disposition\n * @param {Object} mediaShares\n * @returns {undefined}\n */\nMediaSharesUtils.parse = (mediaShares) => {\n  if (mediaShares) {\n    return {\n      contentId: MediaSharesUtils.getContentId(mediaShares),\n      disposition: MediaSharesUtils.getDisposition(mediaShares)\n    };\n  }\n\n  return null;\n};\n\n/**\n * get the previous and current mediaShares values parsed, as well as the boolean updates\n * @param {Object} oldShare\n * @param {Object} newShare\n * @returns {Object}\n * previous: {Object} old share, current: {Object} new share,\n */\nMediaSharesUtils.getMediaShares = (oldShare, newShare) => {\n  const previous = oldShare && MediaSharesUtils.parse(oldShare);\n  const current = newShare && MediaSharesUtils.parse(newShare);\n\n  return {\n    previous,\n    current\n  };\n};\n\n/**\n * get the floor disposition (released, granted)\n * @param {Object} mediaShares\n * @returns {Boolean} disposition\n */\nMediaSharesUtils.getDisposition = (mediaShares) => {\n  const contentFloor = MediaSharesUtils.extractContentFloor(mediaShares);\n\n  return contentFloor ? contentFloor.disposition : null;\n};\n\n/**\n * extract the content property from media shares\n * @param {Object} mediaShares\n * @returns {Object}\n */\nMediaSharesUtils.extractContent = (mediaShares) => {\n  if (!mediaShares || !mediaShares.length) {\n    return null;\n  }\n\n  return mediaShares.find((share) => share.name === CONTENT) || null;\n};\n\n/**\n * extract the floor property from content object\n * @param {Object} content\n * @returns {Object}\n */\nMediaSharesUtils.extractFloor = (content) => {\n  if (!content) {\n    return null;\n  }\n\n  return content.floor;\n};\n\n/**\n * extract the content's floor from media shares\n * @param {Object} mediaShares\n * @returns {Object}\n */\nMediaSharesUtils.extractContentFloor = (mediaShares) => {\n  const content = MediaSharesUtils.extractContent(mediaShares);\n\n  return MediaSharesUtils.extractFloor(content);\n};\n\n/**\n * get who is sharing from media shares\n * @param {Object} mediaShares\n * @returns {Object}\n */\nMediaSharesUtils.getContentId = (mediaShares) => {\n  const contentFloor = MediaSharesUtils.extractContentFloor(mediaShares);\n\n  if (!contentFloor || !contentFloor.beneficiary) {\n    return null;\n  }\n\n  return contentFloor.beneficiary.id;\n};\n\nexport default MediaSharesUtils;\n"]}