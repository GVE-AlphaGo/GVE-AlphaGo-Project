{"version":3,"sources":["controlsUtils.js"],"names":["ControlsUtils","parse","controls","recordingId","getId","record","recording","meta","modifiedBy"],"mappings":";;;;;AAAA,IAAMA,gBAAgB,EAAtB;;AAEA;;;;;;;;;AASA;;;;;;AAMAA,cAAcC,KAAd,GAAsB,UAACC,QAAD,EAAc;AAClC,MAAIA,QAAJ,EAAc;AACZ,WAAO;AACLC,mBAAaH,cAAcI,KAAd,CAAoBF,QAApB;AADR,KAAP;AAGD;;AAED,SAAO,IAAP;AACD,CARD;;AAUA;;;;;AAKAF,cAAcI,KAAd,GAAsB,UAACF,QAAD,EAAc;AAClC,MAAI,CAACA,QAAD,IAAa,CAACA,SAASG,MAAvB,IAAiC,CAACH,SAASG,MAAT,CAAgBC,SAAtD,EAAiE;AAC/D,WAAO,IAAP;AACD;AACD,MAAIJ,SAASG,MAAT,IAAmBH,SAASG,MAAT,CAAgBE,IAAnC,IAA2CL,SAASG,MAAT,CAAgBC,SAA/D,EAA0E;AACxE,WAAOJ,SAASG,MAAT,CAAgBE,IAAhB,CAAqBC,UAA5B;AACD;;AAED,SAAO,IAAP;AACD,CATD;;kBAWeR,a","file":"controlsUtils.js","sourcesContent":["const ControlsUtils = {};\n\n/**\n * Controls\n * @typedef {Object} LocusControls\n * @property {Object} record\n * @property {Boolean} record.recording\n * @property {Object} record.meta\n * @property {String} record.meta.modifiedBy\n */\n\n/**\n * parse the relevant host values that we care about: id\n * @param {LocusControls} controls\n * @returns {Object} parsedObject - parsed host or null if host was undefined\n * @returns {String} parsedObject.recordingId\n */\nControlsUtils.parse = (controls) => {\n  if (controls) {\n    return {\n      recordingId: ControlsUtils.getId(controls)\n    };\n  }\n\n  return null;\n};\n\n/**\n * Extract the id from the record controls object\n * @param {LocusControls} controls\n * @returns {String|null}\n */\nControlsUtils.getId = (controls) => {\n  if (!controls || !controls.record || !controls.record.recording) {\n    return null;\n  }\n  if (controls.record && controls.record.meta && controls.record.recording) {\n    return controls.record.meta.modifiedBy;\n  }\n\n  return null;\n};\n\nexport default ControlsUtils;\n"]}