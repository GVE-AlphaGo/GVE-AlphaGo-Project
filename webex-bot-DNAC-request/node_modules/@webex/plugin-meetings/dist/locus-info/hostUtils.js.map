{"version":3,"sources":["hostUtils.js"],"names":["HostUtils","parse","host","hostId","getId","getHosts","oldHost","newHost","previous","current","updates","isNewHost","isDifferentHosts","previousId","currentId","id"],"mappings":";;;;;AAAA,IAAMA,YAAY,EAAlB;;AAEA;;;;;AAKAA,UAAUC,KAAV,GAAkB,UAACC,IAAD,EAAU;AAC1B,MAAIA,IAAJ,EAAU;AACR,WAAO;AACLC,cAAQH,UAAUI,KAAV,CAAgBF,IAAhB;AADH,KAAP;AAGD;;AAED,SAAO,IAAP;AACD,CARD;;AAUA;;;;;;;AAOAF,UAAUK,QAAV,GAAqB,UAACC,OAAD,EAAUC,OAAV,EAAsB;AACzC,MAAMC,WAAWF,WAAWN,UAAUC,KAAV,CAAgBK,OAAhB,CAA5B;AACA,MAAMG,UAAUF,WAAWP,UAAUC,KAAV,CAAgBM,OAAhB,CAA3B;;AAEA,SAAO;AACLC,sBADK;AAELC,oBAFK;AAGLC,aAAS;AACPC,iBAAWH,YAAYC,OAAZ,GAAsBT,UAAUY,gBAAV,CAA2BJ,SAASL,MAApC,EAA4CM,QAAQN,MAApD,CAAtB,GAAoF;AADxF;AAHJ,GAAP;AAOD,CAXD;;AAaA;;;;;;AAMAH,UAAUY,gBAAV,GAA6B,UAACC,UAAD,EAAaC,SAAb;AAAA,SAA2BD,eAAeC,SAA1C;AAAA,CAA7B;;AAEA;;;;;AAKAd,UAAUI,KAAV,GAAkB,UAACF,IAAD,EAAU;AAC1B,MAAI,CAACA,IAAL,EAAW;AACT,WAAO,IAAP;AACD;;AAED,SAAOA,KAAKa,EAAZ;AACD,CAND;;kBAQef,S","file":"hostUtils.js","sourcesContent":["const HostUtils = {};\n\n/**\n * parse the relevant host values that we care about: id\n * @param {Object} host\n * @returns {Object} parsed host or null if host was undefined\n */\nHostUtils.parse = (host) => {\n  if (host) {\n    return {\n      hostId: HostUtils.getId(host)\n    };\n  }\n\n  return null;\n};\n\n/**\n * get the previous and current host values parsed, as well as the boolean updates\n * @param {Object} oldHost\n * @param {Object} newHost\n * @returns {Object}\n * previous: {Object} old host, current: {Object} new host, updates: {isNewHost: {boolean}} boolean update values\n */\nHostUtils.getHosts = (oldHost, newHost) => {\n  const previous = oldHost && HostUtils.parse(oldHost);\n  const current = newHost && HostUtils.parse(newHost);\n\n  return {\n    previous,\n    current,\n    updates: {\n      isNewHost: previous && current ? HostUtils.isDifferentHosts(previous.hostId, current.hostId) : true\n    }\n  };\n};\n\n/**\n * determine by id if 2 hosts are different\n * @param {String} previousId\n * @param {String} currentId\n * @returns {Boolean}\n */\nHostUtils.isDifferentHosts = (previousId, currentId) => previousId !== currentId;\n\n/**\n * Extract the id from the host object\n * @param {Object} host\n * @returns {String}\n */\nHostUtils.getId = (host) => {\n  if (!host) {\n    return null;\n  }\n\n  return host.id;\n};\n\nexport default HostUtils;\n"]}