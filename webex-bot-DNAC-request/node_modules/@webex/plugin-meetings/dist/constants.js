'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MQA_STATS = exports.STATS = exports.SDP = exports.ROAP = exports.REACHABILITY = exports.RESOURCE = exports.RECONNECTION = exports.RTC_CONFIGURATION = exports.RTC_CONFIGURATION_FIREFOX = exports.PEER_CONNECTION_STATE = exports.MEETING_VIDEO_STATE_MACHINE = exports.MEETING_AUDIO_STATE_MACHINE = exports.MEETING_STATE_MACHINE = exports.MEETING_STATE = exports.MODERATOR_HINTS = exports.MEETING_ERRORS = exports.LOCUSEVENT = exports.LOCUSINFO = exports.LOCUS = exports.JOIN_HINTS = exports.ICE_STATE = exports.HTTP_VERBS = exports.FULL_STATE = exports.FLOOR_ACTION = exports.ERROR_DICTIONARY = exports.EVENT_STATS_MAP = exports.EVENTS = exports.CALL_REMOVED_REASON = exports.MEETING_REMOVED_REASON = exports.EVENT_TYPES = exports.EVENT_TRIGGERS = exports.DELTAEVENT = exports.DEFAULT_OMISSION_DATA_KEYS = exports.DEFAULT_TRANSFORM_KEYS = exports.DEFAULT_EVENT_AUDIO_RECEIVE_KEYS = exports.DEFAULT_EVENT_VIDEO_RECEIVE_KEYS = exports.DEFAULT_EVENT_AUDIO_SEND_KEYS = exports.DEFAULT_EVENT_VIDEO_SEND_KEYS = exports.DEFAULT_GET_STATS_FILTER = exports.CALENDAR_EVENTS = exports.ANALYSIS_STATS = exports.ANALYSIS_CHECKS = exports.API = exports.UUID_REG = exports.VALID_PIN = exports.VALID_PMR_LINK = undefined;
exports.VALID_PMR_ADDRESS = exports.VALID_EMAIL_ADDRESS = exports.DEFAULT_FF_TRANSFORM_REGEX = exports.DEFAULT_TRANSFORM_REGEX = exports.DIALER_REGEX = exports.ROAP_SEQ_PRE = exports.RETRY_TIMEOUT = exports.ICE_FAIL_TIMEOUT = exports.ICE_TIMEOUT = exports.INTENT_TO_JOIN = exports.MODERATOR_FALSE = exports.MODERATOR_TRUE = exports.DEFAULT_EXCLUDED_STATS = exports.CONVERSATION_SERVICE = exports.WEBEX_DOT_COM = exports.WWW_DOT = exports.USE_URI_LOOKUP_FALSE = exports.SHARE_PEER_CONNECTION_NAME = exports.MEDIA_PEER_CONNECTION_NAME = exports.MEETINGS = exports.HTTPS_PROTOCOL = exports.ALTERNATE_REDIRECT_TRUE = exports._WAIT_ = exports._WEBEX_MEETING_ = exports._UNKNOWN_ = exports._USER_ = exports._S_LINE = exports._SLIDES_ = exports._SEND_RECEIVE_ = exports._SIP_URI_ = exports._ROOM_ = exports._RECEIVE_ONLY_ = exports._RESOURCE_ROOM_ = exports._REQUESTED_ = exports._PEOPLE_ = exports._PERSONAL_ROOM_ = exports._OBSERVE_ = exports._OFFER_ = exports._NONE_ = exports._NOT_IN_MEETING_ = exports._MEETING_ID_ = exports._MEETING_CENTER_ = exports._MEETING_ = exports._MEETING_LINK_ = exports._LEFT_ = exports._LOCUS_ID_ = exports._JOINED_ = exports._JOIN_ = exports._ID_ = exports._IN_ = exports._INCOMING_ = exports._IN_MEETING_ = exports._IN_LOBBY_ = exports._IDLE_ = exports._FORCED_ = exports._ERROR_ = exports._CONVERSATION_URL_ = exports._CONFLICT_ = exports._CREATED_ = exports._CALL_ = exports._BUSY_ = exports._ACTIVE_ = exports._ANSWER_ = exports.VIDEO_STATUS = exports.VIDEO_INPUT = exports.VIDEO = exports.TYPE = exports.SIP_URI = exports.READY = exports.REMOTE = exports.PARTICIPANT = exports.ONLINE = exports.MEDIA = exports.MEET_M = exports.MEET = exports.MEETINGINFO = exports.LOCUS_URL = exports.LOCI = exports.LOCAL = exports.LEAVE = exports.JOIN = exports.HECATE = exports.OFFER = exports.ERROR = exports.DECLINE = exports.DEVELOPMENT = exports.CONTENT = exports.CONTROLS = exports.CLAIM = exports.CMR_MEETINGS = exports.CALENDAR_EVENTS_API = exports.CALENDAR = exports.CONVERSATIONS = exports.CORRELATION_ID = exports.CALL = exports.ANSWER = exports.ALERT = exports.AUDIO_STATUS = exports.AUDIO_INPUT = exports.AUDIO = undefined;

var _common = require('@webex/common');

/** *****
 *
 *
 *  Hey there. Glad you found your way here. Please be sure to alphabetize your constants.
 *
 *
 ****** */

// *********** LOWERCASE / CAMELCASE STRINGS ************
// Please alphabetize
var AUDIO = exports.AUDIO = 'audio';
var AUDIO_INPUT = exports.AUDIO_INPUT = 'audioinput';
var AUDIO_STATUS = exports.AUDIO_STATUS = 'audioStatus';
var ALERT = exports.ALERT = 'alert';
var ANSWER = exports.ANSWER = 'answer';

var CALL = exports.CALL = 'call';
var CORRELATION_ID = exports.CORRELATION_ID = 'correlationId';
var CONVERSATIONS = exports.CONVERSATIONS = 'conversations';
var CALENDAR = exports.CALENDAR = 'calendar';
var CALENDAR_EVENTS_API = exports.CALENDAR_EVENTS_API = 'calendarEvents';
var CMR_MEETINGS = exports.CMR_MEETINGS = 'cmrmeetings';
var CLAIM = exports.CLAIM = 'claim';
var CONTROLS = exports.CONTROLS = 'controls';
var CONTENT = exports.CONTENT = 'content';

var DEVELOPMENT = exports.DEVELOPMENT = 'development';
var DECLINE = exports.DECLINE = 'decline';

var ERROR = exports.ERROR = 'error';

var OFFER = exports.OFFER = 'offer';

var HECATE = exports.HECATE = 'hecate';

var JOIN = exports.JOIN = 'join';

var LEAVE = exports.LEAVE = 'leave';
var LOCAL = exports.LOCAL = 'local';
var LOCI = exports.LOCI = 'loci';
var LOCUS_URL = exports.LOCUS_URL = 'locusUrl';

var MEETINGINFO = exports.MEETINGINFO = 'meetingInfo';
var MEET = exports.MEET = 'meet';
var MEET_M = exports.MEET_M = 'm';
var MEDIA = exports.MEDIA = 'media';

var ONLINE = exports.ONLINE = 'online';

var PARTICIPANT = exports.PARTICIPANT = 'participant';

var REMOTE = exports.REMOTE = 'remote';
var READY = exports.READY = 'ready';

var SIP_URI = exports.SIP_URI = 'sipUri';

var TYPE = exports.TYPE = 'type';

var VIDEO = exports.VIDEO = 'video';
var VIDEO_INPUT = exports.VIDEO_INPUT = 'videoinput';
var VIDEO_STATUS = exports.VIDEO_STATUS = 'videoStatus';

// *********** UPPERCASE ONLY STRINGS ************
// Please alphabetize
var _ANSWER_ = exports._ANSWER_ = 'ANSWER';
var _ACTIVE_ = exports._ACTIVE_ = 'ACTIVE';

var _BUSY_ = exports._BUSY_ = 'BUSY';

var _CALL_ = exports._CALL_ = 'CALL';
var _CREATED_ = exports._CREATED_ = 'CREATED';
var _CONFLICT_ = exports._CONFLICT_ = 'CONFLICT';
var _CONVERSATION_URL_ = exports._CONVERSATION_URL_ = 'CONVERSATION_URL';

var _ERROR_ = exports._ERROR_ = 'ERROR';

var _FORCED_ = exports._FORCED_ = 'FORCED';

var _IDLE_ = exports._IDLE_ = 'IDLE';
var _IN_LOBBY_ = exports._IN_LOBBY_ = 'IN_LOBBY';
var _IN_MEETING_ = exports._IN_MEETING_ = 'IN_MEETING';
var _INCOMING_ = exports._INCOMING_ = 'INCOMING';
var _IN_ = exports._IN_ = 'IN';
var _ID_ = exports._ID_ = 'id';

var _JOIN_ = exports._JOIN_ = 'JOIN';
var _JOINED_ = exports._JOINED_ = 'JOINED';

var _LOCUS_ID_ = exports._LOCUS_ID_ = 'LOCUS_ID';
var _LEFT_ = exports._LEFT_ = 'LEFT';

var _MEETING_LINK_ = exports._MEETING_LINK_ = 'MEETING_LINK';
var _MEETING_ = exports._MEETING_ = 'MEETING';
var _MEETING_CENTER_ = exports._MEETING_CENTER_ = 'MEETING_CENTER';
var _MEETING_ID_ = exports._MEETING_ID_ = 'MEETING_ID';

var _NOT_IN_MEETING_ = exports._NOT_IN_MEETING_ = 'NOT_IN_MEETING';
var _NONE_ = exports._NONE_ = 'NONE';

var _OFFER_ = exports._OFFER_ = 'OFFER';
var _OBSERVE_ = exports._OBSERVE_ = 'OBSERVE';

var _PERSONAL_ROOM_ = exports._PERSONAL_ROOM_ = 'PERSONAL_ROOM';
var _PEOPLE_ = exports._PEOPLE_ = _common.hydraTypes.PEOPLE;

var _REQUESTED_ = exports._REQUESTED_ = 'REQUESTED';
var _RESOURCE_ROOM_ = exports._RESOURCE_ROOM_ = 'RESOURCE_ROOM';
var _RECEIVE_ONLY_ = exports._RECEIVE_ONLY_ = 'RECVONLY';
var _ROOM_ = exports._ROOM_ = _common.hydraTypes.ROOM;

var _SIP_URI_ = exports._SIP_URI_ = 'SIP_URI';
var _SEND_RECEIVE_ = exports._SEND_RECEIVE_ = 'SENDRECV';
var _SLIDES_ = exports._SLIDES_ = 'SLIDES';
var _S_LINE = exports._S_LINE = 's=-';

var _USER_ = exports._USER_ = 'USER';
var _UNKNOWN_ = exports._UNKNOWN_ = 'UNKNOWN';

var _WEBEX_MEETING_ = exports._WEBEX_MEETING_ = 'WEBEX_MEETING';
var _WAIT_ = exports._WAIT_ = 'WAIT';

// *********** STRING HELPERS ***********
// Please alphabetize
var ALTERNATE_REDIRECT_TRUE = exports.ALTERNATE_REDIRECT_TRUE = 'alternateRedirect=true';

var HTTPS_PROTOCOL = exports.HTTPS_PROTOCOL = 'https://';

var MEETINGS = exports.MEETINGS = 'Meetings';

var MEDIA_PEER_CONNECTION_NAME = exports.MEDIA_PEER_CONNECTION_NAME = 'MediaPeerConnection';

var SHARE_PEER_CONNECTION_NAME = exports.SHARE_PEER_CONNECTION_NAME = 'SharePeerConnection';

var USE_URI_LOOKUP_FALSE = exports.USE_URI_LOOKUP_FALSE = 'useUriLookup=false';

var WWW_DOT = exports.WWW_DOT = 'www.';

var WEBEX_DOT_COM = exports.WEBEX_DOT_COM = 'webex.com';

var CONVERSATION_SERVICE = exports.CONVERSATION_SERVICE = 'identityLookup';

// ******************* ARRAYS ********************
// Please alphabetize
var DEFAULT_EXCLUDED_STATS = exports.DEFAULT_EXCLUDED_STATS = ['timestamp', 'ssrc', 'priority'];

// ******************* BOOLEANS *******************
// Please alphabetize
var MODERATOR_TRUE = exports.MODERATOR_TRUE = true;
var MODERATOR_FALSE = exports.MODERATOR_FALSE = false;

// ******************** NUMBERS ********************

var INTENT_TO_JOIN = exports.INTENT_TO_JOIN = 2423005;
var ICE_TIMEOUT = exports.ICE_TIMEOUT = 1000;
var ICE_FAIL_TIMEOUT = exports.ICE_FAIL_TIMEOUT = 3000;

var RETRY_TIMEOUT = exports.RETRY_TIMEOUT = 3000;
var ROAP_SEQ_PRE = exports.ROAP_SEQ_PRE = -1;

// ******************** REGEX **********************
// Please alphabetize
var DIALER_REGEX = exports.DIALER_REGEX = {
  // modified from https://github.com/kirm/sip.js base
  // and with https://tools.ietf.org/html/rfc3261
  // requires the @ symbol
  SIP_ADDRESS: /^(sips?)?:?(?:([^\s>:@]+)(?::([^\s@>]+))?@)([\w\-.]+)(?::(\d+))?((?:;[^\s=?>;]+(?:=[^\s?;]+)?)*)(?:\?(([^\s&=>]+=[^\s&=>]+)(&[^\s&=>]+=[^\s&=>]+)*))?$/,
  // standard telephony num regex
  PHONE_NUMBER: /^(?:(?:\+?1\s*(?:[.-]\s*)?)?(?:\(\s*([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9])\s*\)|([2-9]1[02-9]|[2-9][02-8]1|[2-9][02-8][02-9]))\s*(?:[.-]\s*)?)?([2-9]1[02-9]|[2-9][02-9]1|[2-9][02-9]{2})\s*(?:[.-]\s*)?([0-9]{4})(?:\s*(?:#|x\.?|ext\.?|extension)\s*(\d+))?$/
};

var DEFAULT_TRANSFORM_REGEX = exports.DEFAULT_TRANSFORM_REGEX = {
  rtpOutVideo: {
    regex: new RegExp('^(?:RTC)?[Oo]utbound_?[Rr][Tt][Pp]_?[Vv]ideo')
  },
  rtpOutAudio: {
    regex: new RegExp('^(?:RTC)?[Oo]utbound_?[Rr][Tt][Pp]_?[Aa]udio')
  },
  rtpInVideo: {
    regex: new RegExp('^(?:RTC)?[Ii]nbound_?[Rr][Tt][Pp]_?[Vv]ideo')
  },
  rtpInAudio: {
    regex: new RegExp('^(?:RTC)?[Ii]nbound_?[Rr][Tt][Pp]_?[Aa]udio')
  },
  rtcOutAudio: {
    regex: new RegExp('^RTCMediaStreamTrack_(?:local|sender)_'),
    profiler: {
      type: 'kind',
      value: 'audio'
    }
  },
  rtcOutVideo: {
    regex: new RegExp('^RTCMediaStreamTrack_(?:local|sender)_'),
    profiler: {
      type: 'kind',
      value: 'video'
    }
  },
  rtcInAudio: {
    regex: new RegExp('^RTCMediaStreamTrack_(?:remote|receiver)_'),
    profiler: {
      type: 'kind',
      value: 'audio'
    }
  },
  rtcInVideo: {
    regex: new RegExp('^RTCMediaStreamTrack_(?:remote|receiver)_'),
    profiler: {
      type: 'kind',
      value: 'video'
    }
  },
  rtcTransAudio: {
    regex: new RegExp('^RTCTransport_[Aa]udio')
  },
  rtcTransVideo: {
    regex: new RegExp('^RTCTransport_[Vv]ideo')
  },
  rtcCandidatePair: {
    regex: new RegExp('^RTCIceCandidatePair_'),
    decider: 'nominated',
    selector: true,
    profiler: {
      type: 'type',
      value: 'candidate-pair'
    }
  }
};

// we need a specific firefox transform regular expression map
// to convert firefox values to a consistent getStats type mapping
// as with chrome/edge/safari
var DEFAULT_FF_TRANSFORM_REGEX = exports.DEFAULT_FF_TRANSFORM_REGEX = {
  rtpOutVideo: {
    regex: new RegExp('^outbound-rtp_video_.*')
  },
  rtpOutAudio: {
    regex: new RegExp('^outbound-rtp_audio_.*')
  },
  rtpInVideo: {
    regex: new RegExp('^inbound-rtp_video_.*')
  },
  rtpInAudio: {
    regex: new RegExp('^inbound-rtp_audio_.*')
  },
  rtcCandidatePair: {
    regex: new RegExp('^candidate-pair.*'),
    decider: 'nominated',
    selector: true,
    profiler: {
      type: 'type',
      value: 'candidate-pair'
    }
  }
};

var VALID_EMAIL_ADDRESS = exports.VALID_EMAIL_ADDRESS = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
var VALID_PMR_ADDRESS = exports.VALID_PMR_ADDRESS = /([a-z0-9][-a-z0-9, '.']{0,62})@([a-z0-9][-a-z0-9, '.']{0,62})\.webex\.com/i;
var VALID_PMR_LINK = exports.VALID_PMR_LINK = /(https:\/\/)?([a-z0-9][-a-z0-9, '.']{0,62})\.webex\.com\/(meet|join)\/([a-z0-9][-a-z0-9, '.']{0,62})\/?/i;
var VALID_PIN = exports.VALID_PIN = /([0-9]{4,6})/;
var UUID_REG = exports.UUID_REG = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;

// ******************** OBJECTS ********************
// Please alphabetize, and keep objects organized

// TODO:  move all api params to API section
var API = exports.API = {
  CALLIOPEDISCOVERY: 'calliopeDiscovery',
  LOCUS: 'locus'
};

var ANALYSIS_CHECKS = exports.ANALYSIS_CHECKS = {
  INCREASING: 'increasing',
  DECREASING: 'decreasing',
  CONSTANT: 'constant'
};

var ANALYSIS_STATS = exports.ANALYSIS_STATS = {
  DEFAULT_KEYS: [{ key: 'bytesSent', check: 'increasing', prop: 'rtpOutAudio' }, { key: 'bytesReceived', check: 'increasing', prop: 'rtpInAudio' }]
};

var CALENDAR_EVENTS = exports.CALENDAR_EVENTS = {
  CREATE: 'event:calendar.meeting.create',
  UPDATE: 'event:calendar.meeting.update',
  CREATE_MINIMAL: 'event:calendar.meeting.create.minimal',
  UPDATE_MINIMAL: 'event:calendar.meeting.update.minimal',
  DELETE: 'event:calendar.meeting.delete'
};

var DEFAULT_GET_STATS_FILTER = exports.DEFAULT_GET_STATS_FILTER = {
  types: ['track', 'transport', 'candidate-pair', 'outbound-rtp', 'outboundrtp', 'inbound-rtp', 'inboundrtp']
};
var DEFAULT_EVENT_VIDEO_SEND_KEYS = exports.DEFAULT_EVENT_VIDEO_SEND_KEYS = ['rtpOutVideo', 'rtcOutVideo', 'rtcTransVideo'];
var DEFAULT_EVENT_AUDIO_SEND_KEYS = exports.DEFAULT_EVENT_AUDIO_SEND_KEYS = ['rtpOutAudio', 'rtcOutAudio', 'rtcTransAudio'];
var DEFAULT_EVENT_VIDEO_RECEIVE_KEYS = exports.DEFAULT_EVENT_VIDEO_RECEIVE_KEYS = ['rtpInVideo', 'rtcInVideo', 'rtcTransVideo'];
var DEFAULT_EVENT_AUDIO_RECEIVE_KEYS = exports.DEFAULT_EVENT_AUDIO_RECEIVE_KEYS = ['rtpInAudio', 'rtcInAudio', 'rtcTransAudio'];
var DEFAULT_TRANSFORM_KEYS = exports.DEFAULT_TRANSFORM_KEYS = ['rtpOutVideo', 'rtpOutAudio', 'rtpInVideo', 'rtpInAudio', 'rtcOutAudio', 'rtcOutVideo', 'rtcInAudio', 'rtcInVideo', 'rtcTransAudio', 'rtcTransVideo', 'rtcCandidatePairAudio', 'rtcCandidatePairVideo'];
// remove unneccessary data that stays constant during a call
var DEFAULT_OMISSION_DATA_KEYS = exports.DEFAULT_OMISSION_DATA_KEYS = ['id', 'timestamp', 'type', 'ssrc', 'isRemote', 'mediaType', 'kind', 'trackId', 'transportId', 'codecId', 'mediaSourceId', 'trackIdentifier'];

var DELTAEVENT = exports.DELTAEVENT = {
  GT: 'GT',
  CF: 'CF',
  EQ: 'EQ',
  LT: 'LT'
};

// TODO: do we want to scope by meeting, members when they come off those objects themselves?
var EVENT_TRIGGERS = exports.EVENT_TRIGGERS = {
  MEETINGS_READY: 'meetings:ready',
  MEETINGS_REGISTERED: 'meetings:registered',
  MEETINGS_UNREGISTERED: 'meetings:unregistered',
  MEDIA_READY: 'media:ready',
  MEDIA_STOPPED: 'media:stopped',
  MEDIA_UPDATE: 'media:update',
  MEETING_STARTED_SHARING_LOCAL: 'meeting:startedSharingLocal',
  MEETING_STOPPED_SHARING_LOCAL: 'meeting:stoppedSharingLocal',
  MEETING_ADDED: 'meeting:added',
  MEETING_REMOVED: 'meeting:removed',
  MEETING_RINGING: 'meeting:ringing',
  MEETING_RINGING_STOP: 'meeting:ringingStop',
  MEETING_SELF_LOBBY_WAITING: 'meeting:self:lobbyWaiting',
  MEETING_SELF_GUEST_ADMITTED: 'meeting:self:guestAdmitted',
  MEETING_SELF_MUTED_BY_OTHERS: 'meeting:self:mutedByOthers',
  MEMBERS_UPDATE: 'members:update',
  MEMBERS_CONTENT_UPDATE: 'members:content:update',
  MEMBERS_HOST_UPDATE: 'members:host:update',
  MEMBERS_SELF_UPDATE: 'members:self:update',
  MEETING_RECONNECTION_STARTING: 'meeting:reconnectionStarting',
  MEETING_RECONNECTION_SUCCESS: 'meeting:reconnectionSuccess',
  MEETING_RECONNECTION_FAILURE: 'meeting:reconnectionFailure',
  MEETING_UNLOCKED: 'meeting:unlocked',
  MEETING_LOCKED: 'meeting:locked',
  MEETING_ACTIONS_UPDATE: 'meeting:actionsUpdate',
  MEETING_STATE_CHANGE: 'meeting:stateChange'
};

var EVENT_TYPES = exports.EVENT_TYPES = {
  SELF: 'self',
  OTHER: 'other',
  LOCAL: 'local',
  REMOTE: 'remote',
  REMOTE_AUDIO: 'remoteAudio',
  REMOTE_VIDEO: 'remoteVideo',
  REMOTE_SHARE: 'remoteShare',
  LOCAL_SHARE: 'localShare',
  ERROR: 'error'
};

// Handles the reason when meeting gets destroyed
// host removed you from the meeting
// You are the host and you left the meeting
// Meeting actually ended
var MEETING_REMOVED_REASON = exports.MEETING_REMOVED_REASON = {
  SELF_REMOVED: 'SELF_REMOVED', // server or host removed you from the meeting
  FULLSTATE_REMOVED: 'FULLSTATE_REMOVED', // meeting got dropped ? not sure
  MEETING_INACTIVE_TERMINATING: 'MEETING_INACTIVE_TERMINATING', // Meeting got ended or everyone left the meeting
  CLIENT_LEAVE_REQUEST: 'CLIENT_LEAVE_REQUEST', // You triggred leave meeting
  USER_ENDED_SHARE_STREAMS: 'USER_ENDED_SHARE_STREAMS' // user triggred stop share
};

// One one one calls ends for the following reasons
// Partner reject the call or ends the call
// self cancel or end the ongoing call
var CALL_REMOVED_REASON = exports.CALL_REMOVED_REASON = {
  CALL_INACTIVE: 'CALL_INACTIVE', // partner and you leave the call
  PARTNER_LEFT: 'PARTNER_LEFT', // partner left the call
  SELF_LEFT: 'SELF_LEFT' // you left/declined the call
};

var EVENTS = exports.EVENTS = {
  ROAP_OK: 'ROAP_OK',
  ROAP_ANSWER: 'ROAP_ANSWER',
  SELF_UNADMITTED_GUEST: 'SELF_UNADMITTED_GUEST',
  SELF_ADMITTED_GUEST: 'SELF_ADMITTED_GUEST',
  CONVERSATION_URL_UPDATE: 'CONVERSATION_URL_UPDATE',
  DESTROY_MEETING: 'DESTROY_MEETING',
  REMOTE_ANSWERED_DECLINED: 'REMOTE_ANSWERED_DECLINED',
  // TODO: move all of these to LOCUSINFO.EVENTS
  LOCUS_INFO_UPDATE_PARTICIPANTS: 'LOCUS_INFO_UPDATE_PARTICIPANTS',
  LOCUS_INFO_UPDATE_HOST: 'LOCUS_INFO_UPDATE_HOST',
  LOCUS_INFO_UPDATE_MEDIA_SHARES: 'LOCUS_INFO_UPDATE_MEDIA_SHARES',
  LOCUS_INFO_UPDATE_SELF: 'LOCUS_INFO_UPDATE_SELF',
  LOCUS_INFO_UPDATE_URL: 'LOCUS_INFO_UPDATE_URL',
  LOCUS_INFO_CAN_ASSIGN_HOST: 'LOCUS_INFO_CAN_ASSIGN_HOST'
};

var EVENT_STATS_MAP = exports.EVENT_STATS_MAP = {
  BYTES_SENT: 'bytesSent',
  BYTES_RECEIVED: 'bytesReceived'
};
var ERROR_DICTIONARY = exports.ERROR_DICTIONARY = {
  PARAMETER: {
    NAME: 'ParameterError',
    MESSAGE: 'The parameters passed to the function, or object properties needed in the function were null, missing where required, or otherwise incorrect.',
    CODE: 0
  },
  INTENT_TO_JOIN: {
    NAME: 'IntentToJoinError',
    MESSAGE: 'The meeting is locked. This is expected behavior. Call #join again with hostPin and/or moderator option',
    CODE: 1
  },
  JOIN_MEETING: {
    NAME: 'JoinMeetingError',
    MESSAGE: 'There was an issue joining the meeting, meeting could be in a bad state.',
    CODE: 2
  },
  RECONNECTION: {
    NAME: 'ReconnectionError',
    MESSAGE: 'There was an error in the reconnection flow, the meeting may not reconnect, disconnect and dial again.',
    CODE: 3
  },
  MEDIA: {
    NAME: 'MediaError',
    MESSAGE: 'There was an error with media, the meeting may not have live audio, video or share.',
    CODE: 4
  },
  PERMISSION: {
    NAME: 'PermissionError',
    MESSAGE: 'Not allowed to execute the function, some properties on server, or local client state do not allow you to complete this action.',
    CODE: 5
  },
  STATS: {
    NAME: 'StatsError',
    MESSAGE: 'An error occurred with getStats, stats may not continue for this data stream.',
    CODE: 6
  }
};

var FLOOR_ACTION = exports.FLOOR_ACTION = {
  GRANTED: 'GRANTED',
  RELEASED: 'RELEASED'
};

var FULL_STATE = exports.FULL_STATE = {
  INITIALIZING: 'INITIALIZING',
  INACTIVE: 'INACTIVE',
  ACTIVE: 'ACTIVE',
  TERMINATING: 'TERMINATING',
  UNKNOWN: 'UNKNOWN'
};

var HTTP_VERBS = exports.HTTP_VERBS = {
  PUT: 'PUT',
  POST: 'POST',
  GET: 'GET',
  PATCH: 'PATCH'
};

var ICE_STATE = exports.ICE_STATE = {
  CHECKING: 'checking',
  CONNECTED: 'connected',
  CLOSED: 'closed',
  COMPLETED: 'completed',
  FAILED: 'failed',
  DISCONNECTED: 'disconnected'
};

var JOIN_HINTS = exports.JOIN_HINTS = {
  LOCK_STATUS_LOCKED: 'LOCK_STATUS_LOCKED',
  LOCK_STATUS_UNLOCKED: 'LOCK_STATUS_UNLOCKED'
};

var LOCUS = exports.LOCUS = {
  STATE: {
    INACTIVE: 'INACTIVE',
    ENDED: 'ENDED',
    INITIALIZING: 'INITIALIZING'
  },
  SEQUENCE: {
    UN_DEF: 'undef',
    EMPTY: 'empty',
    DEF: 'def',
    NA: 'na',
    RANGE_START: 'rangeStart',
    RANGE_END: 'rangeEnd'
  },
  SYNCDEBUG: 'sync_debug'
};

var LOCUSINFO = exports.LOCUSINFO = {
  EVENTS: {
    SELF_UNADMITTED_GUEST: 'SELF_UNADMITTED_GUEST',
    SELF_ADMITTED_GUEST: 'SELF_ADMITTED_GUEST',
    SELF_MUTED_BY_OTHERS: 'SELF_MUTED_BY_OTHERS',
    SELF_MODERATOR_CHANGED: 'SELF_MODERATOR_CHANGED',
    MEETING_UPDATE: 'MEETING_UPDATE',
    FULL_STATE_TYPE_UPDATE: 'FULL_STATE_TYPE_UPDATE',
    FULL_STATE_MEETING_STATE_CHANGE: 'FULL_STATE_MEETING_STATE_CHANGE',
    MEETING_STATE_CHANGE_TO_ACTIVE: 'MEETING_STATE_CHANGE_TO_ACTIVE',
    MEETING_INFO_UPDATED: 'MEETING_INFO_UPDATED',
    MEETING_LOCKED: 'MEETING_LOCKED',
    MEETING_UNLOCKED: 'MEETING_UNLOCKED'
  }
};

var LOCUSEVENT = exports.LOCUSEVENT = {
  LOCUS_MERCURY: 'event:locus',

  // update the tp unit status
  CONTROLS_UPDATED: 'locus.controls_updated',

  // delta events
  DIFFERENCE: 'locus.difference',

  // screen sharing
  FLOOR_GRANTED: 'locus.floor_granted',
  FLOOR_RELEASED: 'locus.floor_released',

  // Roap
  MESSAGE_ROAP: 'locus.message.roap',

  // Join events
  PARTICIPANT_JOIN: 'locus.participant_joined',
  PARTICIPANT_LEFT: 'locus.participant_left',
  PARTICIPANT_DECLINED: 'locus.participant_declined',
  PARTICIPANT_UPDATED: 'locus.participant_updated',
  PARTICIPANT_CONTROLS_UPDATED: 'locus.participant_controls_updated',
  PARTICIPANT_ROLES_UPDATED: 'locus.participant_roles_updated',
  PARTICIPANT_AUDIO_MUTED: 'locus.participant_audio_muted',
  PARTICIPANT_AUDIO_UNMUTED: 'locus.participant_audio_unmuted',
  PARTICIPANT_VIDEO_MUTED: 'locus.participant_video_muted',
  PARTICIPANT_VIDEO_UNMUTED: 'locus.participant_video_unmuted',

  RECORDING_STARTED: 'locus.recording_started',
  RECORDING_START_FAILED: 'locus.recording_start_failed',
  RECORDING_STOPPED: 'locus.recording_stopped',

  SELF_CHANGED: 'locus.self_changed'
};

var MEETING_ERRORS = exports.MEETING_ERRORS = {
  METRICS_NOT_SERVER_OR_CLIENT_EXCEPTION: 'METRICS_NOT_SERVER_OR_CLIENT_EXCEPTION',

  BIDIRECTIONAL_ROSTER_NOT_ALLOWED: 'BIDIRECTIONAL_ROSTER_NOT_ALLOWED',
  INVALID_LOCUS_URL: 'INVALID_LOCUS_URL',
  ARGUMENT_NULL_OR_EMPTY: 'ARGUMENT_NULL_OR_EMPTY',
  INVALID_USER: 'INVALID_USER',
  INVALID_PHONE_NUMBER_OR_COUNTRY_CODE: 'INVALID_PHONE_NUMBER_OR_COUNTRY_CODE',
  EMPTY_PHONE_NUMBER_OR_COUNTRY_CODE: 'EMPTY_PHONE_NUMBER_OR_COUNTRY_CODE',
  PHONE_NUMBER_INVALID_COUNTRY_CODE: 'PHONE_NUMBER_INVALID_COUNTRY_CODE',
  PHONE_NUMBER_NOT_A_NUMBER: 'PHONE_NUMBER_NOT_A_NUMBER',
  PHONE_NUMBER_TOO_SHORT_AFTER_IDD: 'PHONE_NUMBER_TOO_SHORT_AFTER_IDD',
  PHONE_NUMBER_TOO_SHORT_NSN: 'PHONE_NUMBER_TOO_SHORT_NSN',
  PHONE_NUMBER_TOO_LONG: 'PHONE_NUMBER_TOO_LONG',
  INVALID_DIALABLE_KEY: 'INVALID_DIALABLE_KEY',
  INVALID_MEETING_LINK: 'INVALID_MEETING_LINK',
  INVALID_SINCE_OR_SEQUENCE_HASH_IN_REQUEST: 'INVALID_SINCE_OR_SEQUENCE_HASH_IN_REQUEST',
  INVALID_LOCUS_ID: 'INVALID_LOCUS_ID',
  EMPTY_SCHEDULED_MEETING_START_TIME: 'EMPTY_SCHEDULED_MEETING_START_TIME',
  INVALID_SCHEDULED_MEETING_DURATION_MINUTES: 'INVALID_SCHEDULED_MEETING_DURATION_MINUTES',
  INVALID_SCHEDULED_MEETING_REMINDER_DURATION_MINUTES: 'INVALID_SCHEDULED_MEETING_REMINDER_DURATION_MINUTES',
  EMPTY_SCHEDULED_MEETING_ORGANIZER: 'EMPTY_SCHEDULED_MEETING_ORGANIZER',
  INVALID_MEETING_ID_FORMAT: 'INVALID_MEETING_ID_FORMAT',
  INVALID_SIP_URL_FORMAT: 'INVALID_SIP_URL_FORMAT',
  EMPTY_INVITEE_RECORD: 'EMPTY_INVITEE_RECORD',
  EMPTY_INVITEE_ADDRESS: 'EMPTY_INVITEE_ADDRESS',
  DESKPHONE_NOTHING_DIALABLE_FOUND: 'DESKPHONE_NOTHING_DIALABLE_FOUND',
  INVALID_INVITEE_ADDRESS: 'INVALID_INVITEE_ADDRESS',
  INVALID_ATTENDEE_ID: 'INVALID_ATTENDEE_ID',
  INVALID_IN_LOBBY: 'INVALID_IN_LOBBY',
  MISSING_REQUESTING_PARTICIPANT_ID: 'MISSING_REQUESTING_PARTICIPANT_ID',
  INVALID_REQUESTING_PARTICIPANT_ID: 'INVALID_REQUESTING_PARTICIPANT_ID',
  SUPPLEMENTARY_USER_INFO_NOT_FOUND: 'SUPPLEMENTARY_USER_INFO_NOT_FOUND',

  UNAUTHORIZED: 'UNAUTHORIZED',
  REMOVED_PARTICIPANT: 'REMOVED_PARTICIPANT',

  FREE_USER_MAX_PARTICIPANTS_EXCEEDED: 'FREE_USER_MAX_PARTICIPANTS_EXCEEDED',
  PAID_USER_MAX_PARTICIPANTS_EXCEEDED: 'PAID_USER_MAX_PARTICIPANTS_EXCEEDED',
  SERVICE_MAX_PARTICIPANTS_EXCEEDED: 'SERVICE_MAX_PARTICIPANTS_EXCEEDED',
  INACTIVE: 'INACTIVE',
  ONE_ON_ONE_TO_SELF_NOT_ALLOWED: 'ONE_ON_ONE_TO_SELF_NOT_ALLOWED',
  JOIN_RESTRICTED_USER: 'JOIN_RESTRICTED_USER',
  GET_RESTRICTED_USER: 'GET_RESTRICTED_USER',
  JOIN_RESTRICTED_USER_NOT_IN_ROOM: 'JOIN_RESTRICTED_USER_NOT_IN_ROOM',
  CREATE_MEDIA_RESTRICTED_USER: 'CREATE_MEDIA_RESTRICTED_USER',
  DUPLICATE_RESOURCE_CREATION_REQUEST: 'DUPLICATE_RESOURCE_CREATION_REQUEST',
  MEETING_NOT_FOUND: 'MEETING_NOT_FOUND',
  NOT_WEBEX_SITE: 'NOT_WEBEX_SITE',
  INVALID_SCHEDULED_MEETING_ORGANIZER: 'INVALID_SCHEDULED_MEETING_ORGANIZER',
  FREE_USER_MAX_PARTICIPANTS_JOINED_EXCEEDED: 'FREE_USER_MAX_PARTICIPANTS_JOINED_EXCEEDED',
  PAID_USER_MAX_PARTICIPANTS_JOINED_EXCEEDED: 'PAID_USER_MAX_PARTICIPANTS_JOINED_EXCEEDED',
  SERVICE_MAX_PARTICIPANTS_ROSTER_EXCEEDED: 'SERVICE_MAX_PARTICIPANTS_ROSTER_EXCEEDED',
  SERVICE_INITIAL_PARTICIPANTS_ROSTER_EXCEEDED: 'SERVICE_INITIAL_PARTICIPANTS_ROSTER_EXCEEDED',
  RESOURCE_GUEST_FORBIDDEN: 'RESOURCE_GUEST_FORBIDDEN',
  SERVICE_NO_MACHINE_OR_SERVICE_ACCOUNT: 'SERVICE_NO_MACHINE_OR_SERVICE_ACCOUNT',
  MODERATOR_ROLE_REMOVAL_NOT_ALLOWED: 'MODERATOR_ROLE_REMOVAL_NOT_ALLOWED',
  RECORDING_CONTROL_NOT_SUPPORTED: 'RECORDING_CONTROL_NOT_SUPPORTED',
  HOST_PIN_LOCKED: 'HOST_PIN_LOCKED',
  INVALID_HOST_PIN: 'INVALID_HOST_PIN',
  REQUESTING_PARTICIPANT_NOT_MODERATOR: 'REQUESTING_PARTICIPANT_NOT_MODERATOR',

  CONVERSATION_NOT_FOUND: 'CONVERSATION_NOT_FOUND',
  MEETING_LINK_NOT_FOUND: 'MEETING_LINK_NOT_FOUND',
  MEETING_INFO_NOT_FOUND: 'MEETING_INFO_NOT_FOUND',
  SCHEDULED_MEETING_NOT_FOUND: 'SCHEDULED_MEETING_NOT_FOUND',

  RECORDING_NOT_STARTED: 'RECORDING_NOT_STARTED',
  RECORDING_NOT_ENABLED: 'RECORDING_NOT_ENABLED',
  RECORDING_USER_STORAGE_FULL: 'RECORDING_USER_STORAGE_FULL',
  RECORDING_SITE_STORAGE_FULL: 'RECORDING_SITE_STORAGE_FULL',

  NO_SCHEDULED_MEETING: 'NO_SCHEDULED_MEETING',
  MEETING_FULL_UPDATE_NOT_ALLOWED: 'MEETING_FULL_UPDATE_NOT_ALLOWED',
  MODERATOR_ROLE_REMOVAL_NOT_VALID: 'MODERATOR_ROLE_REMOVAL_NOT_VALID',
  MODERATOR_ROLE_ADDITION_NOT_VALID: 'MODERATOR_ROLE_ADDITION_NOT_VALID',
  INVALID_CALL_START_TIME: 'INVALID_CALL_START_TIME',
  MEETING_STARTED_UPDATE_NOT_ALLOWED: 'MEETING_STARTED_UPDATE_NOT_ALLOWED',

  EXCEEDED_MAX_JOINED_PARTICIPANTS: 'EXCEEDED_MAX_JOINED_PARTICIPANTS',
  EXCEEDED_SERVICE_MAX_PARTICIPANTS: 'EXCEEDED_SERVICE_MAX_PARTICIPANTS',
  MEETING_IS_LOCKED: 'MEETING_IS_LOCKED',
  MEETING_IS_TERMINATING: 'MEETING_IS_TERMINATING',
  MEETING_REQUIRE_MODERATOR_PIN_INTENT: 'MEETING_REQUIRE_MODERATOR_PIN_INTENT',
  MEETING_REQUIRE_MODERATOR_PIN: 'MEETING_REQUIRE_MODERATOR_PIN',
  MEETING_REQUIRE_MODERATOR_ROLE: 'MEETING_REQUIRE_MODERATOR_ROLE',
  PMR_ACCOUNT_SUSPENDED: 'PMR_ACCOUNT_SUSPENDED',
  PMR_ACCOUNT_LOCKED: 'PMR_ACCOUNT_LOCKED',
  INVALID_JOIN_TIME: 'INVALID_JOIN_TIME',
  REQUIRES_WEBEX_LOGIN: 'REQUIRES_WEBEX_LOGIN',

  TOO_MANY_REQUESTS: 'TOO_MANY_REQUESTS',

  UNABLE_TO_LOOK_UP_DEVICE_INFORMATION: 'UNABLE_TO_LOOK_UP_DEVICE_INFORMATION',
  UNABLE_TO_LOOK_UP_CONVERSATION: 'UNABLE_TO_LOOK_UP_CONVERSATION',
  UNABLE_TO_LOOK_UP_CI_USER: 'UNABLE_TO_LOOK_UP_CI_USER',
  UNABLE_TO_CREATE_CONFLUENCE: 'UNABLE_TO_CREATE_CONFLUENCE',

  SERVICE_UNAVAILABLE: 'SERVICE_UNAVAILABLE',

  SOCKET_TIMEOUT: 'SOCKET_TIMEOUT',
  NO_HTTP_RESPONSE: 'NO_HTTP_RESPONSE'
};

var MODERATOR_HINTS = exports.MODERATOR_HINTS = {
  RECORDING_CONTROL_START: 'RECORDING_CONTROL_START',
  RECORDING_CONTROL_PAUSE: 'RECORDING_CONTROL_PAUSE',
  RECORDING_CONTROL_STOP: 'RECORDING_CONTROL_STOP',
  RECORDING_CONTROL_RESUME: 'RECORDING_CONTROL_RESUME',
  LOCK_CONTROL_UNLOCK: 'LOCK_CONTROL_UNLOCK',
  LOCK_CONTROL_LOCK: 'LOCK_CONTROL_LOCK'
};

var MEETING_STATE = exports.MEETING_STATE = {
  STATES: {
    IDLE: 'IDLE',
    INCOMING: 'INCOMING',
    DIALING: 'DIALING',
    NOTIFIED: 'NOTIFIED',
    DECLINED: 'DECLINED',
    ON_GOING: 'ON_GOING',
    JOINED: 'JOINED',
    TERMINATING: 'TERMINATING',
    LEFT: 'LEFT',
    ENDED: 'ENDED',
    ERROR: 'ERROR'
  }
};

var MEETING_STATE_MACHINE = exports.MEETING_STATE_MACHINE = {
  TRANSITIONS: {
    FAIL: 'fail',
    RING: 'ring',
    REMOTE: 'remote',
    JOIN: 'join',
    DECLINE: 'decline',
    LEAVE: 'leave',
    RESET: 'reset',
    SAFE: 'SAFE'
  },
  STATES: {
    ERROR: 'ERROR',
    IDLE: 'IDLE',
    ENDED: 'ENDED',
    DECLINED: 'DECLINED',
    RINGING: 'RINGING',
    JOINED: 'JOINED',
    ANSWERED: 'ANSWERED',
    SAFE: 'SAFE'
  }
};

var MEETING_AUDIO_STATE_MACHINE = exports.MEETING_AUDIO_STATE_MACHINE = {
  TRANSITIONS: {
    TOGGLE: 'toggle',
    INIT: 'init'
  },
  STATES: {
    MUTE_SELF: 'SELF_AUDIO_OFF',
    UNMUTE_SELF: 'SELF_AUDIO_ON'
  }
};

var MEETING_VIDEO_STATE_MACHINE = exports.MEETING_VIDEO_STATE_MACHINE = {
  TRANSITIONS: {
    TOGGLE: 'toggle',
    INIT: 'init'
  },
  STATES: {
    MUTE_SELF: 'SELF_VIDEO_OFF',
    UNMUTE_SELF: 'SELF_VIDEO_ON'
  }
};

var PEER_CONNECTION_STATE = exports.PEER_CONNECTION_STATE = {
  CLOSED: 'closed',
  FAILED: 'failed'
};

var RTC_CONFIGURATION_FIREFOX = exports.RTC_CONFIGURATION_FIREFOX = { iceServers: [], bundlePolicy: 'max-compat' };
var RTC_CONFIGURATION = exports.RTC_CONFIGURATION = { iceServers: [] };

var RECONNECTION = exports.RECONNECTION = {
  STATE: {
    IN_PROGRESS: 'IN_PROGRESS',
    COMPLETE: 'COMPLETE',
    FAILURE: 'FAILURE',
    DEFAULT_TRY_COUNT: 0,
    DEFAULT_STATUS: ''
  }
};

var RESOURCE = exports.RESOURCE = {
  CLUSTERS: 'clusters',
  REACHABILITY: 'reachability',
  LOCI: 'loci'
};

var REACHABILITY = exports.REACHABILITY = {
  localStorage: 'reachability.result'
};

var ROAP = exports.ROAP = {
  ROAP_TRANSITIONS: {
    STEP: 'step'
  },
  ROAP_TYPES: {
    OFFER: 'OFFER',
    ANSWER: 'ANSWER',
    OK: 'OK',
    ERROR: 'ERROR',
    SHUTDOWN: 'SHUTDOWN',
    OFFER_REQUEST: 'OFFER_REQUEST'
  },
  ROAP_STATE: {
    INIT: 'INIT',
    WAIT_RX_OFFER: 'WAIT_RX_OFFER',
    WAIT_RX_ANSWER: 'WAIT_RX_ANSWER',
    WAIT_RX_OK: 'WAIT_RX_OK',
    WAIT_TX_OFFER: 'WAIT_TX_OFFER',
    WAIT_TX_ANSWER: 'WAIT_TX_ANSWER',
    WAIT_TX_OK: 'WAIT_TX_OK',
    IDLE_LOCAL_OFFER: 'IDLE_LOCAL_OFFER',
    IDLE_REMOTE_OFFER: 'IDLE_REMOTE_OFFER',
    GLARE: 'GLARE',
    ERROR: 'ERROR'
  },
  ROAP_SIGNAL: {
    RX_OFFER: 'RX_OFFER',
    TX_OFFER: 'TX_OFFER',
    RX_ANSWER: 'RX_ANSWER',
    TX_ANSWER: 'TX_ANSWER',
    RX_OK: 'RX_OK',
    TX_OK: 'TX_OK',
    GLARE_RESOLVED: 'GLARE_RESOLVED'
  },
  RECEIVE_ROAP_MSG: 'RECEIVE_ROAP_MSG',
  SEND_ROAP_MSG: 'SEND_ROAP_MSG',
  SEND_ROAP_MSG_SUCCESS: 'SEND_ROAP_MSG_SUCCESS',
  RESET_ROAP_STATE: 'RESET_ROAP_STATE',
  RECEIVE_CALL_LEAVE: 'RECEIVE_CALL_LEAVE',
  ROAP_MERCURY: 'event:locus.message.roap',
  ROAP_VERSION: '2',
  RX_: 'RX_',
  TX_: 'TX_'
};

var SDP = exports.SDP = {
  A_CONTENT_SLIDES: 'a=content:slides',
  ROLLBACK: 'rollback',
  HAVE_LOCAL_OFFER: 'have-local-offer',
  HAVE_REMOTE_OFFER: 'have-remote-offer',
  STABLE: 'stable',
  OFFER: 'offer',
  M_LINE: 'm=',
  MAX_FS_8160: 'max-fs=8160',
  B_LINE: 'b=TIAS',
  CARRIAGE_RETURN: '\r\n',
  BAD_MEDIA_PORTS: [0]
};

var STATS = exports.STATS = {
  AUDIO_CORRELATE: 'audio',
  VIDEO_CORRELATE: 'video',
  SHARE_CORRELATE: 'share',
  AUDIO_SENDER_ID: 'audioSender',
  AUDIO_RECEIVER_ID: 'audioReceiver',
  VIDEO_SENDER_ID: 'videoSender',
  VIDEO_RECEIVER_ID: 'videoReceiver',
  SHARE_SENDER_ID: 'shareSender',
  SHARE_RECEIVER_ID: 'shareReceiver',
  END: 'end',
  DATA: 'data',
  CLOSED: 'closed',
  SENDER: 'sender',
  RECEIVER: 'receiver',
  SENDERS: 'senders',
  RECEIVERS: 'receivers',
  CONFIG: {
    senders: {
      audio: {
        transceiver: 'audioTransceiver',
        child: 'sender',
        parent: 'mediaProperties',
        peerConnection: 'peerConnection',
        name: 'audioSender'
      },
      video: {
        transceiver: 'videoTransceiver',
        child: 'sender',
        parent: 'mediaProperties',
        peerConnection: 'peerConnection',
        name: 'videoSender'
      },
      share: {
        transceiver: 'shareTransceiver',
        child: 'sender',
        parent: 'mediaProperties',
        peerConnection: 'peerConnection',
        name: 'shareSender'
      }
    },
    receivers: {
      audio: {
        transceiver: 'audioTransceiver',
        child: 'receiver',
        parent: 'mediaProperties',
        peerConnection: 'peerConnection',
        name: 'audioReceiver'
      },
      video: {
        transceiver: 'videoTransceiver',
        child: 'receiver',
        parent: 'mediaProperties',
        peerConnection: 'peerConnection',
        name: 'videoReceiver'
      },
      share: {
        transceiver: 'shareTransceiver',
        child: 'receiver',
        parent: 'mediaProperties',
        peerConnection: 'peerConnection',
        name: 'shareReceiver'
      }
    }
  }
};

var MQA_STATS = exports.MQA_STATS = {
  MQA_SIZE: 120, // MQA is done on 60 second intervals by server def, add a buffer for missed events
  CA_TYPE: 'MQA',
  DATA_PLACEMENTS: [STATS.AUDIO_SENDER_ID, STATS.AUDIO_RECEIVER_ID, STATS.VIDEO_SENDER_ID, STATS.VIDEO_RECEIVER_ID, STATS.SHARE_SENDER_ID, STATS.SHARE_RECEIVER_ID],
  DEFAULT_SHARE_SENDER_STATS: {
    common: {
      common: {
        direction: 'sendrecv', // TODO: parse from SDP and save globally
        isMain: false, // always true for share sender
        mariFecEnabled: false, // unavailable
        mariQosEnabled: false, // unavailable
        multistreamEnabled: false // unavailable
      },
      availableBitrate: -1,
      dtlsBitrate: -1, // unavailable
      dtlsPackets: -1, // unavailable
      fecBitrate: -1, // unavailable
      fecPackets: -1, // unavailable
      maxBitrate: -1, // unavailable
      queueDelay: -1, // unavailable
      remoteJitter: -1, // unavailable
      remoteLossRate: -1,
      remoteReceiveRate: -1, // unavailable
      roundTripTime: -1,
      rtcpBitrate: -1, // unavailable
      rtcpPackets: -1, // unavailable
      rtpBitrate: -1, // unavailable
      rtpPackets: -1,
      stunBitrate: -1, // unavailable
      stunPackets: -1, // unavailable
      transportType: 'UDP' // TODO: parse the transport type from the SDP and save globally
    },
    streams: [{
      common: {
        codec: 'H264', // TODO: parse the codec from the SDP and save globally
        duplicateSsci: -1, // unavailable
        requestedBitrate: -1, // unavailable
        requestedFrames: -1, // unavailable
        rtpPackets: -1,
        ssci: -1, // unavailable
        transmittedBitrate: -1,
        transmittedFrameRate: -1
      },
      h264CodecProfile: 'BP', // TODO: parse the profile level from h264 in the SDP and save globally
      localConfigurationChanges: -1, // unavailable
      remoteConfigurationChanges: -1, // unavailable
      requestedFrameSize: -1, // unavailable
      requestedKeyFrames: -1, // unavailable
      transmittedFrameSize: -1, // unavailable
      transmittedHeight: -1,
      transmittedKeyFrames: -1,
      transmittedWidth: -1
    }]
  },
  intervalMetadata: {
    memoryUsage: {
      cpuBitWidth: 0,
      mainProcessMaximumMemoryBytes: 0,
      osBitWidth: 0,
      processAverageMemoryUsage: 0,
      processMaximumMemoryBytes: 0,
      processMaximumMemoryUsage: 0,
      systemAverageMemoryUsage: 0,
      systemMaximumMemoryUsage: 0
    },
    peerReflexiveIP: 'NULL', // TODO: save after ice trickling completes and use as a global variable
    processAverageCPU: 0,
    processMaximumCPU: 0,
    systemAverageCPU: 0,
    systemMaximumCPU: 0
  }
};
//# sourceMappingURL=constants.js.map
