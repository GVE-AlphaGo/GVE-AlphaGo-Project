'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _weakMap = require('babel-runtime/core-js/weak-map');

var _weakMap2 = _interopRequireDefault(_weakMap);

var _stream = require('stream');

var _events = require('events');

var _commonTimers = require('@webex/common-timers');

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var pcsByRTCRtpDirection = new _weakMap2.default();
var emittersByRTCRtpDirection = new _weakMap2.default();
var RTCRtpDirectionByEmitter = new _weakMap2.default();
var emittersByStream = new _weakMap2.default();
var timersByEmitter = new _weakMap2.default();

/**
 * Helper function that ensures no matter how many stats streams we create, we
 * don't poll the PeerConnection more than once per interval.
 * @param {EventEmitter} emitter
 * @param {Number} interval
 * @private
 * @returns {undefined}
 */
var schedule = function schedule(emitter, interval) {
  var timer = (0, _commonTimers.safeSetTimeout)(function () {
    var direction = RTCRtpDirectionByEmitter.get(emitter);
    var pc = pcsByRTCRtpDirection.get(direction);

    if (direction) {
      direction.getStats().then(function (stats) {
        emitter.emit(_constants.STATS.DATA, stats);
        // TODO: Remove on 1.0 spec adoption
        // "closed" is supposed to be part of the {@link RTCPeerConnectionState}
        // enum according to spec, but at time of writing, was still implemented
        // in the {@link RTCSignalingState} enum.
        if (!(pc.signalingState === _constants.STATS.CLOSED || pc.connectionState === _constants.STATS.CLOSED)) {
          schedule(emitter, interval);
        }
      }).catch(function (err) {
        emitter.emit(_constants.ERROR, err);
      });
    }
  }, interval);

  timersByEmitter.set(emitter, timer);
};

/**
 * Polls an {@link RTCPeerConnection} once per second and emits its {@link RTCStatsReport}
 * {@link RTCStatsReport}
 */

var StatsStream = function (_Readable) {
  (0, _inherits3.default)(StatsStream, _Readable);

  /**
   * @private
   * @param {Object} config
   * @param {RTCRtpSender|RTCRtpReceiver} config.rTCRtpDirection
   * @param {RTCPeerConnection} config.peerConnection
   * @param {Number} config.interval
   */
  function StatsStream() {
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck3.default)(this, StatsStream);

    var _this = (0, _possibleConstructorReturn3.default)(this, (StatsStream.__proto__ || (0, _getPrototypeOf2.default)(StatsStream)).call(this, { objectMode: true }));

    _this.interval = config.interval;

    if (!emittersByRTCRtpDirection.has(config.rTCRtpDirection)) {
      emittersByRTCRtpDirection.set(config.rTCRtpDirection, new _events.EventEmitter());
    }
    var emitter = emittersByRTCRtpDirection.get(config.rTCRtpDirection);

    if (!emittersByStream.has(_this)) {
      emittersByStream.set(_this, emitter);
    }
    if (!RTCRtpDirectionByEmitter.has(emitter)) {
      RTCRtpDirectionByEmitter.set(emitter, config.rTCRtpDirection);
    }

    if (!pcsByRTCRtpDirection.has(config.rTCRtpDirection)) {
      pcsByRTCRtpDirection.set(config.rTCRtpDirection, config.peerConnection);
    }

    emitter.once(_constants.ERROR, function (err) {
      _this.emit(_constants.ERROR, err);
    });
    return _this;
  }

  /**
   * See NodeJS Docs
   * @private
   * @returns {undefined}
   */


  (0, _createClass3.default)(StatsStream, [{
    key: '_read',
    value: function _read() {
      var _this2 = this;

      var emitter = emittersByStream.get(this);

      emitter.once(_constants.STATS.DATA, function (data) {
        if (!_this2.isPaused()) {
          _this2.push(data);
        }
      });

      if (!timersByEmitter.has(emitter)) {
        schedule(emitter, this.interval);
      }
    }
  }]);
  return StatsStream;
}(_stream.Readable);

exports.default = StatsStream;
//# sourceMappingURL=stream.js.map
