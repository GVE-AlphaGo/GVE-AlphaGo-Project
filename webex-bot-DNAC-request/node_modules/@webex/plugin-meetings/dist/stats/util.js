'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _forEach2 = require('lodash/forEach');

var _forEach3 = _interopRequireDefault(_forEach2);

var _constants = require('../constants');

var _parameter = require('../common/errors/parameter');

var _parameter2 = _interopRequireDefault(_parameter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var StatsUtil = {};

StatsUtil.generateSingularOptions = function (senderReceiver, config, meeting, name) {
  var options = {};

  options[name] = {};
  options[name][senderReceiver.correlate] = senderReceiver;
  StatsUtil.generateOptions(options, config, meeting);
};

StatsUtil.generateOptions = function (options, config, meeting) {
  if (!options || !config || !meeting) {
    throw new _parameter2.default('stats/util->validateInitialization#options, config, and meeting must be provided to execute getStats');
  }
  StatsUtil.configOptions(meeting, config, options, _constants.STATS.SENDERS);
  StatsUtil.configOptions(meeting, config, options, _constants.STATS.RECEIVERS);
};

StatsUtil.configOptions = function (meeting, config, options, name) {
  if (options[name]) {
    (0, _forEach3.default)(options[name], function (type) {
      if (!type.correlate) {
        throw new _parameter2.default('stats/util->validateInitialization#each ' + type + ' must be provided with a correlate as audio OR video OR share.');
      }
      if (!config[name][type.correlate]) {
        return;
      }
      var typeConfig = config[name][type.correlate];
      var media = meeting[typeConfig.parent][typeConfig.peerConnection];
      var filter = media[typeConfig.transceiver][typeConfig.child];

      (0, _assign2.default)(type, { media: media, filter: filter, name: typeConfig.name });
    });
  }
};

exports.default = StatsUtil;
//# sourceMappingURL=util.js.map
