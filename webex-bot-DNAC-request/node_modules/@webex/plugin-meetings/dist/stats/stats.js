'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _isFunction2 = require('lodash/isFunction');

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _webexCore = require('@webex/webex-core');

var _uuid = require('uuid');

var _constants = require('../constants');

var _history = require('../stats/history');

var _history2 = _interopRequireDefault(_history);

var _stream = require('../stats/stream');

var _stream2 = _interopRequireDefault(_stream);

var _filter = require('../stats/filter');

var _filter2 = _interopRequireDefault(_filter);

var _events = require('../stats/events');

var _events2 = _interopRequireDefault(_events);

var _stats = require('../common/errors/stats');

var _stats2 = _interopRequireDefault(_stats);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class MeetingStats
 */
var MeetingStats = function (_StatelessWebexPlugin) {
  (0, _inherits3.default)(MeetingStats, _StatelessWebexPlugin);

  /**
   * @param {Object} attrs
   * @param {Object} options
   * @param {Object} [optionalCreateOptions]
   * @param {Boolean} optionalCreateOptions.history
   * @param {Boolean} optionalCreateOptions.mqa
   * @param {RTCRtpSender|RTCRtpReceiver} optionalCreateOptions.stream
   * @param {RTCRtpSender|RTCRtpReceiver} optionalCreateOptions.filter
   * @param {RTCPeerConnection} optionalCreateOptions.media
   * @param {String} optionalCreateOptions.id
   * @param {Function} optionalCreateOptions.onClose
   * @param {Function} optionalCreateOptions.onEvent
   * @param {Function} optionalCreateOptions.onData
   * if using filter or stream, media must also exist
   */
  function MeetingStats(attrs, options, optionalCreateOptions) {
    (0, _classCallCheck3.default)(this, MeetingStats);

    var _this = (0, _possibleConstructorReturn3.default)(this, (MeetingStats.__proto__ || (0, _getPrototypeOf2.default)(MeetingStats)).call(this, {}, options));

    _this.namespace = _constants.MEETINGS;

    _this.attrs = attrs;
    _this.options = options;
    // what this stats object is configured to work with
    /**
     * @instance
     * @type {RTCPeerConnection}
     * @private
     * @memberof MeetingStats
     */
    _this.peerConnection = null;
    /**
     * @instance
     * @type {RTCRtpSender|RTCRtpReceiver}
     * @private
     * @memberof MeetingStats
     */
    _this.RTCRtpDirection = null;
    // usable values
    /**
     * @instance
     * @type {StatsHistory}
     * @readonly
     * @private
     * @memberof MeetingStats
     */
    _this.history = null;
    /**
     * @instance
     * @type {StatsHistory}
     * @readonly
     * @private
     * @memberof MeetingStats
     */
    _this.mqa = null;
    /**
     * @instance
     * @type {ReadableStream}
     * @readonly
     * @private
     * @memberof MeetingStats
     */
    _this.stream = null;
    /**
     * @instance
     * @type {TransformStream}
     * @readonly
     * @private
     * @memberof MeetingStats
     */
    _this.filter = null;
    /**
     * @instance
     * @type {StatsEvents}
     * @readonly
     * @private
     * @memberof MeetingStats
     */
    _this.events = null;
    /**
     * @instance
     * @type {String}
     * @readonly
     * @private
     * @memberof MeetingStats
     */
    _this.id = null;
    _this.populate(optionalCreateOptions);
    return _this;
  }

  /**
   * @param {Object} [optionalCreateOptions]
   * @returns {undefined}
   * @private
   * @memberof MeetingStats
   */


  (0, _createClass3.default)(MeetingStats, [{
    key: 'populate',
    value: function populate(optionalCreateOptions) {
      if (optionalCreateOptions) {
        if (optionalCreateOptions.history) {
          this.withHistory();
        }
        if (optionalCreateOptions.mqa) {
          this.withMQA();
        }
        if (optionalCreateOptions.filter && !optionalCreateOptions.stream && optionalCreateOptions.media) {
          this.withFilter(optionalCreateOptions.filter, optionalCreateOptions.media);
        }
        if (optionalCreateOptions.stream && !optionalCreateOptions.filter && optionalCreateOptions.media) {
          this.withStream(optionalCreateOptions.stream, optionalCreateOptions.media);
        }
        if (optionalCreateOptions.id) {
          this.withId(optionalCreateOptions.id);
        }
        if (optionalCreateOptions.onClose) {
          if (!(0, _isFunction3.default)(optionalCreateOptions.onClose)) {
            throw new TypeError('stats->populate#onClose must be a callback function for filtered data.');
          }
          this.onClose(optionalCreateOptions.onClose);
        }
        if (optionalCreateOptions.onEvent) {
          if (!(0, _isFunction3.default)(optionalCreateOptions.onEvent)) {
            throw new TypeError('stats->populate#onEvent must be a callback function for filtered data.');
          }
          if (this.history) {
            this.withEventsHistory(this.history, optionalCreateOptions.onEvent);
          } else {
            this.withEvents(optionalCreateOptions.onEvent);
          }
        }
        if (optionalCreateOptions.onData) {
          if (!(0, _isFunction3.default)(optionalCreateOptions.onData)) {
            throw new TypeError('stats->populate#onData must be a callback function for filtered data.');
          }
          this.onData(optionalCreateOptions.onData);
        }
      }

      return this;
    }

    /**
     * @param {WebRTCData} data
     * @returns {undefined}
     * @public
     * @memberof MeetingStats
     */

  }, {
    key: 'doHistory',
    value: function doHistory(data) {
      if (this.history) {
        this.history.add(data);
      }
    }

    /**
     * @param {WebRTCData} data
     * @returns {undefined}
     * @public
     * @memberof MeetingStats
     */

  }, {
    key: 'doMQA',
    value: function doMQA(data) {
      if (this.mqa && data.data) {
        if (!data.data.isEmpty()) {
          this.mqa.add(data.data.omit());
        }
      }
    }

    /**
     * @param {WebRTCData} data
     * @returns {undefined}
     * @public
     * @memberof MeetingStats
     */

  }, {
    key: 'doEvents',
    value: function doEvents(data) {
      if (this.events) {
        this.events.event(data);
      }
    }

    /**
     * does all the work for the built properties
     * calls back a function with data from piped stream filter
     * @param {Function} cbFn
     * @returns {undefined}
     * @throws {Error} if the filter stream does not exist
     * @private
     * @memberof MeetingStats
     */

  }, {
    key: 'onData',
    value: function onData(cbFn) {
      var _this2 = this;

      if (!this.filter) {
        throw new TypeError('The stats sender/receiver filter must be set up before data can be processed.');
      }
      this.filter.on(_constants.STATS.DATA, function (filtered) {
        _this2.doHistory(filtered);
        _this2.doMQA(filtered);
        _this2.doEvents(filtered);
        cbFn(filtered);
      });

      return this;
    }

    /**
     * triggered if the data stream closes
     * calls back a function with error
     * @param {Function} cbFn
     * @returns {undefined}
     * @private
     * @memberof MeetingStats
     */

  }, {
    key: 'onClose',
    value: function onClose(cbFn) {
      var _this3 = this;

      if (!this.filter) {
        throw new TypeError('the stats sender/receiver filter must be set up before data can be closed.');
      }
      this.stream.on(_constants.STATS.END, function (err) {
        if (!err) {
          err = new _stats2.default('The stats stream for id: ' + _this3.id + ' ended.');
        }
        cbFn(err);
      });

      return this;
    }

    /**
     * constructs an event object on this instance
     * @param {StatsHistory} history
     * @param {Function} cb
     * @returns {MeetingStats}
     * @public
     * @memberof MeetingStats
     */

  }, {
    key: 'withEventsHistory',
    value: function withEventsHistory(history, cb) {
      var events = new _events2.default(history, cb);

      this.setEvents(events);

      return this;
    }

    /**
     * constructs an event object on this instance
     * @param {Function} cb
     * @returns {MeetingStats}
     * @public
     * @memberof MeetingStats
     */

  }, {
    key: 'withEvents',
    value: function withEvents(cb) {
      var events = new _events2.default(null, cb);

      this.setEvents(events);

      return this;
    }

    /**
     * constructs a history object on this instance
     * @returns {MeetingStats}
     * @public
     * @memberof MeetingStats
     */

  }, {
    key: 'withHistory',
    value: function withHistory() {
      var history = new _history2.default(this.config.stats.historyMax);

      this.setHistory(history);

      return this;
    }

    /**
     * constructs a history object on this instance
     * @returns {MeetingStats}
     * @public
     * @memberof MeetingStats
     */

  }, {
    key: 'withMQA',
    value: function withMQA() {
      var mqa = new _history2.default(_constants.MQA_STATS.MQA_SIZE);

      this.setMQA(mqa);

      return this;
    }

    /**
     * constructs a readable stream object on this instance
     * @param {RTCRtpReceiver|RTCRtpSender} transceiverDirection
     * @param {RTCPeerConnection} peerConnection
     * @returns {MeetingStats}
     * @public
     * @memberof MeetingStats
     */

  }, {
    key: 'withStream',
    value: function withStream(transceiverDirection, peerConnection) {
      var stream = new _stream2.default({
        rTCRtpDirection: transceiverDirection,
        peerConnection: peerConnection,
        interval: this.config.stats.interval
      });

      this.setStream(stream);

      return this;
    }

    /**
     * @param {RTCRtpReceiver|RTCRtpSender} transceiverDirection
     * @param {RTCPeerConnection} peerConnection
     * @returns {MeetingStats}
     * @public
     * @memberof MeetingStats
     */

  }, {
    key: 'withFilter',
    value: function withFilter(transceiverDirection, peerConnection) {
      this.withStream(transceiverDirection, peerConnection);
      this.setFilter(new _filter2.default());
      this.getStream().pipe(this.getFilter());

      return this;
    }

    /**
     * constructs an id to match this stats object
     * takes params as precedence
     * @param {String} id
     * @returns {MeetingStats}
     * @public
     * @memberof MeetingStats
     */

  }, {
    key: 'withId',
    value: function withId(id) {
      if (id) {
        this.setId(id);
      } else {
        this.setId(_uuid.uuid.v4());
      }

      return this;
    }

    /**
     * @returns {MeetingStats}
     * @public
     * @memberof MeetingStats
     */

  }, {
    key: 'build',
    value: function build() {
      return this;
    }

    /**
     * @param {String} id
     * @returns {undefined}
     * @public
     * @memberof MeetingStats
     */

  }, {
    key: 'setId',
    value: function setId(id) {
      this.id = id;
    }

    /**
     * @param {StatsHistory} history
     * @returns {undefined}
     * @public
     * @memberof MeetingStats
     */

  }, {
    key: 'setHistory',
    value: function setHistory(history) {
      this.history = history;
    }

    /**
     * @param {StatsHistory} mqa
     * @returns {undefined}
     * @public
     * @memberof MeetingStats
     */

  }, {
    key: 'setMQA',
    value: function setMQA(mqa) {
      this.mqa = mqa;
    }

    /**
     * @param {StatsEvent} events
     * @returns {undefined}
     * @public
     * @memberof MeetingStats
     */

  }, {
    key: 'setEvents',
    value: function setEvents(events) {
      this.events = events;
    }

    /**
     * @param {Readable} stream
     * @returns {undefined}
     * @public
     * @memberof MeetingStats
     */

  }, {
    key: 'setStream',
    value: function setStream(stream) {
      this.stream = stream;
    }

    /**
     * @param {Transform} filter
     * @returns {undefined}
     * @public
     * @memberof MeetingStats
     */

  }, {
    key: 'setFilter',
    value: function setFilter(filter) {
      this.filter = filter;
    }

    /**
     * @returns {String}
     * @public
     * @memberof MeetingStats
     */

  }, {
    key: 'getId',
    value: function getId() {
      return this.id;
    }

    /**
     * @returns {StatsHistory}
     * @public
     * @memberof MeetingStats
     */

  }, {
    key: 'getHistory',
    value: function getHistory() {
      return this.history;
    }

    /**
     * @returns {StatsHistory}
     * @public
     * @memberof MeetingStats
     */

  }, {
    key: 'getMQA',
    value: function getMQA() {
      return this.mqa;
    }

    /**
     * @returns {StatsEvents}
     * @public
     * @memberof MeetingStats
     */

  }, {
    key: 'getEvents',
    value: function getEvents() {
      return this.events;
    }

    /**
     * @returns {Readable}
     * @public
     * @memberof MeetingStats
     */

  }, {
    key: 'getStream',
    value: function getStream() {
      return this.stream;
    }

    /**
     * @returns {Transform}
     * @public
     * @memberof MeetingStats
     */

  }, {
    key: 'getFilter',
    value: function getFilter() {
      return this.filter;
    }
  }]);
  return MeetingStats;
}(_webexCore.StatelessWebexPlugin);

exports.default = MeetingStats;
//# sourceMappingURL=stats.js.map
