{"version":3,"sources":["filter.js"],"names":["StatsFilter","objectMode","report","encoding","callback","data","StatsTransformer","transform","push","WebRTCData","Transform"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;;;AACA;;;;;;AAEA;;;IAGqBA,W;;;AACnB;;;;AAIA,yBAAc;AAAA;AAAA,2IACN,EAACC,YAAY,IAAb,EADM;AAEb;;AAED;;;;;;;;;;;;+BAQWC,M,EAAQC,Q,EAAUC,Q,EAAU;AACrC,UAAI,CAACF,MAAL,EAAa;AACXE;;AAEA;AACD;AACD,UAAMC,OAAOC,sBAAiBC,SAAjB,CAA2BL,MAA3B,CAAb;AACA,UAAMM,OAAO,IAAIC,cAAJ,CAAeJ,IAAf,CAAb;;AAEA,WAAKG,IAAL,CAAU;AACRH,cAAMG;AADE,OAAV;AAGAJ;AACD;;;EA9BsCM,iB;;kBAApBV,W","file":"filter.js","sourcesContent":["import {Transform} from 'stream';\n\nimport StatsTransformer from '../stats/transformer';\nimport WebRTCData from '../stats/data';\n\n/**\n * Reforms the interesting data from an RTCStatsReport to a new format\n */\nexport default class StatsFilter extends Transform {\n  /**\n   * Tells the Stream we're operating in objectMode\n   * @private\n   */\n  constructor() {\n    super({objectMode: true});\n  }\n\n  /**\n   * Filters out data on the RTCStatsReport to the data around call quality and pushes it as a WebRTCData object\n   * @param {RTCStatsReport} report\n   * @param {*} encoding\n   * @param {Function} callback\n   * @private\n   * @returns {undefined}\n   */\n  _transform(report, encoding, callback) {\n    if (!report) {\n      callback();\n\n      return;\n    }\n    const data = StatsTransformer.transform(report);\n    const push = new WebRTCData(data);\n\n    this.push({\n      data: push\n    });\n    callback();\n  }\n}\n"]}