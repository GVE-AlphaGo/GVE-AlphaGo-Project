{"version":3,"sources":["transformer.js"],"names":["StatsTransformer","isFF","bowser","name","toLowerCase","simplify","stat","DEFAULT_FF_TRANSFORM_REGEX","DEFAULT_TRANSFORM_REGEX","key","value","regex","test","type","kind","id","decider","selector","profiler","mapStatToReadableType","includes","parse","report","target","forEach","size","DEFAULT_GET_STATS_FILTER","types","convert","parsed","options","simplifyFn","transform","undefined","data"],"mappings":"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","file":"transformer.js","sourcesContent":["import {keys, find, forEach} from 'lodash';\nimport bowser from 'bowser';\n\nimport {DEFAULT_TRANSFORM_REGEX, DEFAULT_FF_TRANSFORM_REGEX, DEFAULT_GET_STATS_FILTER} from '../constants';\n\nconst StatsTransformer = {\n  isFF: bowser.name.toLowerCase() === 'firefox'\n};\n\n// convert the ids from the parsed stats objects into understandable keys\nStatsTransformer.simplify = (stat) => find(keys(StatsTransformer.isFF ? DEFAULT_FF_TRANSFORM_REGEX : DEFAULT_TRANSFORM_REGEX), (key) => {\n  let value;\n\n  if (StatsTransformer.isFF) {\n    // FF stats are formatted poorly so we have to take what we can get\n    value = (DEFAULT_FF_TRANSFORM_REGEX[key].regex.test(`${stat.type}${stat.kind ? `_${stat.kind}` : ''}_${stat.id}`) ? key : false);\n  }\n  else {\n    // no other parameters necessary besides id\n    value = (DEFAULT_TRANSFORM_REGEX[key].regex.test(stat.id) ? key : false);\n  }\n\n  if (value) {\n    // others were included but have a value that exclude them from the list because of duplicates that weren't chosen\n    if (DEFAULT_TRANSFORM_REGEX[value].decider) {\n      if (stat[DEFAULT_TRANSFORM_REGEX[value].decider] !== DEFAULT_TRANSFORM_REGEX[value].selector) {\n        value = false;\n      }\n\n      return value;\n    }\n    // // some types need to check against a type field as well\n    if (DEFAULT_TRANSFORM_REGEX[value].profiler) {\n      const mapStatToReadableType = stat[DEFAULT_TRANSFORM_REGEX[value].profiler.type];\n\n      if (!((mapStatToReadableType && mapStatToReadableType.includes(DEFAULT_TRANSFORM_REGEX[value].profiler.value)) &&\n      (value.toLowerCase().includes(DEFAULT_TRANSFORM_REGEX[value].profiler.value)))) {\n        value = false;\n\n        return value;\n      }\n    }\n  }\n\n  return value;\n});\n\n// parse the RTCStatsReport, extracting only the data we care about\nStatsTransformer.parse = (report) => {\n  const target = {};\n\n  // from the stats object\n  // get the rtc stats report\n  if (report && report.forEach && report.size > 0) {\n    report.forEach((stat) => {\n      // each report has internal data\n      if (stat && stat.type) {\n        // pull only certain types\n        if (DEFAULT_GET_STATS_FILTER.types.includes(stat.type)) {\n          // insert into the target the statistic mapped to it's statical id\n          target[stat.id] = stat;\n        }\n      }\n    });\n  }\n\n  return target;\n};\n\nStatsTransformer.convert = (parsed, options) => {\n  // supply your own simplification function (rather than id as the key)\n  if (options.simplifyFn) {\n    return options.simplifyFn(parsed);\n  }\n  // else use ours that stores things like rtcOutAudio, rtpInVideo, etc\n  const target = {};\n\n  forEach(parsed, (stat) => {\n    const key = StatsTransformer.simplify(stat);\n\n    if (key) {\n      target[key] = stat;\n    }\n  });\n\n  return target;\n};\n\n// transform the RTCStatsReport into a much more readable, processable format\nStatsTransformer.transform = (report, options = {simplifyFn: undefined}) => {\n  let data;\n  // first parse it and cut out not necessary data\n  const parsed = StatsTransformer.parse(report);\n\n  // either convert the data or store each stat with it's id mapped as the key to the stat object itself\n  if (DEFAULT_TRANSFORM_REGEX) {\n    data = StatsTransformer.convert(parsed, options);\n  }\n  else {\n    data = parsed;\n  }\n\n  return data;\n};\nexport default StatsTransformer;\n"]}