'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _stream = require('stream');

var _transformer = require('../stats/transformer');

var _transformer2 = _interopRequireDefault(_transformer);

var _data = require('../stats/data');

var _data2 = _interopRequireDefault(_data);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Reforms the interesting data from an RTCStatsReport to a new format
 */
var StatsFilter = function (_Transform) {
  (0, _inherits3.default)(StatsFilter, _Transform);

  /**
   * Tells the Stream we're operating in objectMode
   * @private
   */
  function StatsFilter() {
    (0, _classCallCheck3.default)(this, StatsFilter);
    return (0, _possibleConstructorReturn3.default)(this, (StatsFilter.__proto__ || (0, _getPrototypeOf2.default)(StatsFilter)).call(this, { objectMode: true }));
  }

  /**
   * Filters out data on the RTCStatsReport to the data around call quality and pushes it as a WebRTCData object
   * @param {RTCStatsReport} report
   * @param {*} encoding
   * @param {Function} callback
   * @private
   * @returns {undefined}
   */


  (0, _createClass3.default)(StatsFilter, [{
    key: '_transform',
    value: function _transform(report, encoding, callback) {
      if (!report) {
        callback();

        return;
      }
      var data = _transformer2.default.transform(report);
      var push = new _data2.default(data);

      this.push({
        data: push
      });
      callback();
    }
  }]);
  return StatsFilter;
}(_stream.Transform);

exports.default = StatsFilter;
//# sourceMappingURL=filter.js.map
