'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _omit2 = require('lodash/omit');

var _omit3 = _interopRequireDefault(_omit2);

var _isEmpty2 = require('lodash/isEmpty');

var _isEmpty3 = _interopRequireDefault(_isEmpty2);

var _uuid = require('uuid');

var _uuid2 = _interopRequireDefault(_uuid);

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// TODO: Break this up a bit more, so that consumers aren't calling data.data.getData()
/**
 * @class WebRTCData
 */
var WebRTCData = function () {
  /**
   * @param {Object} data
   */
  function WebRTCData(data) {
    (0, _classCallCheck3.default)(this, WebRTCData);

    this.data = data;
    this.id = _uuid2.default.v4();
  }

  /**
   * get omitted rtc/rtcp/rtp/track/transport/candidate data with omitted data (default)
   * @returns {Object}
   */


  (0, _createClass3.default)(WebRTCData, [{
    key: 'omit',
    value: function omit() {
      var _this = this;

      var flat = {};

      (0, _keys2.default)(this.data).forEach(function (key) {
        flat[key] = (0, _omit3.default)(_this.data[key], _constants.DEFAULT_OMISSION_DATA_KEYS);
      });

      return flat;
    }

    /**
     * returns if the data is empty
     * @returns {Boolean};
     */

  }, {
    key: 'isEmpty',
    value: function isEmpty() {
      return (0, _isEmpty3.default)(this.data);
    }

    /**
     * get the unique id for this specific stat pull
     * @returns {String};
     */

  }, {
    key: 'getId',
    value: function getId() {
      return this.id;
    }

    /**
     * get the transformed data
     * @returns {Object}
     */

  }, {
    key: 'getData',
    value: function getData() {
      return this.data;
    }
  }]);
  return WebRTCData;
}();

exports.default = WebRTCData;
//# sourceMappingURL=data.js.map
