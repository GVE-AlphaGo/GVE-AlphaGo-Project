{"version":3,"sources":["util.js"],"names":["StatsUtil","generateSingularOptions","senderReceiver","config","meeting","name","options","correlate","generateOptions","ParameterError","configOptions","STATS","SENDERS","RECEIVERS","type","typeConfig","media","parent","peerConnection","filter","transceiver","child"],"mappings":";;;;;;;;;;;;;;AAEA;;AAGA;;;;;;AAEA,IAAMA,YAAY,EAAlB;;AAEAA,UAAUC,uBAAV,GAAoC,UAACC,cAAD,EAAiBC,MAAjB,EAAyBC,OAAzB,EAAkCC,IAAlC,EAA2C;AAC7E,MAAMC,UAAU,EAAhB;;AAEAA,UAAQD,IAAR,IAAgB,EAAhB;AACAC,UAAQD,IAAR,EAAcH,eAAeK,SAA7B,IAA0CL,cAA1C;AACAF,YAAUQ,eAAV,CAA0BF,OAA1B,EAAmCH,MAAnC,EAA2CC,OAA3C;AACD,CAND;;AAQAJ,UAAUQ,eAAV,GAA4B,UAACF,OAAD,EAAUH,MAAV,EAAkBC,OAAlB,EAA8B;AACxD,MAAI,CAACE,OAAD,IAAY,CAACH,MAAb,IAAuB,CAACC,OAA5B,EAAqC;AACnC,UAAM,IAAIK,mBAAJ,CAAmB,sGAAnB,CAAN;AACD;AACDT,YAAUU,aAAV,CAAwBN,OAAxB,EAAiCD,MAAjC,EAAyCG,OAAzC,EAAkDK,iBAAMC,OAAxD;AACAZ,YAAUU,aAAV,CAAwBN,OAAxB,EAAiCD,MAAjC,EAAyCG,OAAzC,EAAkDK,iBAAME,SAAxD;AACD,CAND;;AAQAb,UAAUU,aAAV,GAA0B,UAACN,OAAD,EAAUD,MAAV,EAAkBG,OAAlB,EAA2BD,IAA3B,EAAoC;AAC5D,MAAIC,QAAQD,IAAR,CAAJ,EAAmB;AACjB,2BAAQC,QAAQD,IAAR,CAAR,EAAuB,UAACS,IAAD,EAAU;AAC/B,UAAI,CAACA,KAAKP,SAAV,EAAqB;AACnB,cAAM,IAAIE,mBAAJ,8CAA8DK,IAA9D,oEAAN;AACD;AACD,UAAI,CAACX,OAAOE,IAAP,EAAaS,KAAKP,SAAlB,CAAL,EAAmC;AACjC;AACD;AACD,UAAMQ,aAAaZ,OAAOE,IAAP,EAAaS,KAAKP,SAAlB,CAAnB;AACA,UAAMS,QAAQZ,QAAQW,WAAWE,MAAnB,EAA2BF,WAAWG,cAAtC,CAAd;AACA,UAAMC,SAASH,MAAMD,WAAWK,WAAjB,EAA8BL,WAAWM,KAAzC,CAAf;;AAEA,4BAAcP,IAAd,EAAoB,EAACE,YAAD,EAAQG,cAAR,EAAgBd,MAAMU,WAAWV,IAAjC,EAApB;AACD,KAZD;AAaD;AACF,CAhBD;;kBAkBeL,S","file":"util.js","sourcesContent":["import {forEach} from 'lodash';\n\nimport {\n  STATS\n} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\nconst StatsUtil = {};\n\nStatsUtil.generateSingularOptions = (senderReceiver, config, meeting, name) => {\n  const options = {};\n\n  options[name] = {};\n  options[name][senderReceiver.correlate] = senderReceiver;\n  StatsUtil.generateOptions(options, config, meeting);\n};\n\nStatsUtil.generateOptions = (options, config, meeting) => {\n  if (!options || !config || !meeting) {\n    throw new ParameterError('stats/util->validateInitialization#options, config, and meeting must be provided to execute getStats');\n  }\n  StatsUtil.configOptions(meeting, config, options, STATS.SENDERS);\n  StatsUtil.configOptions(meeting, config, options, STATS.RECEIVERS);\n};\n\nStatsUtil.configOptions = (meeting, config, options, name) => {\n  if (options[name]) {\n    forEach(options[name], (type) => {\n      if (!type.correlate) {\n        throw new ParameterError(`stats/util->validateInitialization#each ${type} must be provided with a correlate as audio OR video OR share.`);\n      }\n      if (!config[name][type.correlate]) {\n        return;\n      }\n      const typeConfig = config[name][type.correlate];\n      const media = meeting[typeConfig.parent][typeConfig.peerConnection];\n      const filter = media[typeConfig.transceiver][typeConfig.child];\n\n      Object.assign(type, {media, filter, name: typeConfig.name});\n    });\n  }\n};\n\nexport default StatsUtil;\n"]}