{"version":3,"sources":["index.js"],"names":["WebRTCStats","attrs","options","optionalCreateOptions","namespace","MEETINGS","senders","receivers","meetingRef","statsConfig","populate","config","setConfig","meeting","associateMeeting","addSenders","addReceivers","useConfig","forEach","TypeError","sender","addSender","StatsUtil","generateSingularOptions","STATS","SENDERS","type","SENDER","id","MeetingStats","newSender","newReceiver","receiver","addReceiver","RECEIVERS","RECEIVER","v","k","destroySender","destroyReceiver","getSender","stream","destroy","getReceiver","StatelessWebexPlugin"],"mappings":"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","file":"index.js","sourcesContent":["import {forEach} from 'lodash';\nimport {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport {\n  MEETINGS,\n  STATS\n} from '../constants';\nimport MeetingStats from '../stats/stats';\nimport StatsUtil from '../stats/util';\n\n/**\n * @class WebRTCStats\n */\nexport default class WebRTCStats extends StatelessWebexPlugin {\n    namespace = MEETINGS;\n\n    /**\n    *\n    * @param {Object} attrs\n    * @param {Object} options\n    * @param {Object} [optionalCreateOptions]\n   */\n    constructor(attrs, options, optionalCreateOptions) {\n      super({}, options);\n      /**\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof WebRTCStats\n     */\n      this.attrs = attrs;\n      /**\n     * @instance\n     * @type {Object}\n     * @private\n     * @memberof WebRTCStats\n     */\n      this.options = options;\n      /**\n     * @instance\n     * @type {Object}\n     * @public\n     * @memberof WebRTCStats\n     */\n      this.senders = {};\n      /**\n     * @instance\n     * @type {Object}\n     * @public\n     * @memberof WebRTCStats\n     */\n      this.receivers = {};\n      /**\n     * @instance\n     * @type {Meeting}\n     * @private\n     * @memberof WebRTCStats\n     */\n      this.meetingRef = null;\n      /**\n     * @instance\n     * @type {Object}\n     * @public\n     * @memberof WebRTCStats\n     */\n      this.statsConfig = null;\n      this.populate(optionalCreateOptions);\n    }\n\n    /**\n     * @param {Object} [optionalCreateOptions]\n     * @param {Object} optionalCreateOptions.config\n     * @param {Meeting} optionalCreateOptions.meeting\n     * @param {Object} optionalCreateOptions.senders\n     * @param {Object} optionalCreateOptions.receivers\n     * @returns {WebRTCStats}\n     * @private\n     * @memberof WebRTCStats\n     */\n    populate(optionalCreateOptions) {\n      if (optionalCreateOptions) {\n        if (optionalCreateOptions.config) {\n          this.setConfig(optionalCreateOptions.config);\n        }\n        if (optionalCreateOptions.meeting) {\n          this.associateMeeting(optionalCreateOptions.meeting);\n        }\n        if (optionalCreateOptions.senders) {\n          this.addSenders(optionalCreateOptions.senders);\n        }\n        if (optionalCreateOptions.receivers) {\n          this.addReceivers(optionalCreateOptions.receivers);\n        }\n      }\n\n      return this;\n    }\n\n    /**\n     * @param {Object} config\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof WebRTCStats\n     */\n    setConfig(config) {\n      this.statsConfig = config;\n    }\n\n    /**\n     * @param {Meeting} meeting\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof WebRTCStats\n     */\n    associateMeeting(meeting) {\n      this.meetingRef = meeting;\n\n      return this;\n    }\n\n    /**\n     * @param {Object} senders\n     * @param {Boolean} useConfig\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof WebRTCStats\n     */\n    addSenders(senders, useConfig = false) {\n      if (!senders.forEach) {\n        throw new TypeError('Stats senders must be created with an iterable array of senders to act on.');\n      }\n      senders.forEach((sender) => {\n        this.addSender(sender, useConfig);\n      });\n\n      return this;\n    }\n\n    /**\n     * @param {Object} sender\n     * @param {Boolean} useConfig\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof WebRTCStats\n     */\n    addSender(sender, useConfig = false) {\n      if (sender) {\n        if (useConfig) {\n          StatsUtil.generateSingularOptions(sender, this.statsConfig, this.meetingRef, STATS.SENDERS);\n        }\n        sender.type = STATS.SENDER;\n        this.senders[sender.id] = new MeetingStats(this.attrs, this.options, sender);\n      }\n\n      return this;\n    }\n\n    /**\n     *\n     * @param {String} id\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof WebRTCStats\n     */\n    addSenderStats(id) {\n      const newSender = new MeetingStats(this.attrs, this.options);\n\n      this.senders[id] = newSender;\n\n      return newSender;\n    }\n\n    /**\n     *\n     * @param {String} id\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof WebRTCStats\n     */\n    addReceiverStats(id) {\n      const newReceiver = new MeetingStats(this.attrs, this.options);\n\n      this.receivers[id] = newReceiver;\n\n      return newReceiver;\n    }\n\n    /**\n     * @param {Object} receivers\n     * @param {boolean} useConfig\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof WebRTCStats\n     */\n    addReceivers(receivers, useConfig = false) {\n      if (!receivers.forEach) {\n        throw new TypeError('Stats receivers must be created with an iterable array of receivers to act on.');\n      }\n      receivers.forEach((receiver) => {\n        this.addReceiver(receiver, useConfig);\n      });\n\n      return this;\n    }\n\n    /**\n     * @param {Object} receiver\n     * @param {boolean} useConfig\n     * @returns {WebRTCStats}\n     * @public\n     * @memberof WebRTCStats\n     */\n    addReceiver(receiver, useConfig = false) {\n      if (receiver) {\n        if (useConfig) {\n          StatsUtil.generateSingularOptions(receiver, this.statsConfig, this.meetingRef, STATS.RECEIVERS);\n        }\n        receiver.type = STATS.RECEIVER;\n        this.receivers[receiver.id] = new MeetingStats(this.attrs, this.options, receiver);\n      }\n\n      return this;\n    }\n\n    /**\n     * @returns {Object}\n     * @public\n     * @memberof WebRTCStats\n     */\n    getReceivers() {\n      return this.receivers;\n    }\n\n    /**\n     * @returns {Object}\n     * @public\n     * @memberof WebRTCStats\n     */\n    getSenders() {\n      return this.senders;\n    }\n\n    /**\n     * @param {String} id\n     * @returns {Object}\n     * @public\n     * @memberof WebRTCStats\n     */\n    getSender(id) {\n      return this.senders[id];\n    }\n\n    /**\n     * @param {String} id\n     * @returns {Object}\n     * @public\n     * @memberof WebRTCStats\n     */\n    getReceiver(id) {\n      return this.receivers[id];\n    }\n\n    /**\n     * @returns {Object}\n     * @public\n     * @memberof WebRTCStats\n     */\n    destroySenders() {\n      forEach(this.senders, (v, k) => {\n        this.destroySender(k);\n      });\n    }\n\n    /**\n     * @returns {undefined}\n     * @public\n     * @memberof WebRTCStats\n     */\n    destroyReceivers() {\n      forEach(this.receivers, (v, k) => {\n        this.destroyReceiver(k);\n      });\n    }\n\n    /**\n     * @param {String} id\n     * @returns {undefined}\n     * @public\n     * @memberof WebRTCStats\n     */\n    destroySender(id) {\n      let sender = this.getSender(id);\n\n      if (sender) {\n        if (sender.stream) {\n          sender.stream.destroy();\n        }\n      }\n      sender = null;\n      delete this.receivers[id];\n    }\n\n    /**\n     * @param {String} id\n     * @returns {undefined}\n     * @public\n     * @memberof WebRTCStats\n     */\n    destroyReceiver(id) {\n      let receiver = this.getReceiver(id);\n\n      if (receiver) {\n        if (receiver.stream) {\n          receiver.stream.destroy();\n        }\n      }\n      receiver = null;\n      delete this.receivers[id];\n    }\n}\n"]}