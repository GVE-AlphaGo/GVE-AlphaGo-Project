{"version":3,"sources":["metrics.js"],"names":["MediaMetrics","options","namespace","MEETINGS","config","stats","mqa","metrics","autoSendMQA","useConfig","senders","id","STATS","AUDIO_SENDER_ID","correlate","AUDIO_CORRELATE","onData","VIDEO_SENDER_ID","VIDEO_CORRELATE","SHARE_SENDER_ID","SHARE_CORRELATE","receivers","AUDIO_RECEIVER_ID","VIDEO_RECEIVER_ID","SHARE_RECEIVER_ID"],"mappings":";;;;;;;;;;;;;;;AAAA;;;;AAKA;;;;;;;;;AASA;;;;IAIqBA,Y;;AAGnB;;;;;;AAMA,0BAA0B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAAA;AAAA,SAR1BC,SAQ0B,GARdC,mBAQc;;AACxB,SAAKC,MAAL,GAAcH,QAAQG,MAAtB;AACA,SAAKC,KAAL,GAAa,IAAb;AACD;;AAED;;;;;;;;;6BAKSA,K,EAAO;AACd,WAAKA,KAAL,GAAaA,KAAb;AACD;;AAED;;;;;;;;;iCAMa;AACX,UAAMC,MAAM,KAAKF,MAAL,CAAYG,OAAZ,CAAoBC,WAAhC;;AAEA,aAAO;AACLC,mBAAW,IADN;AAELC,iBAAS,CACP;AACEC,cAAIC,iBAAMC,eADZ;AAEEC,qBAAWF,iBAAMG,eAFnB;AAGET,kBAHF;AAIEU,kBAAQ,kBAAM,CAAE;AAJlB,SADO,EAOP;AACEL,cAAIC,iBAAMK,eADZ;AAEEH,qBAAWF,iBAAMM,eAFnB;AAGEZ,kBAHF;AAIEU,kBAAQ,kBAAM,CAAE;AAJlB,SAPO,EAaP;AACEL,cAAIC,iBAAMO,eADZ;AAEEL,qBAAWF,iBAAMQ,eAFnB;AAGEd,kBAHF;AAIEU,kBAAQ,kBAAM,CAAE;AAJlB,SAbO,CAFJ;AAsBLK,mBAAW,CACT;AACEV,cAAIC,iBAAMU,iBADZ;AAEER,qBAAWF,iBAAMG,eAFnB;AAGET,kBAHF;AAIEU,kBAAQ,kBAAM,CAAE;AAJlB,SADS,EAOT;AACEL,cAAIC,iBAAMW,iBADZ;AAEET,qBAAWF,iBAAMM,eAFnB;AAGEZ,kBAHF;AAIEU,kBAAQ,kBAAM,CAAE;AAJlB,SAPS,EAaT;AACEL,cAAIC,iBAAMY,iBADZ;AAEEV,qBAAWF,iBAAMQ,eAFnB;AAGEd,kBAHF;AAIEU,kBAAQ,kBAAM,CAAE;AAJlB,SAbS;AAtBN,OAAP;AA2CD;;;;;kBA3EkBhB,Y","file":"metrics.js","sourcesContent":["import {\n  MEETINGS,\n  STATS\n} from '../constants';\n\n/**\n  * Metrics Payload Event\n  * Emitted when a Metric Payload is available\n  * @event metrics:payload\n  * @instance\n  * @type {Object}\n  * @memberof MediaMetrics\n  */\n\n/**\n * @class MediaMetrics\n * @private\n */\nexport default class MediaMetrics {\n  namespace = MEETINGS;\n\n  /**\n   * @param {Object} options\n   * @param {Object} options.config\n   * @memberof MediaMetrics\n   * @constructor\n   */\n  constructor(options = {}) {\n    this.config = options.config;\n    this.stats = null;\n  }\n\n  /**\n   * @param {MeetingStats} stats\n   * @returns {undefined}\n   * @memberof MediaMetrics\n   */\n  setStats(stats) {\n    this.stats = stats;\n  }\n\n  /**\n   * sets up all the default senders and receivers getStats to collect data\n   * @returns {Object}\n   * @public\n   * @memberof MediaMetrics\n   */\n  initialize() {\n    const mqa = this.config.metrics.autoSendMQA;\n\n    return {\n      useConfig: true,\n      senders: [\n        {\n          id: STATS.AUDIO_SENDER_ID,\n          correlate: STATS.AUDIO_CORRELATE,\n          mqa,\n          onData: () => {}\n        },\n        {\n          id: STATS.VIDEO_SENDER_ID,\n          correlate: STATS.VIDEO_CORRELATE,\n          mqa,\n          onData: () => {}\n        },\n        {\n          id: STATS.SHARE_SENDER_ID,\n          correlate: STATS.SHARE_CORRELATE,\n          mqa,\n          onData: () => {}\n        }\n      ],\n      receivers: [\n        {\n          id: STATS.AUDIO_RECEIVER_ID,\n          correlate: STATS.AUDIO_CORRELATE,\n          mqa,\n          onData: () => {}\n        },\n        {\n          id: STATS.VIDEO_RECEIVER_ID,\n          correlate: STATS.VIDEO_CORRELATE,\n          mqa,\n          onData: () => {}\n        },\n        {\n          id: STATS.SHARE_RECEIVER_ID,\n          correlate: STATS.SHARE_CORRELATE,\n          mqa,\n          onData: () => {}\n        }\n      ]\n    };\n  }\n}\n"]}