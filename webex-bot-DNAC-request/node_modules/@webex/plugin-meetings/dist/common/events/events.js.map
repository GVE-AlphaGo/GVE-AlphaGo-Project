{"version":3,"sources":["events.js"],"names":["Events","scope","eventName","args","LoggerProxy","logger","debug","EventsUtil","getScopeLog","LoggerConfig","verboseEvents","getEventLog","EventEmitter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;;;AACA;;;;AAEA;;;;;;AAEA;;;;;IAKMA,M;;;;;;;;;;yBACCC,K,EAAOC,S,EAAWC,I,EAAM;AAC3BC,4BAAYC,MAAZ,CAAmBC,KAAnB,CAA4BC,eAAWC,WAAX,CAAuBP,KAAvB,CAA5B,cAAkEC,SAAlE,IAA8EO,uBAAaC,aAAb,YAAoCH,eAAWI,WAAX,CAAuBR,IAAvB,CAApC,GAAqE,EAAnJ;;AAEA,wIAAkBD,SAAlB,EAA6BC,IAA7B;AACD;;;EALkBS,gB;;kBAQN,IAAIZ,MAAJ,E","file":"events.js","sourcesContent":["import EventEmitter from 'events';\n\nimport LoggerProxy from '../logs/logger-proxy';\nimport LoggerConfig from '../logs/logger-config';\n\nimport EventsUtil from './util';\n\n/**\n * Events\n * plugin-meetings global\n * Used to emit events internally between modules\n */\nclass Events extends EventEmitter {\n  emit(scope, eventName, args) {\n    LoggerProxy.logger.debug(`${EventsUtil.getScopeLog(scope)}event#${eventName}${LoggerConfig.verboseEvents ? ` -- ${EventsUtil.getEventLog(args)}` : ''}`);\n\n    return super.emit(eventName, args);\n  }\n}\n\nexport default new Events();\n"]}