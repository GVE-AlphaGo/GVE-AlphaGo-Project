'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

var _constants = require('../constants');

var _parameter = require('../common/errors/parameter');

var _parameter2 = _interopRequireDefault(_parameter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class Collection
 */
var Collection = function () {

  /**
   * @param {String} property
   * @memberof Collection
   */
  function Collection(property) {
    (0, _classCallCheck3.default)(this, Collection);
    this.namespace = _constants.MEETINGS;

    if (!property || !(0, _isString3.default)(property)) {
      throw new _parameter2.default('Collection expects a string to use as a property name.');
    }
    /**
     * The property name for what collection will be stored, i.e., this.meetingInfos, this.meetings, etc.
     * @instance
     * @type {String}
     * @public
     * @memberof Meetings
     */
    this.propertyName = property;
    /**
     * The actual object for the collection
     * @instance
     * @type {Object}
     * @public
     * @memberof Meetings
     */
    this[this.propertyName] = {};
  }

  /**
   * @param {String} id ID of the thing stuffed into the collection at id location
   * @returns {Any} returns whatever is being stuffed into the collection
   * @public
   * @memberof Collection
   */


  (0, _createClass3.default)(Collection, [{
    key: 'get',
    value: function get(id) {
      return this[this.propertyName] && this[this.propertyName][id] ? this[this.propertyName][id] : null;
    }

    /**
     * @param {String} id the id of the meeting info instance to add to the collection
     * @param {Any} value the thing to set in the collection
     * @returns {Any} returns the thing just put in the collection
     * @public
     * @memberof Collection
     */

  }, {
    key: 'set',
    value: function set(id, value) {
      this[this.propertyName][id] = value;

      return this.get(id);
    }

    /**
     * remove the thing at the id
     * @param {String} id ID of the thing you wish to delete from the collection
     * @returns {undefined}
     * @public
     * @memberof Collection
     */

  }, {
    key: 'delete',
    value: function _delete(id) {
      delete this[this.propertyName][id];
    }

    /**
     * @returns {Object} returns an object map of things stuffed into the collection
     * @public
     * @memberof Collection
     */

  }, {
    key: 'getAll',
    value: function getAll() {
      return this[this.propertyName];
    }

    /**
     * @param {Object} set the replacement object
     * @returns {Object} returns an object map of things stuffed into the collection
     * @public
     * @memberof Collection
     */

  }, {
    key: 'setAll',
    value: function setAll(set) {
      this[this.propertyName] = set;

      return this.getAll();
    }
  }]);
  return Collection;
}();

exports.default = Collection;
//# sourceMappingURL=collection.js.map
