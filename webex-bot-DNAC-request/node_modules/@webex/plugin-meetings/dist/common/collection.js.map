{"version":3,"sources":["collection.js"],"names":["Collection","property","namespace","MEETINGS","ParameterError","propertyName","id","value","get","set","getAll"],"mappings":";;;;;;;;;;;;;;;;;;;AAEA;;AACA;;;;;;AAEA;;;IAGqBA,U;;AAGnB;;;;AAIA,sBAAYC,QAAZ,EAAsB;AAAA;AAAA,SANtBC,SAMsB,GANVC,mBAMU;;AACpB,QAAI,CAACF,QAAD,IAAa,CAAC,wBAASA,QAAT,CAAlB,EAAsC;AACpC,YAAM,IAAIG,mBAAJ,CAAmB,wDAAnB,CAAN;AACD;AACD;;;;;;;AAOA,SAAKC,YAAL,GAAoBJ,QAApB;AACA;;;;;;;AAOA,SAAK,KAAKI,YAAV,IAA0B,EAA1B;AACD;;AAED;;;;;;;;;;wBAMIC,E,EAAI;AACN,aAAO,KAAK,KAAKD,YAAV,KAA2B,KAAK,KAAKA,YAAV,EAAwBC,EAAxB,CAA3B,GAAyD,KAAK,KAAKD,YAAV,EAAwBC,EAAxB,CAAzD,GAAuF,IAA9F;AACD;;AAED;;;;;;;;;;wBAOIA,E,EAAIC,K,EAAO;AACb,WAAK,KAAKF,YAAV,EAAwBC,EAAxB,IAA8BC,KAA9B;;AAEA,aAAO,KAAKC,GAAL,CAASF,EAAT,CAAP;AACD;;AAED;;;;;;;;;;4BAOOA,E,EAAI;AACT,aAAO,KAAK,KAAKD,YAAV,EAAwBC,EAAxB,CAAP;AACD;;AAED;;;;;;;;6BAKS;AACP,aAAO,KAAK,KAAKD,YAAV,CAAP;AACD;;AAED;;;;;;;;;2BAMOI,G,EAAK;AACV,WAAK,KAAKJ,YAAV,IAA0BI,GAA1B;;AAEA,aAAO,KAAKC,MAAL,EAAP;AACD;;;;;kBAlFkBV,U","file":"collection.js","sourcesContent":["import {isString} from 'lodash';\n\nimport {MEETINGS} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\n/**\n * @class Collection\n */\nexport default class Collection {\n  namespace = MEETINGS;\n\n  /**\n   * @param {String} property\n   * @memberof Collection\n   */\n  constructor(property) {\n    if (!property || !isString(property)) {\n      throw new ParameterError('Collection expects a string to use as a property name.');\n    }\n    /**\n     * The property name for what collection will be stored, i.e., this.meetingInfos, this.meetings, etc.\n     * @instance\n     * @type {String}\n     * @public\n     * @memberof Meetings\n     */\n    this.propertyName = property;\n    /**\n     * The actual object for the collection\n     * @instance\n     * @type {Object}\n     * @public\n     * @memberof Meetings\n     */\n    this[this.propertyName] = {};\n  }\n\n  /**\n   * @param {String} id ID of the thing stuffed into the collection at id location\n   * @returns {Any} returns whatever is being stuffed into the collection\n   * @public\n   * @memberof Collection\n   */\n  get(id) {\n    return this[this.propertyName] && this[this.propertyName][id] ? this[this.propertyName][id] : null;\n  }\n\n  /**\n   * @param {String} id the id of the meeting info instance to add to the collection\n   * @param {Any} value the thing to set in the collection\n   * @returns {Any} returns the thing just put in the collection\n   * @public\n   * @memberof Collection\n   */\n  set(id, value) {\n    this[this.propertyName][id] = value;\n\n    return this.get(id);\n  }\n\n  /**\n   * remove the thing at the id\n   * @param {String} id ID of the thing you wish to delete from the collection\n   * @returns {undefined}\n   * @public\n   * @memberof Collection\n   */\n  delete(id) {\n    delete this[this.propertyName][id];\n  }\n\n  /**\n   * @returns {Object} returns an object map of things stuffed into the collection\n   * @public\n   * @memberof Collection\n   */\n  getAll() {\n    return this[this.propertyName];\n  }\n\n  /**\n   * @param {Object} set the replacement object\n   * @returns {Object} returns an object map of things stuffed into the collection\n   * @public\n   * @memberof Collection\n   */\n  setAll(set) {\n    this[this.propertyName] = set;\n\n    return this.getAll();\n  }\n}\n"]}