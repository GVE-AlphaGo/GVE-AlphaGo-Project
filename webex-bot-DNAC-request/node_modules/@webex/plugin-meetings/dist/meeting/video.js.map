{"version":3,"sources":["video.js"],"names":["handleTransition","video","mute","self","MEETING_VIDEO_STATE_MACHINE","STATES","MUTE_SELF","UNMUTE_SELF","doToggle","transition","meeting","Media","setLocalTrack","mediaProperties","videoTrack","meetingAudio","audio","audioMuted","muted","MeetingUtil","remoteUpdateAudioVideo","then","LoggerProxy","logger","log","event","from","to","catch","remoteUpdateError","reject","VideoStateMachine","create","mediaDirection","sendVideo","undefined","StateMachine","transitions","name","TRANSITIONS","TOGGLE","state","data","methods","isMuted","isSelf","setData","onBeforeToggle","resolve","onAfterToggle","plugins","StateMachineHistory","max"],"mappings":"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","file":"video.js","sourcesContent":["import StateMachine from 'javascript-state-machine';\nimport StateMachineHistory from 'javascript-state-machine/lib/history';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport Media from '../media';\nimport MeetingUtil from '../meeting/util';\nimport {MEETING_VIDEO_STATE_MACHINE} from '../constants';\n\nconst handleTransition = (video) => {\n  if (video.mute && video.self) {\n    return MEETING_VIDEO_STATE_MACHINE.STATES.MUTE_SELF;\n  }\n  if (!video.mute && video.self) {\n    return MEETING_VIDEO_STATE_MACHINE.STATES.UNMUTE_SELF;\n  }\n\n  return null;\n};\n\nconst doToggle = (transition, video, meeting) => {\n  Media.setLocalTrack(video.mute, meeting.mediaProperties.videoTrack);\n  const meetingAudio = meeting.audio;\n  const audioMuted = meetingAudio ? meetingAudio.muted : true;\n\n  return MeetingUtil.remoteUpdateAudioVideo(audioMuted, video.mute, meeting)\n    .then(() => {\n      LoggerProxy.logger.log(\n        `VideoStateMachine->onAfterToggle#${transition.event} fired! State changed from '${transition.from}' to '${\n          transition.to\n        }' with transition '${transition.transition}''.`\n      );\n    })\n    .catch((remoteUpdateError) => {\n      LoggerProxy.logger.log(\n        `VideoStateMachine->onBeforeToggle#${transition.event} fired! State failed to change with transition '${\n          transition.transition\n        }''. After local Video toggle failed, resetting remote also failed, meeting video in bad state with error: ${remoteUpdateError}.`\n      );\n\n      return Promise.reject(remoteUpdateError);\n    });\n};\n\nconst VideoStateMachine = {\n  /**\n   *\n   * @param {Object} mediaDirection object containing media direction\n   * @param {Boolean} mediaDirection.sendVideo Whether or not to send video in the meeting\n   * @param {Meeting} meeting an instance of a Meeting\n   * @returns {Statemachine} returns a state machine instance\n   */\n  create(mediaDirection, meeting) {\n    if (!mediaDirection.sendVideo) {\n      return undefined;\n    }\n\n    return new StateMachine({\n      transitions: [\n        {\n          name: MEETING_VIDEO_STATE_MACHINE.TRANSITIONS.TOGGLE,\n          from: '*',\n          /**\n           *\n           * @param {Object} video current video data for the transition {mute, self}\n           * @returns {String} a new state value for the transition\n           */\n          to(video) {\n            return handleTransition(video) || this.state;\n          }\n        }\n      ],\n      data: {\n        muted: false,\n        self: true\n      },\n      methods: {\n        /**\n         * Convenience function to tell whether we are muted or not\n         * @returns {Boolen} boolean that indicates whether the video is currently muted\n         */\n        isMuted() {\n          return this.muted;\n        },\n        /**\n         * Convenience function to tell who last muted/unmuted the video\n         * @returns {Boolen} boolean that indicates whether the video was muted by the end user or server\n         */\n        isSelf() {\n          return this.self;\n        },\n\n        /**\n         *\n         * @param {Object} video current video options to set on the state machine\n         * @param {Boolean} video.mute indicates if video is muted or not for a meeting\n         * @param {Boolean} video.self indicates whether the end user or server muted the video\n         * @returns {null}\n         */\n        setData(video) {\n          this.muted = video.mute;\n          this.self = video.self;\n        },\n\n        /**\n         * Method that gets fired before the toggle state change.\n         * If this fails, return false will cancel the transition and the state will remain unchanged\n\n         * @param {Object} transition the StateMachine transition object\n         * @param {Object} video video options\n         * @returns {Object} this.data which contains {muted, self}\n         */\n        onBeforeToggle(transition, video) {\n          if (transition.from !== transition.to) {\n            return doToggle(transition, video, meeting)\n              .then(() => Promise.resolve(this.data));\n          }\n\n          return Promise.resolve(this.data);\n        },\n\n        /**\n         *\n         * @param {Object} transition StateMachine transition\n         * @param {Object} video video options\n         * @returns {Object} this.data which contains {muted, self}\n         */\n        onAfterToggle(transition, video) {\n          this.setData(video);\n\n          return Promise.resolve(this.data);\n        },\n        plugins: [new StateMachineHistory({max: 5})]\n      }\n    });\n  }\n};\n\nexport default VideoStateMachine;\n"]}