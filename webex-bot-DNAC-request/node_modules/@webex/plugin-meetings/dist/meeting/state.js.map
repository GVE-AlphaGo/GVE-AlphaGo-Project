{"version":3,"sources":["state.js"],"names":["MeetingStateMachine","create","meetingRef","ParameterError","StateMachine","init","MEETING_STATE_MACHINE","STATES","IDLE","transitions","name","TRANSITIONS","RING","from","SAFE","JOINED","to","RINGING","JOIN","REMOTE","remote","remoteAnswered","ANSWERED","remoteDeclined","DECLINED","ERROR","LEAVE","ENDED","DECLINE","FAIL","RESET","data","meeting","methods","onRemote","transition","stop","Trigger","trigger","file","function","EVENT_TRIGGERS","MEETING_RINGING_STOP","id","type","onRing","MEETING_RINGING","onBeforeError","error","LoggerProxy","logger","history","onAfterError","safe","onAfterTransition","log","plugins","StateMachineHistory","max"],"mappings":"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","file":"state.js","sourcesContent":["import StateMachine from 'javascript-state-machine';\nimport StateMachineHistory from 'javascript-state-machine/lib/history';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport Trigger from '../common/events/trigger-proxy';\nimport {MEETING_STATE_MACHINE, EVENT_TRIGGERS} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\n// TODO: ensure that meeting can be destroyed when in an error state\nconst MeetingStateMachine = {\n  /**\n   * Initializes the StateMachine for the meeting\n   * @param {Meeting} meetingRef A reference to a meeting instance\n   * @returns {StateMachine}\n   */\n  create(meetingRef) {\n    if (!meetingRef) {\n      throw new ParameterError('You must initialize the meeting state machine with a meeting reference.');\n    }\n\n    return new StateMachine({\n      init: MEETING_STATE_MACHINE.STATES.IDLE,\n      transitions: [\n        // when ringing a meeting, it must be first IDLE, because all other states are invalid, it transitions to the RINGING state\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.RING,\n          from: [MEETING_STATE_MACHINE.STATES.IDLE, MEETING_STATE_MACHINE.STATES.SAFE, MEETING_STATE_MACHINE.STATES.JOINED],\n          to: MEETING_STATE_MACHINE.STATES.RINGING\n        },\n        // when joining a meeting, it must be from the RINGING or IDLE state, transitions to JOINED state, 1:1 will go to RINGING,\n        // others will go straight to JOINED with this transition\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.JOIN,\n          from: [MEETING_STATE_MACHINE.STATES.JOINED, MEETING_STATE_MACHINE.STATES.IDLE, MEETING_STATE_MACHINE.STATES.RINGING, MEETING_STATE_MACHINE.STATES.SAFE],\n          to: MEETING_STATE_MACHINE.STATES.JOINED\n        },\n        // signify that ringing has stopped and somebody else answered, move state to DECLINED, ANSWERED\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.REMOTE,\n          from: [MEETING_STATE_MACHINE.STATES.JOINED, MEETING_STATE_MACHINE.STATES.SAFE],\n          /**\n         * @param {Object} remote\n         * @param {Boolean} remote.remoteAnswered\n         * @param {Boolean} remote.remoteDeclined\n         * @returns {String}\n         */\n          to(remote) {\n            // other user answered the call\n            if (remote.remoteAnswered) {\n              return MEETING_STATE_MACHINE.STATES.ANSWERED;\n            }\n            // other user declined the call\n            if (remote.remoteDeclined) {\n              return MEETING_STATE_MACHINE.STATES.DECLINED;\n            }\n\n            // default\n            return MEETING_STATE_MACHINE.STATES.ERROR;\n          }\n        },\n        // when leaving a meeting it must be from either the RINGING, JOINED, or ERROR states, and transitions it to the ENDED state\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.LEAVE,\n          from: [\n            MEETING_STATE_MACHINE.STATES.RINGING,\n            MEETING_STATE_MACHINE.STATES.JOINED,\n            MEETING_STATE_MACHINE.STATES.ANSWERED,\n            MEETING_STATE_MACHINE.STATES.DECLINED,\n            MEETING_STATE_MACHINE.STATES.ERROR,\n            MEETING_STATE_MACHINE.STATES.SAFE\n          ],\n          to: MEETING_STATE_MACHINE.STATES.ENDED\n        },\n        // when declining an incoming meeting it must be from the ringing state, and it moves to DECLINED state\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.DECLINE,\n          from: [MEETING_STATE_MACHINE.STATES.RINGING, MEETING_STATE_MACHINE.STATES.SAFE],\n          to: MEETING_STATE_MACHINE.STATES.ENDED\n        },\n        // transition from ANY state to ERROR state\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.FAIL,\n          from: '*',\n          to: MEETING_STATE_MACHINE.STATES.ERROR\n        },\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.SAFE,\n          from: MEETING_STATE_MACHINE.STATES.ERROR,\n          to: MEETING_STATE_MACHINE.STATES.SAFE\n        },\n        // fail safe, transition from ANY state to IDLE state\n        {\n          name: MEETING_STATE_MACHINE.TRANSITIONS.RESET,\n          from: '*',\n          to: MEETING_STATE_MACHINE.STATES.IDLE\n        }\n      ],\n      data: {\n        /**\n         * The meeting instance to execute all state changes on\n         */\n        meeting: meetingRef\n      },\n      methods: {\n        /**\n         * Ring stop transition, to end the ring event for the meeting, and transition the state to ANSWERED OR DECLINED, only for outgoing meetings\n         * @param {Object} transition -- FiniteStateMachine automatically passed, not used\n         * @param {Object} stop -- {remoteAnswered: {Boolean}, remoteDeclined: {Boolean}}\n         * @returns {Boolean}\n         */\n        onRemote(transition, stop) {\n          if (this.meeting) {\n            Trigger.trigger(\n              this.meeting,\n              {\n                file: 'meeting/state',\n                function: 'onRemote'\n              },\n              EVENT_TRIGGERS.MEETING_RINGING_STOP,\n              {\n                id: this.meeting.id,\n                type: stop\n              }\n            );\n          }\n        },\n        /**\n         * Ring transition, to cause the ring event for the meeting, and transition the state to RINGING, for both incoming, and outgoing meetings\n         * @param {Object} transition -- FiniteStateMachine automatically passed, not used\n         * @param {String} type -- incoming call === INCOMING / or other meetings have a ring type of JOIN\n         * @returns {Boolean}\n         */\n        onRing(transition, type) {\n          if (this.meeting) {\n            Trigger.trigger(\n              this.meeting,\n              {\n                file: 'meeting/state',\n                function: 'onRing'\n              },\n              EVENT_TRIGGERS.MEETING_RINGING,\n              {\n                type,\n                id: this.meeting.id\n              }\n            );\n          }\n        },\n        /**\n         * handle the error transition stage\n         * @param {Object} transition\n         * @param {Error} error\n         * @returns {Boolean}\n         */\n        onBeforeError(transition, error) {\n          LoggerProxy.logger.error(`meeting/state->onError#meeting.id: ${this.meeting.id} | Transition '${transition.transition}' : ${transition.from} -> ${transition.to} failed after last state transition, with error ${error}. Moving to a non-informative state. Last states: ${this.history}`);\n        },\n        onAfterError() {\n          this.safe();\n        },\n        /**\n         * After ANY transition occurs, we want to know what state the meeting moved to for debugging\n         * @param {Object} transition\n         * @returns {Boolean}\n         */\n        onAfterTransition(transition) {\n          LoggerProxy.logger.log(`meeting/state->onAfterTransition#meeting.id: ${this.meeting.id} | Transition '${transition.transition}' : ${transition.from} -> ${transition.to} executed. Last states: ${this.history}`);\n        }\n      },\n      // track the last 25 states entered\n      plugins: [new StateMachineHistory({max: 25})]\n    });\n  }\n};\n\nexport default MeetingStateMachine;\n"]}