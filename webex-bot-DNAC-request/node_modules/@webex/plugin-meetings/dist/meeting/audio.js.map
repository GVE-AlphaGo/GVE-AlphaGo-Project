{"version":3,"sources":["audio.js"],"names":["handleTransition","audio","mute","self","MEETING_AUDIO_STATE_MACHINE","STATES","MUTE_SELF","UNMUTE_SELF","doToggle","transition","meeting","Media","setLocalTrack","mediaProperties","audioTrack","meetingVideo","video","videoMuted","muted","MeetingUtil","remoteUpdateAudioVideo","then","LoggerProxy","logger","log","event","from","to","catch","remoteUpdateError","reject","AudioStateMachine","create","mediaDirection","sendAudio","StateMachine","transitions","name","TRANSITIONS","TOGGLE","state","data","methods","isMuted","isSelf","setData","onBeforeToggle","resolve","onAfterToggle","plugins","StateMachineHistory","max"],"mappings":"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","file":"audio.js","sourcesContent":["import StateMachine from 'javascript-state-machine';\nimport StateMachineHistory from 'javascript-state-machine/lib/history';\n\nimport LoggerProxy from '../common/logs/logger-proxy';\nimport Media from '../media';\nimport MeetingUtil from '../meeting/util';\nimport {MEETING_AUDIO_STATE_MACHINE} from '../constants';\n\nconst handleTransition = (audio) => {\n  if (audio.mute && audio.self) {\n    return MEETING_AUDIO_STATE_MACHINE.STATES.MUTE_SELF;\n  }\n  if (!audio.mute && audio.self) {\n    return MEETING_AUDIO_STATE_MACHINE.STATES.UNMUTE_SELF;\n  }\n\n  return null;\n};\n\nconst doToggle = (transition, audio, meeting) => {\n  Media.setLocalTrack(audio.mute, meeting.mediaProperties.audioTrack);\n  const meetingVideo = meeting.video;\n  const videoMuted = meetingVideo ? meetingVideo.muted : true;\n\n  return MeetingUtil.remoteUpdateAudioVideo(audio.mute, videoMuted, meeting)\n    .then(() => {\n      LoggerProxy.logger.log(\n        `AudioStateMachine->onAfterToggle#${transition.event} fired! State changed from '${transition.from}' to '${\n          transition.to\n        }' with transition '${transition.transition}''.`\n      );\n    })\n    .catch((remoteUpdateError) => {\n      LoggerProxy.logger.log(\n        `AudioStateMachine->onBeforeToggle#${transition.event} fired! State failed to change with transition '${\n          transition.transition\n        }''. After local audio toggle failed, resetting remote also failed, meeting audio in bad state with error: ${remoteUpdateError}.`\n      );\n\n      return Promise.reject(remoteUpdateError);\n    });\n};\n\nconst AudioStateMachine = {\n  /**\n   *\n   * @param {Object} mediaDirection An object that contains whether we send audio/video/screen streams\n   * @param {Meeting} meeting the meeting instance we are using for this state machine\n   * @returns {StateMachine} returns a StateMachine instance\n   */\n  create(mediaDirection, meeting) {\n    if (!mediaDirection.sendAudio) {\n      return null;\n    }\n\n    return new StateMachine({\n      transitions: [\n        {\n          name: MEETING_AUDIO_STATE_MACHINE.TRANSITIONS.TOGGLE,\n          from: '*',\n          /**\n           *\n           * @param {Object} audio The audio options\n           * @param {Boolean} audio.mute Whether to mute the meeting or not\n           * @param {Boolean} audio.self Whether the was muted by the end user\n           * @param {Boolean} audio.remote Whether the meeting was muted by the server\n           * @returns {String} returns a new value to set the state to\n           */\n          to(audio) {\n            return handleTransition(audio) || this.state;\n          }\n        }\n      ],\n      data: {\n        muted: false,\n        self: true\n      },\n      methods: {\n        /**\n         * Convenience method to return whether the call is muted or not\n         * @returns {Boolen} whether the audio is muted or not\n         */\n        isMuted() {\n          return this.muted;\n        },\n\n        /**\n         * Convenience method to expose this.self\n         * @returns {Boolen} this.self\n         */\n        isSelf() {\n          return this.self;\n        },\n\n        /**\n         *\n         * @param {Object} audio the audio state to change\n         * @returns {null}\n         */\n        setData(audio) {\n          this.muted = audio.mute;\n          this.self = audio.self;\n        },\n\n        /**\n         * Method that gets fired before the toggle state change.\n         * If this fails, return false will cancel the transition and the state will remain unchanged\n         * @param {Object} transition the StateMachine transition object\n         * @param {Object} audio Audio options\n         * @returns {Object} this.data which contains {muted, self}\n         */\n        onBeforeToggle(transition, audio) {\n          if (transition.from !== transition.to) {\n            return doToggle(transition, audio, meeting)\n              .then(() => Promise.resolve(this.data));\n          }\n\n          return Promise.resolve(this.data);\n        },\n\n        /**\n         *\n         * @param {Object} transition StateMachine transition\n         * @param {Object} audio audio options\n         * @returns {Object} this.data which contains {muted, self}\n         */\n        onAfterToggle(transition, audio) {\n          this.setData(audio);\n\n          return Promise.resolve(this.data);\n        },\n        plugins: [new StateMachineHistory({max: 5})]\n      }\n    });\n  }\n};\n\nexport default AudioStateMachine;\n"]}