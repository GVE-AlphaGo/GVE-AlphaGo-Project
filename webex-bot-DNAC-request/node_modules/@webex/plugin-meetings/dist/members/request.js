'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _webexCore = require('@webex/webex-core');

var _constants = require('../constants');

var _parameter = require('../common/errors/parameter');

var _parameter2 = _interopRequireDefault(_parameter);

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class MembersRequest
 */
var MembersRequest = function (_StatelessWebexPlugin) {
  (0, _inherits3.default)(MembersRequest, _StatelessWebexPlugin);

  function MembersRequest() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, MembersRequest);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = MembersRequest.__proto__ || (0, _getPrototypeOf2.default)(MembersRequest)).call.apply(_ref, [this].concat(args))), _this), _this.namespace = _constants.MEETINGS, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(MembersRequest, [{
    key: 'addMembers',


    /**
     *
     * @param {Object} options with format of {invitee: string, locusUrl: string}
     * @returns {Promise}
     * @throws {Error} if the options are not valid and complete, must have invitee with emailAddress OR email AND locusUrl
     * @memberof MembersRequest
     */
    value: function addMembers(options) {
      if (!(!options || !options.invitee || !options.invitee.emailAddress || !options.invitee.email || !options.locusUrl)) {
        throw new _parameter2.default('invitee must be passed and the associated locus url for this meeting object must be defined.');
      }
      var requestParams = _util2.default.getAddMemberRequestParams(options);

      return this.request(requestParams);
    }

    /**
     *
     * @param {Object} options
     * @returns {Promise}
     * @throws {Error} if the options are not valid and complete, must have memberIds AND locusUrl
     * @memberof MembersRequest
     */

  }, {
    key: 'admitMember',
    value: function admitMember(options) {
      if (!options || !options.locusUrl || !options.memberIds) {
        throw new _parameter2.default('memberIds must be an array passed and the associated locus url for this meeting object must be defined.');
      }
      var requestParams = _util2.default.getAdmitMemberRequestParams(options);

      return this.request(requestParams);
    }
  }, {
    key: 'removeMember',
    value: function removeMember(options) {
      if (!options || !options.locusUrl || !options.memberId) {
        throw new _parameter2.default('memberId must be defined, and the associated locus url for this meeting object must be defined.');
      }

      var requestParams = _util2.default.getRemoveMemberRequestParams(options);

      return this.request(requestParams);
    }
  }, {
    key: 'muteMember',
    value: function muteMember(options) {
      if (!options || !options.locusUrl || !options.memberId) {
        throw new _parameter2.default('memberId must be defined, and the associated locus url for this meeting object must be defined.');
      }

      var requestParams = _util2.default.getMuteMemberRequestParams(options);

      return this.request(requestParams);
    }
  }, {
    key: 'transferHostToMember',
    value: function transferHostToMember(options) {
      if (!options || !options.locusUrl || !options.memberId || !options.moderator) {
        throw new _parameter2.default('memberId must be defined, the associated locus url, and the moderator for this meeting object must be defined.');
      }

      var requestParams = _util2.default.getTransferHostToMemberRequestParams(options);

      return this.request(requestParams);
    }
  }]);
  return MembersRequest;
}(_webexCore.StatelessWebexPlugin);

exports.default = MembersRequest;
//# sourceMappingURL=request.js.map
