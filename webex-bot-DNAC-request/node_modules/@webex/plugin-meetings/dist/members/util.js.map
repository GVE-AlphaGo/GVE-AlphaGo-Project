{"version":3,"sources":["util.js"],"names":["MembersUtil","generateAddMemberOptions","invitee","locusUrl","alertIfActive","generateAdmitMemberOptions","memberIds","getAddMemberBody","options","invitees","address","emailAddress","email","getAdmitMemberRequestBody","admit","participantIds","getAdmitMemberRequestParams","format","body","uri","CONTROLS","method","HTTP_VERBS","PUT","getAddMemberRequestParams","requestParams","isInvalidInvitee","VALID_EMAIL_ADDRESS","test","getRemoveMemberRequestParams","reason","PARTICIPANT","memberId","LEAVE","generateTransferHostMemberOptions","transfer","moderator","generateRemoveMemberOptions","removal","_FORCED_","generateMuteMemberOptions","mute","status","muted","getMuteMemberRequestParams","audio","PATCH","getTransferHostToMemberRequestParams","role"],"mappings":"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","file":"util.js","sourcesContent":["import {\n  HTTP_VERBS,\n  CONTROLS,\n  _FORCED_,\n  LEAVE,\n  PARTICIPANT,\n  VALID_EMAIL_ADDRESS\n} from '../constants';\n\nconst MembersUtil = {};\n\n/**\n * @param {Object} invitee with emailAddress or email\n * @param {String} locusUrl\n * @param {Boolean} alertIfActive\n * @returns {Object} the format object\n */\nMembersUtil.generateAddMemberOptions = (invitee, locusUrl, alertIfActive) => ({\n  invitee,\n  locusUrl,\n  alertIfActive\n});\n\n/**\n * @param {Array} memberIds\n * @param {String} locusUrl\n * @returns {Object} the format object\n */\nMembersUtil.generateAdmitMemberOptions = (memberIds, locusUrl) => ({\n  locusUrl,\n  memberIds\n});\n\n/**\n * @param {Object} options with {invitee: {emailAddress, email}, alertIfActive}\n * @returns {Object} with {invitees: [{address}], alertIfActive}\n */\nMembersUtil.getAddMemberBody = (options) => ({\n  invitees: [\n    {\n      address: options.invitee.emailAddress || options.invitee.email\n    }\n  ],\n  alertIfActive: options.alertIfActive\n});\n\n/**\n * @param {Object} options with {memberIds}\n * @returns {Object} admit with {memberIds}\n */\nMembersUtil.getAdmitMemberRequestBody = (options) => ({\n  admit: {participantIds: options.memberIds}\n});\n\n/**\n * @param {Object} format with {memberIds, locusUrl}\n * @returns {Object} the request parameters (method, uri, body) needed to make a admitMember request\n */\nMembersUtil.getAdmitMemberRequestParams = (format) => {\n  const body = MembersUtil.getAdmitMemberRequestBody(format);\n  const uri = `${format.locusUrl}/${CONTROLS}`;\n\n  return {\n    method: HTTP_VERBS.PUT,\n    uri,\n    body\n  };\n};\n\n/**\n * @param {Object} format with {invitee {emailAddress, email}, locusUrl, alertIfActive}\n * @returns {Object} the request parameters (method, uri, body) needed to make a addMember request\n */\nMembersUtil.getAddMemberRequestParams = (format) => {\n  const body = MembersUtil.getAddMemberBody(format);\n  const requestParams = {\n    method: HTTP_VERBS.PUT,\n    uri: format.locusUrl,\n    body\n  };\n\n  return requestParams;\n};\n\nMembersUtil.isInvalidInvitee = (invitee) => {\n  if (!(invitee && (invitee.email || invitee.emailAddress))) {\n    return true;\n  }\n\n  return !VALID_EMAIL_ADDRESS.test(invitee.email || invitee.emailAddress);\n};\n\nMembersUtil.getRemoveMemberRequestParams = (options) => {\n  const body = {\n    reason: options.reason\n  };\n  const uri = `${options.locusUrl}/${PARTICIPANT}/${options.memberId}/${LEAVE}`;\n\n  return {\n    method: HTTP_VERBS.PUT,\n    uri,\n    body\n  };\n};\n\nMembersUtil.generateTransferHostMemberOptions = (transfer, moderator, locusUrl) => ({\n  moderator,\n  locusUrl,\n  memberId: transfer\n});\n\nMembersUtil.generateRemoveMemberOptions = (removal, locusUrl) => ({\n  reason: _FORCED_,\n  memberId: removal,\n  locusUrl\n});\n\nMembersUtil.generateMuteMemberOptions = (mute, status, locusUrl) => ({\n  memberId: mute,\n  muted: status,\n  locusUrl\n});\n\nMembersUtil.getMuteMemberRequestParams = (options) => {\n  const body = {\n    audio: {\n      muted: options.muted\n    }\n  };\n  const uri = `${options.locusUrl}/${PARTICIPANT}/${options.memberId}/${CONTROLS}`;\n\n  return {\n    method: HTTP_VERBS.PATCH,\n    uri,\n    body\n  };\n};\n\nMembersUtil.getTransferHostToMemberRequestParams = (options) => {\n  const body = {\n    role: {\n      moderator: options.moderator\n    }\n  };\n  const uri = `${options.locusUrl}/${PARTICIPANT}/${options.memberId}/${CONTROLS}`;\n\n  return {\n    method: HTTP_VERBS.PATCH,\n    uri,\n    body\n  };\n};\n\nexport default MembersUtil;\n"]}