{"version":3,"sources":["request.js"],"names":["MeetingInfoRequest","namespace","MEETINGS","options","type","destination","ParameterError","format","MeetingInfoUtil","getMeetingInfoAPIFormat","resourceUrl","getResourceUrl","value","requestParams","getRequestParams","API","LOCUS","request","StatelessWebexPlugin"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAEA;;AACA;;;;AAEA;;;;;;AACA;;;IAGqBA,kB;;;;;;;;;;;;;;oOACnBC,S,GAAYC,mB;;;;;;;AAEZ;;;;;;;;;;qCAUiBC,O,EAAS;AACxB,UAAI,CAACA,OAAD,IAAY,CAACA,QAAQC,IAArB,IAA6B,CAACD,QAAQE,WAA1C,EAAuD;AACrD,cAAM,IAAIC,mBAAJ,CAAmB,0IAAnB,CAAN;AACD;AACD,UAAMC,SAASC,eAAgBC,uBAAhB,CAAwCN,OAAxC,CAAf;AACA,UAAMO,cAAcF,eAAgBG,cAAhB,CAA+BJ,OAAOH,IAAtC,EAA4CG,OAAOK,KAAnD,CAApB;AACA,UAAMC,gBAAgBL,eAAgBM,gBAAhB,CAAiCJ,WAAjC,EAA8CH,OAAOH,IAArD,EAA2DG,OAAOK,KAAlE,EAAyEG,eAAIC,KAA7E,CAAtB;;AAEA,aAAO,KAAKC,OAAL,CAAaJ,aAAb,CAAP;AACD;;;EAtB6CK,+B;;kBAA3BlB,kB","file":"request.js","sourcesContent":["import {StatelessWebexPlugin} from '@webex/webex-core';\n\nimport {API, MEETINGS} from '../constants';\nimport ParameterError from '../common/errors/parameter';\n\nimport MeetingInfoUtil from './util';\n/**\n * @class MeetingInfoRequest\n */\nexport default class MeetingInfoRequest extends StatelessWebexPlugin {\n  namespace = MEETINGS;\n\n  /**\n   *\n   * @param {Object} options with format of {type: String, desintation: String}\n   * where type is PERSONAL_ROOM, SIP_URI, CONVERSATION_URL, and destination is userId, sipUri, convoUrl respectively\n   * type can also be specified as an option and be of the list SIP_URI,MEETING_ID,LOCUS_ID,PERSONAL_ROOM,MEETING_LINK,ONE_ON_ONE,MEDIA_SIP_URI,CONVERSATION_URL,TEMP_SIP_URI\n   * with the desination matching\n   * @returns {Promise} returns a promise that resolves/rejects the result of the request\n   * @throws {Error} if the options are not valid and complete\n   * @memberof MeetingInfoRequest\n   */\n  fetchMeetingInfo(options) {\n    if (!options || !options.type || !options.destination) {\n      throw new ParameterError('MeetingInfo should be fetched with a type and destination specified, see list of valid types and their corresponding values in constants');\n    }\n    const format = MeetingInfoUtil.getMeetingInfoAPIFormat(options);\n    const resourceUrl = MeetingInfoUtil.getResourceUrl(format.type, format.value);\n    const requestParams = MeetingInfoUtil.getRequestParams(resourceUrl, format.type, format.value, API.LOCUS);\n\n    return this.request(requestParams);\n  }\n}\n"]}