'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _webexCore = require('@webex/webex-core');

var _constants = require('../constants');

var _parameter = require('../common/errors/parameter');

var _parameter2 = _interopRequireDefault(_parameter);

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class MeetingInfoRequest
 */
var MeetingInfoRequest = function (_StatelessWebexPlugin) {
  (0, _inherits3.default)(MeetingInfoRequest, _StatelessWebexPlugin);

  function MeetingInfoRequest() {
    var _ref;

    var _temp, _this, _ret;

    (0, _classCallCheck3.default)(this, MeetingInfoRequest);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = (0, _possibleConstructorReturn3.default)(this, (_ref = MeetingInfoRequest.__proto__ || (0, _getPrototypeOf2.default)(MeetingInfoRequest)).call.apply(_ref, [this].concat(args))), _this), _this.namespace = _constants.MEETINGS, _temp), (0, _possibleConstructorReturn3.default)(_this, _ret);
  }

  (0, _createClass3.default)(MeetingInfoRequest, [{
    key: 'fetchMeetingInfo',


    /**
     *
     * @param {Object} options with format of {type: String, desintation: String}
     * where type is PERSONAL_ROOM, SIP_URI, CONVERSATION_URL, and destination is userId, sipUri, convoUrl respectively
     * type can also be specified as an option and be of the list SIP_URI,MEETING_ID,LOCUS_ID,PERSONAL_ROOM,MEETING_LINK,ONE_ON_ONE,MEDIA_SIP_URI,CONVERSATION_URL,TEMP_SIP_URI
     * with the desination matching
     * @returns {Promise} returns a promise that resolves/rejects the result of the request
     * @throws {Error} if the options are not valid and complete
     * @memberof MeetingInfoRequest
     */
    value: function fetchMeetingInfo(options) {
      if (!options || !options.type || !options.destination) {
        throw new _parameter2.default('MeetingInfo should be fetched with a type and destination specified, see list of valid types and their corresponding values in constants');
      }
      var format = _util2.default.getMeetingInfoAPIFormat(options);
      var resourceUrl = _util2.default.getResourceUrl(format.type, format.value);
      var requestParams = _util2.default.getRequestParams(resourceUrl, format.type, format.value, _constants.API.LOCUS);

      return this.request(requestParams);
    }
  }]);
  return MeetingInfoRequest;
}(_webexCore.StatelessWebexPlugin);

exports.default = MeetingInfoRequest;
//# sourceMappingURL=request.js.map
