'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _webexCore = require('@webex/webex-core');

var _constants = require('../constants');

var _collection = require('./collection');

var _collection2 = _interopRequireDefault(_collection);

var _request = require('./request');

var _request2 = _interopRequireDefault(_request);

var _util = require('./util');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class MeetingInfo
 */
var MeetingInfo = function (_StatelessWebexPlugin) {
  (0, _inherits3.default)(MeetingInfo, _StatelessWebexPlugin);

  /**
   *
   * @param {Object} attrs
   * @param {Object} options
   */
  function MeetingInfo(attrs, options) {
    (0, _classCallCheck3.default)(this, MeetingInfo);

    /**
     * The meeting info request server interface
     * @instance
     * @type {Object}
     * @private
     * @memberof MeetingInfo
    */
    var _this = (0, _possibleConstructorReturn3.default)(this, (MeetingInfo.__proto__ || (0, _getPrototypeOf2.default)(MeetingInfo)).call(this, {}, options));

    _this.namespace = _constants.MEETINGS;
    _this.meetingInfoRequest = new _request2.default({}, options);
    /**
     * The meeting information collection interface
     * @instance
     * @type {Object}
     * @private
     * @memberof MeetingInfo
    */
    _this.meetingInfoCollection = new _collection2.default();
    return _this;
  }

  /**
   * @param {string} id
   * @returns {object}
   * @public
   * @memberof MeetingInfo
   */


  (0, _createClass3.default)(MeetingInfo, [{
    key: 'getMeetingInfo',
    value: function getMeetingInfo(id) {
      return this.meetingInfoCollection.get(id);
    }

    /**
     * @param {string} id
     * @param {object} info
     * @returns {null}
     * @public
     * @memberof MeetingInfo
     */

  }, {
    key: 'setMeetingInfo',
    value: function setMeetingInfo(id, info) {
      this.meetingInfoCollection.set(id, info);
    }

    /**
     * Helper to make the actual MeetingInfo request and set the meetingInfo if successful, else reject
     * @param {Object} options
     * @returns {Promise}
     * @private
     * @memberof MeetingInfo
     */

  }, {
    key: 'requestFetchInfo',
    value: function requestFetchInfo(options) {
      var _this2 = this;

      return this.meetingInfoRequest.fetchMeetingInfo(options).then(function (info) {
        if (info && info.body) {
          _this2.setMeetingInfo(info.body.sipMeetingUri || info.body.meetingLink, info.body);
        }

        return info;
      }).catch(function (error) {
        return _promise2.default.reject(error);
      });
    }

    /**
     * Helper to generate the options for the MeetingInfo request
     * @param {String} destination
     * @param {String} type
     * @returns {Promise}
     * @private
     * @memberof MeetingInfo
     */

  }, {
    key: 'fetchInfoOptions',
    value: function fetchInfoOptions(destination, type) {
      return _util2.default.generateOptions({
        destination: destination,
        type: type,
        webex: this.webex
      });
    }

    /**
     * Fetches meeting info from the server
     * @param {String} destination one of many different types of destinations to look up info for
     * @param {String} [type] to match up with the destination value
     * @returns {Promise} returns a meeting info object
     * @public
     * @memberof MeetingInfo
     */

  }, {
    key: 'fetchMeetingInfo',
    value: function fetchMeetingInfo(destination) {
      var _this3 = this;

      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      return this.fetchInfoOptions(destination, type).then(function (options) {
        return (
          // fetch meeting info
          _this3.requestFetchInfo(options).catch(function (error) {
            // if it failed the first time as meeting link
            if (options.type === _constants._MEETING_LINK_) {
              // convert the meeting link to sip URI and retry
              return _this3.requestFetchInfo(_this3.fetchInfoOptions(_util2.default.convertLinkToSip(destination), _constants._SIP_URI_));
            }

            return _promise2.default.reject(error);
          })
        );
      });
    }
  }]);
  return MeetingInfo;
}(_webexCore.StatelessWebexPlugin); /*!
                                     * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
                                     */

exports.default = MeetingInfo;
//# sourceMappingURL=index.js.map
