'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _bowser = require('bowser');

var _bowser2 = _interopRequireDefault(_bowser);

var _constants = require('../constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @description MQAProcessor handles interval data for MQA
 * @export
 * @class MQAProcessor
 */
var MQAProcessor = function () {
  /**
     * @constructor
     * @public
     * @memberof MQAProcessor
     */
  function MQAProcessor() {
    (0, _classCallCheck3.default)(this, MQAProcessor);

    this.data = {
      videoReceive: [],
      audioTransmit: [],
      audioReceive: [],
      videoTransmit: []
    };
    this.intervalNumber = 1;
  }

  /**
   * @param {String} id
   * @param {Array<WebRTCData>} interval - a slice of metrics history
   * @returns {undefined}
   * @memberof MQAProcessor
   */


  (0, _createClass3.default)(MQAProcessor, [{
    key: 'process',
    value: function process(id, interval) {
      var rtcCandidatePair = void 0,
          rtcOutVideo = void 0,
          rtpOutVideo = void 0; // TODO: , rtcInVideo, rtpInVideo, rtcOutAudio, rtcInAudio, rtpInAudio, rtpOutAudio; // TODO:
      var vsTransmit = void 0;

      var _data = this.data,
          videoReceive = _data.videoReceive,
          audioTransmit = _data.audioTransmit,
          audioReceive = _data.audioReceive,
          videoTransmit = _data.videoTransmit;


      var sumValue = interval[0]; // the head is the last interval value, webRTC spec has some values automatically summed

      if (sumValue) {
        rtcCandidatePair = sumValue.rtcCandidatePair;
      }

      switch (id) {
        case _constants.STATS.AUDIO_SENDER_ID:
          audioTransmit.push();
          break;
        case _constants.STATS.AUDIO_RECEIVER_ID:
          audioReceive.push();
          break;
        case _constants.STATS.VIDEO_SENDER_ID:
          videoTransmit.push();
          break;
        case _constants.STATS.VIDEO_RECEIVER_ID:
          videoReceive.push();
          break;
        case _constants.STATS.SHARE_SENDER_ID:
          if (sumValue) {
            rtcOutVideo = sumValue.rtcOutVideo;
            rtpOutVideo = sumValue.rtpOutVideo;
          }
          vsTransmit = (0, _extends3.default)({}, _constants.MQA_STATS.DEFAULT_SHARE_SENDER_STATS);
          if (_bowser2.default.name.toLowerCase() === 'firefox') {
            vsTransmit.common.remoteLossRate = rtpOutVideo ? rtpOutVideo.pliCount / (interval.length * this.intervalNumber) : -1;
            vsTransmit.common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : -1;
            vsTransmit.streams[0].common.transmittedFrameRate = rtcOutVideo ? rtcOutVideo.framesEncoded / (interval.length * this.intervalNumber) : -1;
            vsTransmit.streams[0].common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : -1;
          } else {
            vsTransmit.common.availableBitRate = rtcCandidatePair ? rtcCandidatePair.availableOutgoingBitrate : -1;
            vsTransmit.common.remoteLossRate = rtpOutVideo ? rtpOutVideo.pliCount / (interval.length * this.intervalNumber) : -1;
            vsTransmit.common.roundTripTime = rtcCandidatePair ? rtcCandidatePair.totalRoundTripTime / (interval.length * this.intervalNumber) : -1;
            vsTransmit.common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : -1;
            vsTransmit.streams[0].common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : -1;
            vsTransmit.streams[0].common.transmittedBitrate = rtcCandidatePair ? rtcCandidatePair.availableOutgoingBitrate : -1;
            vsTransmit.streams[0].common.transmittedFrameRate = rtcOutVideo ? rtcOutVideo.framesSent / (interval.length * this.intervalNumber) : -1;
            vsTransmit.streams[0].transmittedHeight = rtcOutVideo ? rtcOutVideo.frameHeight : -1;
            vsTransmit.streams[0].transmittedKeyFrames = rtcOutVideo ? rtcOutVideo.hugeFramesSent : -1;
            vsTransmit.streams[0].transmittedWidth = rtcOutVideo ? rtcOutVideo.frameWidth : -1;
          }
          videoTransmit.push(vsTransmit);
          break;
        default:
          break;
      }
      this.data.intervalMetadata = this.data.intervalMetadata || (0, _extends3.default)({}, _constants.MQA_STATS.intervalMetadata);
    }

    /**
     * get the data payload for media quality events after they all have been processed
     * wait to call this until after you have all the data from the interval you want
     * this method clears the data as a side effect
     * @returns {Object}
     * @memberof MQAProcessor
     */

  }, {
    key: 'getData',
    value: function getData() {
      this.intervalNumber += 1;

      var payload = (0, _extends3.default)({}, this.data, { intervalNumber: this.intervalNumber });

      this.data = {
        videoReceive: [],
        audioTransmit: [],
        audioReceive: [],
        videoTransmit: []
      };

      return payload;
    }
  }]);
  return MQAProcessor;
}();

exports.default = MQAProcessor;
//# sourceMappingURL=mqa-processor.js.map
