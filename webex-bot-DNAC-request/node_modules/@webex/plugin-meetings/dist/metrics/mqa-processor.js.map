{"version":3,"sources":["mqa-processor.js"],"names":["MQAProcessor","data","videoReceive","audioTransmit","audioReceive","videoTransmit","intervalNumber","id","interval","rtcCandidatePair","rtcOutVideo","rtpOutVideo","vsTransmit","sumValue","STATS","AUDIO_SENDER_ID","push","AUDIO_RECEIVER_ID","VIDEO_SENDER_ID","VIDEO_RECEIVER_ID","SHARE_SENDER_ID","MQA_STATS","DEFAULT_SHARE_SENDER_STATS","bowser","name","toLowerCase","common","remoteLossRate","pliCount","length","rtpPackets","packetsSent","streams","transmittedFrameRate","framesEncoded","availableBitRate","availableOutgoingBitrate","roundTripTime","totalRoundTripTime","transmittedBitrate","framesSent","transmittedHeight","frameHeight","transmittedKeyFrames","hugeFramesSent","transmittedWidth","frameWidth","intervalMetadata","payload"],"mappings":"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","file":"mqa-processor.js","sourcesContent":["import bowser from 'bowser';\n\nimport {\n  STATS,\n  MQA_STATS\n} from '../constants';\n\n\n/**\n * @description MQAProcessor handles interval data for MQA\n * @export\n * @class MQAProcessor\n */\nclass MQAProcessor {\n  /**\n     * @constructor\n     * @public\n     * @memberof MQAProcessor\n     */\n  constructor() {\n    this.data = {\n      videoReceive: [],\n      audioTransmit: [],\n      audioReceive: [],\n      videoTransmit: []\n    };\n    this.intervalNumber = 1;\n  }\n\n  /**\n   * @param {String} id\n   * @param {Array<WebRTCData>} interval - a slice of metrics history\n   * @returns {undefined}\n   * @memberof MQAProcessor\n   */\n  process(id, interval) {\n    let rtcCandidatePair, rtcOutVideo, rtpOutVideo; // TODO: , rtcInVideo, rtpInVideo, rtcOutAudio, rtcInAudio, rtpInAudio, rtpOutAudio; // TODO:\n    let vsTransmit;\n\n    const {\n      videoReceive, audioTransmit, audioReceive, videoTransmit\n    } = this.data;\n\n    const sumValue = interval[0]; // the head is the last interval value, webRTC spec has some values automatically summed\n\n    if (sumValue) {\n      rtcCandidatePair = sumValue.rtcCandidatePair;\n    }\n\n    switch (id) {\n      case STATS.AUDIO_SENDER_ID:\n        audioTransmit.push();\n        break;\n      case STATS.AUDIO_RECEIVER_ID:\n        audioReceive.push();\n        break;\n      case STATS.VIDEO_SENDER_ID:\n        videoTransmit.push();\n        break;\n      case STATS.VIDEO_RECEIVER_ID:\n        videoReceive.push();\n        break;\n      case STATS.SHARE_SENDER_ID:\n        if (sumValue) {\n          rtcOutVideo = sumValue.rtcOutVideo;\n          rtpOutVideo = sumValue.rtpOutVideo;\n        }\n        vsTransmit = {...MQA_STATS.DEFAULT_SHARE_SENDER_STATS};\n        if (bowser.name.toLowerCase() === 'firefox') {\n          vsTransmit.common.remoteLossRate = rtpOutVideo ? rtpOutVideo.pliCount / (interval.length * this.intervalNumber) : -1;\n          vsTransmit.common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : -1;\n          vsTransmit.streams[0].common.transmittedFrameRate = rtcOutVideo ? rtcOutVideo.framesEncoded / (interval.length * this.intervalNumber) : -1;\n          vsTransmit.streams[0].common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : -1;\n        }\n        else {\n          vsTransmit.common.availableBitRate = rtcCandidatePair ? rtcCandidatePair.availableOutgoingBitrate : -1;\n          vsTransmit.common.remoteLossRate = rtpOutVideo ? rtpOutVideo.pliCount / (interval.length * this.intervalNumber) : -1;\n          vsTransmit.common.roundTripTime = rtcCandidatePair ? rtcCandidatePair.totalRoundTripTime / (interval.length * this.intervalNumber) : -1;\n          vsTransmit.common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : -1;\n          vsTransmit.streams[0].common.rtpPackets = rtpOutVideo ? rtpOutVideo.packetsSent / (interval.length * this.intervalNumber) : -1;\n          vsTransmit.streams[0].common.transmittedBitrate = rtcCandidatePair ? rtcCandidatePair.availableOutgoingBitrate : -1;\n          vsTransmit.streams[0].common.transmittedFrameRate = rtcOutVideo ? rtcOutVideo.framesSent / (interval.length * this.intervalNumber) : -1;\n          vsTransmit.streams[0].transmittedHeight = rtcOutVideo ? rtcOutVideo.frameHeight : -1;\n          vsTransmit.streams[0].transmittedKeyFrames = rtcOutVideo ? rtcOutVideo.hugeFramesSent : -1;\n          vsTransmit.streams[0].transmittedWidth = rtcOutVideo ? rtcOutVideo.frameWidth : -1;\n        }\n        videoTransmit.push(vsTransmit);\n        break;\n      default:\n        break;\n    }\n    this.data.intervalMetadata = this.data.intervalMetadata || {...MQA_STATS.intervalMetadata};\n  }\n\n  /**\n   * get the data payload for media quality events after they all have been processed\n   * wait to call this until after you have all the data from the interval you want\n   * this method clears the data as a side effect\n   * @returns {Object}\n   * @memberof MQAProcessor\n   */\n  getData() {\n    this.intervalNumber += 1;\n\n    const payload = {...this.data, intervalNumber: this.intervalNumber};\n\n    this.data = {\n      videoReceive: [],\n      audioTransmit: [],\n      audioReceive: [],\n      videoTransmit: []\n    };\n\n    return payload;\n  }\n}\n\nexport default MQAProcessor;\n"]}