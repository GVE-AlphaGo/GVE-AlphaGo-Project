{"version":3,"sources":["index.js"],"names":["drawImage","updateImageOrientation","readExifData","orient","default","require","ExifImage","options","ctx","save","rad","flip","deg","Math","PI","translate","x","width","y","height","rotate","scale","img","restore","file","resolve","reader","FileReader","readAsArrayBuffer","onload","arrayBuffer","result","buf","Buffer","from","then","image","type","mimeType","error","exifData","orientation","Orientation"],"mappings":"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","file":"index.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n/* eslint no-unused-vars: [\"error\", { \"vars\": \"local\" }] */\n/* global Uint8Array, FileReader */\n\nconst {ExifImage} = require('exif');\n\n/**\n* Draws the image on the canvas so that the thumbnail\n* could be generated\n* @param {Object} options(options(orientation: image exif orientation range from 1-8, img: Image object, x: start x-axis, y: start y-axis, width: width of the thumbnail, height: height of the thumbnail, deg: counterclockwise degree rotation, flip: flip Image, ctx: canvas context))\n* @returns {Object}\n*/\nexport function drawImage(options) {\n  // save current context before applying transformations\n  options.ctx.save();\n  let rad;\n\n  // convert degrees to radians\n  if (options.flip) {\n    rad = options.deg * Math.PI / 180;\n  }\n  else {\n    rad = 2 * Math.PI - options.deg * Math.PI / 180;\n  }\n  // set the origin to the center of the image\n  options.ctx.translate(options.x + options.width / 2, options.y + options.height / 2);\n  // rotate the canvas around the origin\n  options.ctx.rotate(rad);\n  if (options.flip) {\n    // flip the canvas\n    options.ctx.scale(-1, 1);\n  }\n  // draw the image\n  options.ctx.drawImage(options.img, -options.width / 2, -options.height / 2, options.width, options.height);\n  // restore the canvas\n  options.ctx.restore();\n}\n\n/**\n* Updates the image file with exif information, required to correctly rotate the image activity\n* @param {Object} file\n* @returns {Promise<Object>}\n*/\nexport function updateImageOrientation(file) {\n  return new Promise((resolve) => {\n    const reader = new FileReader();\n\n    reader.readAsArrayBuffer(file);\n    reader.onload = function onload() {\n      const arrayBuffer = reader.result;\n      const buf = Buffer.from(arrayBuffer);\n\n      resolve(buf);\n    };\n  })\n    .then((buf) => readExifData(file, buf));\n}\n\n/**\n* Adds exif orientation information on the image file\n* @param {Object} file\n* @param {Object} buf\n* @returns {Promise<ExifImage>}\n*/\nexport function readExifData(file, buf) {\n  return new Promise((resolve) => {\n    // For avatar images the file.type is set as image/jpeg, however for images shared in an activity file.mimeType is set as image/jpeg. Handling both conditions.\n    if (file && file.image && (file.type === 'image/jpeg' || file.mimeType === 'image/jpeg')) {\n      /* eslint-disable no-new */\n      new ExifImage({image: buf}, (error, exifData) => {\n        if (!error && exifData) {\n          file.image.orientation = exifData.image.Orientation;\n        }\n        resolve(buf);\n      });\n    }\n    else {\n      resolve(buf);\n    }\n  });\n}\n\n/* eslint-disable complexity */\n/**\n* Rotates/flips the image on the canvas as per exif information\n* @param {Object} options(orientation: image exif orientation range from 1-8, img: Image object, x: start x-axis, y: start y-axis, width: width of the thumbnail, height: height of the thumbnail, ctx: canvas context)\n* @param {Object} file\n* @returns {Object}\n*/\nexport function orient(options, file) {\n  if (file && file.image && file.image.orientation && file.image.orientation !== 1) {\n    const image = {\n      img: options.img,\n      x: options.x,\n      y: options.y,\n      width: options.width,\n      height: options.height,\n      deg: 0,\n      flip: true,\n      ctx: options.ctx\n    };\n\n    switch (options && options.orientation) {\n      case 3:\n      // rotateImage180\n        image.deg = 180;\n        image.flip = false;\n        break;\n      case 4:\n      // rotate180AndFlipImage\n        image.deg = 180;\n        image.flip = true;\n        break;\n      case 5:\n      // rotate90AndFlipImage\n        image.deg = 270;\n        image.flip = true;\n        break;\n      case 6:\n      // rotateImage90\n        image.deg = 270;\n        image.flip = false;\n        break;\n      case 7:\n      // rotateNeg90AndFlipImage\n        image.deg = 90;\n        image.flip = true;\n        break;\n      case 8:\n      // rotateNeg90\n        image.deg = 90;\n        image.flip = false;\n        break;\n      default:\n        break;\n    }\n    drawImage(image);\n  }\n  else {\n    options.ctx.drawImage(options.img, options.x, options.y, options.width, options.height);\n  }\n}\n/* eslint-enable complexity */\n\nexport {default as processImage} from './process-image';\nexport {default as detectFileType} from './detect-filetype';\n"]}