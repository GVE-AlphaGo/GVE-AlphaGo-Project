'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.detectFileType = exports.processImage = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

exports.drawImage = drawImage;
exports.updateImageOrientation = updateImageOrientation;
exports.readExifData = readExifData;
exports.orient = orient;

var _processImage = require('./process-image');

Object.defineProperty(exports, 'processImage', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_processImage).default;
  }
});

var _detectFiletype = require('./detect-filetype');

Object.defineProperty(exports, 'detectFileType', {
  enumerable: true,
  get: function get() {
    return _interopRequireDefault(_detectFiletype).default;
  }
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */

/* eslint no-unused-vars: ["error", { "vars": "local" }] */
/* global Uint8Array, FileReader */

var _require = require('exif'),
    ExifImage = _require.ExifImage;

/**
* Draws the image on the canvas so that the thumbnail
* could be generated
* @param {Object} options(options(orientation: image exif orientation range from 1-8, img: Image object, x: start x-axis, y: start y-axis, width: width of the thumbnail, height: height of the thumbnail, deg: counterclockwise degree rotation, flip: flip Image, ctx: canvas context))
* @returns {Object}
*/


function drawImage(options) {
  // save current context before applying transformations
  options.ctx.save();
  var rad = void 0;

  // convert degrees to radians
  if (options.flip) {
    rad = options.deg * Math.PI / 180;
  } else {
    rad = 2 * Math.PI - options.deg * Math.PI / 180;
  }
  // set the origin to the center of the image
  options.ctx.translate(options.x + options.width / 2, options.y + options.height / 2);
  // rotate the canvas around the origin
  options.ctx.rotate(rad);
  if (options.flip) {
    // flip the canvas
    options.ctx.scale(-1, 1);
  }
  // draw the image
  options.ctx.drawImage(options.img, -options.width / 2, -options.height / 2, options.width, options.height);
  // restore the canvas
  options.ctx.restore();
}

/**
* Updates the image file with exif information, required to correctly rotate the image activity
* @param {Object} file
* @returns {Promise<Object>}
*/
function updateImageOrientation(file) {
  return new _promise2.default(function (resolve) {
    var reader = new FileReader();

    reader.readAsArrayBuffer(file);
    reader.onload = function onload() {
      var arrayBuffer = reader.result;
      var buf = Buffer.from(arrayBuffer);

      resolve(buf);
    };
  }).then(function (buf) {
    return readExifData(file, buf);
  });
}

/**
* Adds exif orientation information on the image file
* @param {Object} file
* @param {Object} buf
* @returns {Promise<ExifImage>}
*/
function readExifData(file, buf) {
  return new _promise2.default(function (resolve) {
    // For avatar images the file.type is set as image/jpeg, however for images shared in an activity file.mimeType is set as image/jpeg. Handling both conditions.
    if (file && file.image && (file.type === 'image/jpeg' || file.mimeType === 'image/jpeg')) {
      /* eslint-disable no-new */
      new ExifImage({ image: buf }, function (error, exifData) {
        if (!error && exifData) {
          file.image.orientation = exifData.image.Orientation;
        }
        resolve(buf);
      });
    } else {
      resolve(buf);
    }
  });
}

/* eslint-disable complexity */
/**
* Rotates/flips the image on the canvas as per exif information
* @param {Object} options(orientation: image exif orientation range from 1-8, img: Image object, x: start x-axis, y: start y-axis, width: width of the thumbnail, height: height of the thumbnail, ctx: canvas context)
* @param {Object} file
* @returns {Object}
*/
function orient(options, file) {
  if (file && file.image && file.image.orientation && file.image.orientation !== 1) {
    var image = {
      img: options.img,
      x: options.x,
      y: options.y,
      width: options.width,
      height: options.height,
      deg: 0,
      flip: true,
      ctx: options.ctx
    };

    switch (options && options.orientation) {
      case 3:
        // rotateImage180
        image.deg = 180;
        image.flip = false;
        break;
      case 4:
        // rotate180AndFlipImage
        image.deg = 180;
        image.flip = true;
        break;
      case 5:
        // rotate90AndFlipImage
        image.deg = 270;
        image.flip = true;
        break;
      case 6:
        // rotateImage90
        image.deg = 270;
        image.flip = false;
        break;
      case 7:
        // rotateNeg90AndFlipImage
        image.deg = 90;
        image.flip = true;
        break;
      case 8:
        // rotateNeg90
        image.deg = 90;
        image.flip = false;
        break;
      default:
        break;
    }
    drawImage(image);
  } else {
    options.ctx.drawImage(options.img, options.x, options.y, options.width, options.height);
  }
}
/* eslint-enable complexity */
//# sourceMappingURL=index.js.map
