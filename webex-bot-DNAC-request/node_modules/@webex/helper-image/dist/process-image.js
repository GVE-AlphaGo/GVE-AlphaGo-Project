'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _pick2 = require('lodash/pick');

var _pick3 = _interopRequireDefault(_pick2);

exports.default = processImage;

var _gm = require('gm');

var _gm2 = _interopRequireDefault(_gm);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Measures an image file and produces a thumbnail for it
 * @param {Object} options
 * @param {Blob|ArrayBuffer} options.file
 * @param {Number} options.thumbnailMaxWidth
 * @param {Number} options.thumbnailMaxHeight
 * @param {Boolean} options.enableThumbnails
 * @param {Object} options.logger
 * @returns {Promise<Array>} Buffer, Dimensions, thumbnailDimensions
 */
function processImage(_ref) {
  var file = _ref.file,
      type = _ref.type,
      thumbnailMaxWidth = _ref.thumbnailMaxWidth,
      thumbnailMaxHeight = _ref.thumbnailMaxHeight,
      enableThumbnails = _ref.enableThumbnails,
      logger = _ref.logger;

  var fileType = type || file.type;

  if (!fileType || !fileType.startsWith('image')) {
    return _promise2.default.resolve();
  }

  var fileDimensions = new _promise2.default(function (resolve, reject) {
    (0, _gm2.default)(file).size(function (err, size) {
      if (err) {
        reject(err);

        return;
      }

      resolve((0, _pick3.default)(size, 'width', 'height'));
    });
  });

  var thumbnail = void 0,
      thumbnailDimensions = void 0;

  if (enableThumbnails) {
    thumbnail = new _promise2.default(function (resolve, reject) {
      (0, _gm2.default)(file).resize(thumbnailMaxWidth, thumbnailMaxHeight).autoOrient().toBuffer('PNG', function (err, buffer) {
        if (err) {
          reject(err);

          return;
        }

        resolve(buffer);
      });
    });

    thumbnailDimensions = thumbnail.then(function (buffer) {
      return new _promise2.default(function (resolve, reject) {
        (0, _gm2.default)(buffer).size(function (err, size) {
          if (err) {
            reject(err);

            return;
          }

          resolve((0, _pick3.default)(size, 'width', 'height'));
        });
      });
    });
  }

  return _promise2.default.all([thumbnail, fileDimensions, thumbnailDimensions]).catch(function (err) {
    var errorString = err.toString();

    if (errorString.includes('EPIPE')) {
      logger.warn(err, 'Is GraphicsMagick installed?');

      return _promise2.default.resolve();
    }

    if (errorString.includes('No decode delegate for this image format')) {
      logger.debug(err, 'File does not appear to be an image');

      return _promise2.default.resolve();
    }

    if (errorString.includes('Stream yields empty buffer')) {
      logger.debug(err, 'File does not appear to be an image');

      return _promise2.default.resolve();
    }

    return _promise2.default.reject(err);
  });
} /*!
   * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
   */
//# sourceMappingURL=process-image.js.map
