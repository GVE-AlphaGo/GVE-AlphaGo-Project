{"version":3,"sources":["process-image.browser.js"],"names":["processImage","computeDimensions","maxWidth","maxHeight","width","height","file","type","thumbnailMaxWidth","thumbnailMaxHeight","enableThumbnails","logger","isAvatar","startsWith","resolve","Blob","reject","img","Image","onload","onerror","src","URL","createObjectURL","then","fileDimensions","info","size","thumbnailDimensions","canvas","document","createElement","ctx","getContext","orientation","image","x","y","parts","toDataURL","split","byteString","atob","buffer","ArrayBuffer","length","view","DataView","i","setUint8","charCodeAt"],"mappings":"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","file":"process-image.browser.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {pick} from 'lodash';\nimport {orient} from './index';\n/* eslint-env browser */\n\n/**\n * Determins the dimensions of an image\n * @param {Object} constraints\n * @param {Number} constraints.width\n * @param {Number} constraints.height\n * @param {Number} maxWidth\n * @param {Number} maxHeight\n * @returns {Object}\n */\nfunction computeDimensions({width, height}, maxWidth, maxHeight) {\n  if (height > width) {\n    if (height > maxHeight) {\n      width = width * maxHeight / height;\n      height = maxHeight;\n    }\n\n    if (width > maxWidth) {\n      height = height * maxWidth / width;\n      width = maxWidth;\n    }\n  }\n  else {\n    if (width > maxWidth) {\n      height = height * maxWidth / width;\n      width = maxWidth;\n    }\n\n    if (height > maxHeight) {\n      width = width * maxHeight / height;\n      height = maxHeight;\n    }\n  }\n\n  return {height, width};\n}\n\n/**\n * Measures an image file and produces a thumbnail for it\n * @param {Object} options\n * @param {Blob|ArrayBuffer} options.file\n * @param {Number} options.thumbnailMaxWidth\n * @param {Number} options.thumbnailMaxHeight\n * @param {Boolean} options.enableThumbnails\n * @param {Object} options.logger\n * @param {Boolean} options.isAvatar\n * @returns {Promise<Array>} Buffer, Dimensions, thumbnailDimensions\n */\nexport default function processImage({\n  file, type, thumbnailMaxWidth, thumbnailMaxHeight, enableThumbnails, logger, isAvatar\n}) {\n  if (!type || !type.startsWith('image')) {\n    return Promise.resolve();\n  }\n\n  file = file instanceof Blob ? file : new Blob([file]);\n\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n\n    img.onload = function onload() {\n      resolve(img);\n    };\n    img.onerror = reject;\n    img.src = URL.createObjectURL(file);\n  })\n    .then((img) => {\n      const fileDimensions = pick(img, 'height', 'width');\n\n      if (isAvatar) { // only if image is a profile avatar\n        logger.info('dimensions will be set for avatar image');\n        const size = fileDimensions.height > fileDimensions.width ? fileDimensions.height : fileDimensions.width;\n\n        fileDimensions.height = size;\n        fileDimensions.width = size;\n      }\n      if (!enableThumbnails) {\n        logger.info('thumbnails not enabled');\n\n        return [null, fileDimensions, null];\n      }\n      const thumbnailDimensions = computeDimensions(fileDimensions, thumbnailMaxWidth, thumbnailMaxHeight);\n\n      const canvas = document.createElement('canvas');\n\n      canvas.width = thumbnailDimensions.width;\n      canvas.height = thumbnailDimensions.height;\n\n      const ctx = canvas.getContext('2d');\n\n      orient(\n        {\n          orientation: file && file.image ? file.image.orientation : '',\n          img,\n          x: 0,\n          y: 0,\n          width: thumbnailDimensions.width,\n          height: thumbnailDimensions.height,\n          ctx\n        },\n        file\n      );\n      const parts = canvas.toDataURL('image/png').split(',');\n      // Thumbnail uploads were failing with common/base64 decoding\n      const byteString = atob(parts[1]);\n\n      const buffer = new ArrayBuffer(byteString.length);\n      const view = new DataView(buffer);\n\n      for (let i = 0; i < byteString.length; i += 1) {\n        view.setUint8(i, byteString.charCodeAt(i));\n      }\n\n      return [buffer, fileDimensions, thumbnailDimensions];\n    });\n}\n"]}