{"version":3,"sources":["call-diagnostic-events-batcher.js"],"names":["CallDiagnosticEventsBatcher","Batcher","extend","namespace","prepareItem","item","origin","buildType","process","env","NODE_ENV","networkType","eventPayload","resolve","prepareRequest","queue","forEach","originTime","sent","Date","toISOString","submitHttpRequest","payload","webex","request","method","service","resource","body","metrics"],"mappings":";;;;;;;;;;;;;;AAIA;;;;;;AAEA,IAAMA,8BAA8BC,kBAAQC,MAAR,CAAe;AACjDC,aAAW,SADsC;;AAGjDC,aAHiD,uBAGrCC,IAHqC,EAG/B;AAChB;AACA;AACA,QAAMC,SAAS;AACbC,iBAAWC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,MAAxC,GAAiD,MAD/C;AAEbC,mBAAa;AAFA,KAAf;;AAKAN,SAAKO,YAAL,CAAkBN,MAAlB,GAA2B,sBAAcA,MAAd,EAAsBD,KAAKO,YAAL,CAAkBN,MAAxC,CAA3B;;AAEA,WAAO,kBAAQO,OAAR,CAAgBR,IAAhB,CAAP;AACD,GAdgD;AAgBjDS,gBAhBiD,0BAgBlCC,KAhBkC,EAgB3B;AACpB;AACAA,UAAMC,OAAN,CAAc,UAACX,IAAD,EAAU;AACtBA,WAAKO,YAAL,CAAkBK,UAAlB,GAA+BZ,KAAKO,YAAL,CAAkBK,UAAlB,IAAgC,EAA/D;AACAZ,WAAKO,YAAL,CAAkBK,UAAlB,CAA6BC,IAA7B,GAAoC,IAAIC,IAAJ,GAAWC,WAAX,EAApC;AACD,KAHD;;AAKA,WAAO,kBAAQP,OAAR,CAAgBE,KAAhB,CAAP;AACD,GAxBgD;AA0BjDM,mBA1BiD,6BA0B/BC,OA1B+B,EA0BtB;AACzB,WAAO,KAAKC,KAAL,CAAWC,OAAX,CAAmB;AACxBC,cAAQ,MADgB;AAExBC,eAAS,SAFe;AAGxBC,gBAAU,eAHc;AAIxBC,YAAM;AACJC,iBAASP;AADL;AAJkB,KAAnB,CAAP;AAQD;AAnCgD,CAAf,CAApC,C,CANA;;;;kBA4CetB,2B","file":"call-diagnostic-events-batcher.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport Batcher from './batcher';\n\nconst CallDiagnosticEventsBatcher = Batcher.extend({\n  namespace: 'Metrics',\n\n  prepareItem(item) {\n    // networkType should be a enum value: `wifi`, `ethernet`, `cellular`, or `unknown`.\n    // Browsers cannot provide such information right now. However, it is a required field.\n    const origin = {\n      buildType: process.env.NODE_ENV === 'production' ? 'prod' : 'test',\n      networkType: 'unknown'\n    };\n\n    item.eventPayload.origin = Object.assign(origin, item.eventPayload.origin);\n\n    return Promise.resolve(item);\n  },\n\n  prepareRequest(queue) {\n    // Add sent timestamp\n    queue.forEach((item) => {\n      item.eventPayload.originTime = item.eventPayload.originTime || {};\n      item.eventPayload.originTime.sent = new Date().toISOString();\n    });\n\n    return Promise.resolve(queue);\n  },\n\n  submitHttpRequest(payload) {\n    return this.webex.request({\n      method: 'POST',\n      service: 'metrics',\n      resource: 'clientmetrics',\n      body: {\n        metrics: payload\n      }\n    });\n  }\n});\n\nexport default CallDiagnosticEventsBatcher;\n"]}