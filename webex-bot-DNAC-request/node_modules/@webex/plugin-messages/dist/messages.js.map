{"version":3,"sources":["messages.js"],"names":["debug","require","Messages","WebexPlugin","extend","initialize","args","prototype","listen","webex","SDK_EVENT","EXTERNAL","RESOURCE","MESSAGES","then","envelope","eventEnvelope","internal","mercury","connect","listenTo","INTERNAL","TEAMS_ACTIVITY","event","onWebexApiEvent","create","message","key","file","logger","warn","files","reduce","type","options","method","service","resource","request","res","body","get","id","items","list","qs","Page","remove","statusCode","undefined","activity","data","verb","ACTIVITY_VERB","SHARE","POST","createdEvent","getMessageEvent","EVENT_TYPE","CREATED","trigger","DELETE","deletedEvent","DELETED","sdkEvent","created","published","actorId","hydraTypes","PEOPLE","actor","entryUUID","roomType","target","tags","includes","ACTIVITY_TAG","ONE_ON_ONE","SPACE_TYPE","DIRECT","GROUP","roomId","ROOM","personId","personEmail","emailAddress","entryEmail","object","content","displayName","cards","text","MESSAGE","markdown","length","attachments","card","push","contentType","ATTACHMENTS","CARD_CONTENT_TYPE","JSON","parse","parent","parentId","e","error"],"mappings":"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","file":"messages.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {\n  SDK_EVENT,\n  createEventEnvelope,\n  constructHydraId,\n  getHydraFiles,\n  hydraTypes\n} from '@webex/common';\nimport {\n  Page,\n  WebexPlugin\n} from '@webex/webex-core';\nimport {isArray, cloneDeep} from 'lodash';\n\nconst debug = require('debug')('messages');\n\n/**\n * @typedef {Object} MessageObject\n * @property {string} id - (server generated) Unique identifier for the message\n * @property {string} personId - The ID for the author of the messasge\n * @property {email} personEmail - The email for the author of the messasge\n * @property {string} roomId - The ID for the room of the message\n * @property {string} text - The message posted to the room in plain text\n * @property {string} markdown - The message posted to the room in markdown\n * @property {Array<string>} files - The source URL(s) for the message attachment(s).\n * See the {@link https://developer.webex.com/attachments.html|Message Attachments}\n * Guide for a list of supported media types.\n * @property {isoDate} created - (server generated) The date and time that the message was created\n */\n\n/**\n * Messages are how people communicate in rooms. Each message timestamped and\n * represented in Webex as a distinct block of content. Messages can contain\n * plain text and a single file attachment. See the\n * {@link https://developer.webex.com/attachments.html|Message Attachments} Guide\n * for a list of supported media types.\n * @class\n */\nconst Messages = WebexPlugin.extend({\n  /**\n   * Initializer used to generate Messages\n   * as a plugin wrapped around the provided arguments.\n   * @private\n   * @see WebexPlugin.initialize\n   * @param  {...any} args\n   * @returns {undefined}\n   */\n  initialize(...args) {\n    Reflect.apply(WebexPlugin.prototype.initialize, this, args);\n  },\n\n  /**\n   * Register to listen for incoming messages events\n   * This is an alternate approach to registering for messages webhooks.\n   * The events passed to any registered handlers will be similar to the webhook JSON,\n   * but will omit webhook specific fields such as name, secret, url, etc.\n   * The messages.listen() event objects can also include additional fields not\n   * available in the webhook's JSON payload: `text`, `markdown`, and `files`.\n   * These fields are available when their details are included in the web socket's\n   * `activity` object. Retrieving other fields, such as the `html` field,\n   * will require a manual request to get the corresponding message object.\n   * To utilize the `listen()` method, the authorization token used\n   * will need to have `spark:all` and `spark:kms` scopes enabled.\n   * Note that by configuring your application to enable or disable `spark:all`\n   * via its configuration page will also enable or disable `spark:kms`.\n   * See the <a href=\"https://js.samples.s4d.io/browser-socket/\">Sample App</a>\n   * for more details.\n   * @instance\n   * @memberof Messages\n   * @returns {Promise}\n   * @example\n   * webex.messages.listen()\n   *   .then(() => {\n   *     console.log('listening to message events');\n   *     webex.messages.on('created', (event) => console.log(`Got a message:created event:\\n${event}`);\n   *     webex.messages.on('deleted', (event) => console.log(`Got a message:deleted event:\\n${event}`);\n   *   })\n   *   .catch((e) => console.error(`Unable to register for message events: ${e}`));\n   * // Some app logic...\n   * // WHen it is time to cleanup\n   * webex.messages.stopListening();\n   * webex.messages.off('created');\n   * webex.messages.off('deleted');\n   */\n  listen() {\n    // Create a common envelope that we will wrap all events in\n    return createEventEnvelope(this.webex,\n      SDK_EVENT.EXTERNAL.RESOURCE.MESSAGES)\n      .then((envelope) => {\n        this.eventEnvelope = envelope;\n\n        // Register to listen to events\n        return this.webex.internal.mercury.connect().then(() => {\n          this.listenTo(this.webex.internal.mercury,\n            SDK_EVENT.INTERNAL.TEAMS_ACTIVITY,\n            (event) => this.onWebexApiEvent(event));\n        });\n      });\n  },\n\n  /**\n   * Post a new message and/or media content into a room.\n   * @instance\n   * @memberof Messages\n   * @param {MessageObject} message\n   * @returns {Promise<MessageObject>}\n   * @example\n   * webex.rooms.create({title: 'Create Message Example'})\n   *   .then(function(room) {\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(message) {\n   *     var assert = require('assert');\n   *     assert(message.id);\n   *     assert(message.personId);\n   *     assert(message.personEmail);\n   *     assert(message.roomId);\n   *     assert(message.created);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  create(message) {\n    let key = 'body';\n\n    if (message.file) {\n      this.logger.warn('Supplying a single `file` property is deprecated; please supply a `files` array');\n      message.files = [message.file];\n      Reflect.deleteProperty(message, 'file');\n    }\n\n    if (isArray(message.files) && message.files.reduce((type, file) => type || typeof file !== 'string', false)) {\n      key = 'formData';\n    }\n\n    const options = {\n      method: 'POST',\n      service: 'hydra',\n      resource: 'messages',\n      [key]: message\n    };\n\n    return this.request(options)\n      .then((res) => res.body);\n  },\n\n  /**\n   * Returns a single message.\n   * @instance\n   * @memberof Messages\n   * @param {RoomObject|string} message\n   * @returns {Promise<MessageObject>}\n   * @example\n   * var message;\n   * webex.rooms.create({title: 'Get Message Example'})\n   *   .then(function(room) {\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message = m;\n   *     return webex.messages.get(message.id);\n   *   })\n   *   .then(function(message2) {\n   *     var assert = require('assert');\n   *     assert.deepEqual(message2, message);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  get(message) {\n    const id = message.id || message;\n\n    return this.request({\n      service: 'hydra',\n      resource: `messages/${id}`\n    })\n      .then((res) => res.body.items || res.body);\n  },\n\n  /**\n   * Returns a list of messages. In most cases the results will only contain\n   * messages posted in rooms that the authentiated user is a member of.\n   * @instance\n   * @memberof Messages\n   * @param {Object} options\n   * @param {string} options.roomId\n   * @param {number} options.max\n   * @returns {Promise<Page<MessageObject>>}\n   * @example\n   * var message1, message2, room;\n   * webex.rooms.create({title: 'List Messages Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message1 = m;\n   *     return webex.messages.create({\n   *       text: 'How are you?',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message2 = m;\n   *     return webex.messages.list({roomId: room.id});\n   *   })\n   *   .then(function(messages) {\n   *     var assert = require('assert');\n   *     assert.equal(messages.length, 2);\n   *     assert.equal(messages.items[0].id, message2.id);\n   *     assert.equal(messages.items[1].id, message1.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  list(options) {\n    return this.request({\n      service: 'hydra',\n      resource: 'messages',\n      qs: options\n    })\n      .then((res) => new Page(res, this.webex));\n  },\n\n  /**\n   * Deletes a single message. Deleting a message will notify all members of the\n   * room that the authenticated user deleted the message. Generally, users can\n   * only delete their own messages except for the case of Moderated Rooms and\n   * Org Administrators.\n   * @instance\n   * @memberof Messages\n   * @param {MessageObject|uuid} message\n   * @returns {Promise}}\n   * @example\n   * var message1, room;\n   * webex.rooms.create({title: 'Messages Example'})\n   *   .then(function(r) {\n   *     room = r;\n   *     return webex.messages.create({\n   *       text: 'Howdy!',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function(m) {\n   *     message1 = m;\n   *     return webex.messages.create({\n   *       text: 'How are you?',\n   *       roomId: room.id\n   *     });\n   *   })\n   *   .then(function() {\n   *     return webex.messages.remove(message1);\n   *   })\n   *   .then(function() {\n   *     return webex.messages.list({roomId: room.id});\n   *   })\n   *   .then(function(messages) {\n   *     var assert = require('assert');\n   *     assert.equal(messages.items.length, 1);\n   *     assert(messages.items[0].id !== message1.id);\n   *     return 'success';\n   *   });\n   *   // => success\n   */\n  remove(message) {\n    const id = message.id || message;\n\n    return this.request({\n      method: 'DELETE',\n      service: 'hydra',\n      resource: `messages/${id}`\n    })\n      .then((res) => {\n        // Firefox has some issues with 204s and/or DELETE. This should move to\n        // http-core\n        if (res.statusCode === 204) {\n          return undefined;\n        }\n\n        return res.body;\n      });\n  },\n\n  /**\n   * This function is called when an internal membership events fires,\n   * if the user registered for these events with the listen() function.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Messages\n   * @param {Object} event\n   * @returns {void}\n   */\n  onWebexApiEvent(event) {\n    const {activity} = event.data;\n\n    /* eslint-disable no-case-declarations */\n    switch (activity.verb) {\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.SHARE:\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.POST:\n        const createdEvent = this.getMessageEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED);\n\n        if (createdEvent) {\n          debug(`messages \"created\" payload: \\\n            ${JSON.stringify(createdEvent)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.CREATED, createdEvent);\n        }\n        break;\n\n      case SDK_EVENT.INTERNAL.ACTIVITY_VERB.DELETE:\n        const deletedEvent = this.getMessageEvent(activity, SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED);\n\n        if (deletedEvent) {\n          debug(`messages \"deleted\" payload: \\\n            ${JSON.stringify(deletedEvent)}`);\n          this.trigger(SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED, deletedEvent);\n        }\n        break;\n\n      default: {\n        break;\n      }\n    }\n  },\n\n  /**\n   * Constructs the data object for an event on the messages resource,\n   * adhering to Hydra's Webehook data structure messages.\n   * External users of the SDK should not call this function\n   * @private\n   * @memberof Messages\n   * @param {Object} activity from mercury\n   * @param {Object} event type of \"webhook\" event\n   * @returns {Object} constructed event\n   */\n  getMessageEvent(activity, event) {\n    try {\n      const sdkEvent = cloneDeep(this.eventEnvelope);\n\n      sdkEvent.event = event;\n      sdkEvent.data.created = activity.published;\n      sdkEvent.actorId = constructHydraId(hydraTypes.PEOPLE, activity.actor.entryUUID);\n      sdkEvent.data.roomType =\n        activity.target.tags.includes(SDK_EVENT.INTERNAL.ACTIVITY_TAG.ONE_ON_ONE) ?\n          SDK_EVENT.EXTERNAL.SPACE_TYPE.DIRECT :\n          SDK_EVENT.EXTERNAL.SPACE_TYPE.GROUP;\n      sdkEvent.data.roomId =\n        constructHydraId(hydraTypes.ROOM, activity.target.id);\n      sdkEvent.data.personId =\n        constructHydraId(hydraTypes.PEOPLE, activity.actor.entryUUID);\n      sdkEvent.data.personEmail =\n        activity.actor.emailAddress || activity.actor.entryEmail;\n\n      if (event !== SDK_EVENT.EXTERNAL.EVENT_TYPE.DELETED) {\n        const {content, displayName, cards} = activity.object;\n        const text = content || displayName;\n        const files = getHydraFiles(activity);\n\n        sdkEvent.data.id = constructHydraId(hydraTypes.MESSAGE, activity.id);\n        if (text) {\n          sdkEvent.data.text = text;\n        }\n        if (displayName && displayName !== sdkEvent.data.text) {\n          sdkEvent.data.markdown = displayName;\n        }\n        if (files && files.length) {\n          sdkEvent.data.files = files;\n        }\n        if (cards && cards.length) {\n          sdkEvent.data.attachments = [];\n          for (const card of cards) {\n            sdkEvent.data.attachments.push({\n              contentType: SDK_EVENT.EXTERNAL.ATTACHMENTS.CARD_CONTENT_TYPE,\n              content: JSON.parse(card)\n            });\n          }\n        }\n        if (activity.parent && activity.parent.id) {\n          sdkEvent.data.parentId = constructHydraId(hydraTypes.MESSAGE, activity.parent.id);\n        }\n      }\n      else {\n        sdkEvent.data.id =\n          constructHydraId(hydraTypes.MESSAGE, activity.object.id);\n      }\n\n      return sdkEvent;\n    }\n    catch (e) {\n      this.webex.logger.error(`Unable to generate SDK event from mercury \\\n'socket activity for message:${event} event: ${e.message}`);\n\n      return null;\n    }\n  }\n\n});\n\nexport default Messages;\n"]}