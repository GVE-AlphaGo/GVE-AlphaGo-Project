{"version":3,"sources":["collection.js"],"names":["CalendarCollection","namespace","CALENDAR","items","get","id","getBy","key","value","item","set","itemId","meeting","CalendarUtil","calculateEndTime","reset","remove","setAll","forEach","getAll"],"mappings":";;;;;;;;;;;;;;AAEA;;;;AACA;;;;AACA;;;AAGA,IAAMA,qBAAqB;AACzBC,aAAWC,mBADc;AAEzBC,SAAO,EAFkB;AAGzB;;;;;;AAMAC,KATyB,eASrBC,EATqB,EASjB;AACN,WAAO,KAAKF,KAAL,CAAWE,EAAX,CAAP;AACD,GAXwB;;;AAazB;;;;;;;AAOAC,OApByB,iBAoBnBC,GApBmB,EAoBdC,KApBc,EAoBP;AAChB,QAAID,OAAOC,KAAX,EAAkB;AAChB,aAAO,oBAAK,KAAKL,KAAV,EAAiB,UAACM,IAAD;AAAA,eAAWA,KAAKF,GAAL,MAAcC,KAAzB;AAAA,OAAjB,CAAP;AACD;;AAED,WAAO,IAAP;AACD,GA1BwB;;;AA4BzB;;;;;;AAMAE,KAlCyB,eAkCrBD,IAlCqB,EAkCf;AACR,QAAME,SAASF,KAAKJ,EAApB;AACA,QAAMO,UAAUC,eAAaC,gBAAb,CAA8BL,IAA9B,CAAhB;;AAEA,SAAKN,KAAL,CAAWQ,MAAX,IAAqBC,OAArB;;AAEA,WAAOD,MAAP;AACD,GAzCwB;;;AA2CzB;;;;;;AAMAI,OAjDyB,mBAiDjB;AACN,SAAKZ,KAAL,GAAa,EAAb;AACD,GAnDwB;;;AAsDzB;;;;;;AAMAa,QA5DyB,kBA4DlBX,EA5DkB,EA4Dd;AACT,QAAMO,UAAU,KAAKR,GAAL,CAASC,EAAT,CAAhB;;AAEA,WAAO,KAAKF,KAAL,CAAWE,EAAX,CAAP;;AAEA,WAAOO,OAAP;AACD,GAlEwB;;;AAoEzB;;;;;;;AAOAK,QA3EyB,kBA2ElBd,KA3EkB,EA2EX;AAAA;;AACZA,UAAMe,OAAN,CAAc,UAACT,IAAD,EAAU;AACtB,YAAKC,GAAL,CAASD,IAAT;AACD,KAFD;AAGD,GA/EwB;;;AAiFzB;;;;;;;AAOAU,QAxFyB,oBAwFhB;AACP,WAAO,sBAAc,KAAKhB,KAAnB,CAAP;AACD;AA1FwB,CAA3B;;kBA8FeH,kB","file":"collection.js","sourcesContent":["import {find} from 'lodash';\n\nimport CalendarUtil from './util';\nimport {CALENDAR} from './constants';\n/**\n * @class CalendarCollection\n */\nconst CalendarCollection = {\n  namespace: CALENDAR,\n  items: {},\n  /**\n   * @param {String} id calendar ID\n   * @returns {Any} Calendar Item specifc to that id\n   * @private\n   * @memberof CalendarCollection\n   */\n  get(id) {\n    return this.items[id];\n  },\n\n  /**\n   * @param {String} key any key and the corresponding calendar Item\n   * @param {String} value any values corresponding to calendar item\n   * @returns {Any} returns whatever is being stuffed into the collection\n   * @private\n   * @memberof CalendarCollection\n   */\n  getBy(key, value) {\n    if (key && value) {\n      return find(this.items, (item) => (item[key] === value));\n    }\n\n    return null;\n  },\n\n  /**\n   * @param {Object} item CalendarObject passed to the collection\n   * @returns {Any} returns calender id whats get set\n   * @private\n   * @memberof CalendarCollection\n   */\n  set(item) {\n    const itemId = item.id;\n    const meeting = CalendarUtil.calculateEndTime(item);\n\n    this.items[itemId] = meeting;\n\n    return itemId;\n  },\n\n  /**\n   * resets all the values in the calendarcollection\n   * @returns {undefined}\n   * @private\n   * @memberof CalendarCollection\n   */\n  reset() {\n    this.items = {};\n  },\n\n\n  /**\n   * @param {Id} id is the id for the calendar item to be removed\n   * @returns {Any} calendar item which got removed\n   * @private\n   * @memberof CalendarCollection\n   */\n  remove(id) {\n    const meeting = this.get(id);\n\n    delete this.items[id];\n\n    return meeting;\n  },\n\n  /**\n   * sets all the item passed to the collection\n   * @param {Array} items array of calendar items\n   * @private\n   * @returns {undefined}\n   * @memberof CalendarCollection\n   */\n  setAll(items) {\n    items.forEach((item) => {\n      this.set(item);\n    });\n  },\n\n  /**\n   * gets all the calendar stored in the collection\n   * @param {Array} items array of calendar items\n   * @private\n   * @returns {Array} returns an array of calendar items\n   * @memberof CalendarCollection\n   */\n  getAll() {\n    return Object.values(this.items);\n  }\n\n};\n\nexport default CalendarCollection;\n"]}