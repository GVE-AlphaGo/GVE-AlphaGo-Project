{"version":3,"sources":["calendar.js"],"names":["Calendar","WebexPlugin","extend","namespace","registered","register","webex","canAuthorize","logger","error","reject","Error","info","resolve","internal","device","then","mercury","connect","listenForEvents","trigger","CALENDAR_REGISTERED","catch","message","unregister","stopListeningForEvents","disconnect","CALENDAR_UNREGISTERED","on","envelope","_handleCreate","data","_handleUpdate","_handleDelete","off","id","CalendarCollection","set","calendarMeetingExternal","CALENDAR_UPDATED","get","CALENDAR_CREATE","item","remove","CALENDAR_DELETE","syncCalendar","options","fromDate","config","toDate","list","res","setAll","getAll","getByType","key","value","includes","getBy","processMeetingEvent","event","transform","getParticipants","request","method","service","resource","getNotes","qs","meetingObjects","body","items","promises","forEach","meeting","encryptedNotes","push","notesResponse","encryptedParticipants","all"],"mappings":"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","file":"calendar.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n/**\n   * Calendar Item Create Event\n   * Emitted when a calendar item has been added\n   * @event calendar:meeting:create\n   * @instance\n   * @memberof Calendar\n   */\n\n/**\n   * Calendar Item Update Event\n   * Emitted when a calendar item has been updated\n   * @event calendar:meeting:update\n   * @instance\n   * @memberof Calendar\n   */\n\n/**\n   * Calendar Item Update Event\n   * Emitted when a calendar item has been deleted\n   * @event calendar:meeting:delete\n   * @instance\n   * @memberof Calendar\n   */\n\n/**\n * Calendar Registered Event\n * Emitted when the calendar instance has been registered and listening\n * @event calendar:registered\n * @instance\n * @memberof Calendar\n */\n\n/**\n * Calendar Registered Event\n * Emitted when the calendar instance has been registered and listening\n * @event calendar:unregistered\n * @instance\n * @memberof Calendar\n */\n\nimport btoa from 'btoa';\nimport {WebexPlugin} from '@webex/webex-core';\n\nimport CalendarCollection from './collection';\nimport {CALENDAR_REGISTERED, CALENDAR_UNREGISTERED, CALENDAR_DELETE, CALENDAR_CREATE, CALENDAR_UPDATED} from './constants';\n\nconst Calendar = WebexPlugin.extend({\n  namespace: 'Calendar',\n\n  /**\n   * registered value indicating events registration is successful\n   * @instance\n   * @type {Boolean}\n   * @memberof Calendar\n   */\n  registered: false,\n\n  /**\n   * Explicitly sets up the calendar plugin by registering\n   * the device, connecting to mercury, and listening for calendar events.\n   * @returns {Promise}\n   * @public\n   * @memberof Calendar\n   */\n  register() {\n    if (!this.webex.canAuthorize) {\n      this.logger.error('calendar->register#ERROR, Unable to register, SDK cannot authorize');\n\n      return Promise.reject(new Error('SDK cannot authorize'));\n    }\n\n    if (this.registered) {\n      this.logger.info('calendar->register#INFO, Calendar plugin already registered');\n\n      return Promise.resolve();\n    }\n\n    return this.webex.internal.device.register()\n      .then(() => this.webex.internal.mercury.connect())\n      .then(() => {\n        this.listenForEvents();\n        this.trigger(CALENDAR_REGISTERED);\n        this.registered = true;\n      })\n      .catch((error) => {\n        this.logger.error(`calendar->register#ERROR, Unable to register, ${error.message}`);\n\n        return Promise.reject(error);\n      });\n  },\n\n  /**\n   * Explicitly tears down the calendar plugin by deregistering\n   * the device, disconnecting from mercury, and stops listening to calendar events\n   *\n   * @returns {Promise}\n   * @public\n   * @memberof Calendar\n   */\n  unregister() {\n    if (!this.registered) {\n      this.logger.info('calendar->unregister#INFO, Calendar plugin already unregistered');\n\n      return Promise.resolve();\n    }\n\n    this.stopListeningForEvents();\n\n    return this.webex.internal.mercury.disconnect()\n      .then(() => this.webex.internal.device.unregister())\n      .then(() => {\n        this.trigger(CALENDAR_UNREGISTERED);\n        this.registered = false;\n      });\n  },\n\n  /**\n   * registers for calendar events through mercury\n   * @returns {undefined}\n   * @private\n   */\n  listenForEvents() {\n    // Calendar mercury events listener\n    this.webex.internal.mercury.on('event:calendar.meeting.create', (envelope) => {\n      this._handleCreate(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.meeting.update', (envelope) => {\n      this._handleUpdate(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.meeting.create.minimal', (envelope) => {\n      this._handleCreate(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.meeting.update.minimal', (envelope) => {\n      this._handleUpdate(envelope.data);\n    });\n    this.webex.internal.mercury.on('event:calendar.meeting.delete', (envelope) => {\n      this._handleDelete(envelope.data);\n    });\n  },\n\n  /**\n   * unregisteres all the calendar events from mercury\n   * @returns {undefined}\n   * @private\n   */\n  stopListeningForEvents() {\n    this.webex.internal.mercury.off('event:calendar.meeting.create');\n    this.webex.internal.mercury.off('event:calendar.meeting.create.minimal');\n    this.webex.internal.mercury.off('event:calendar.meeting.update');\n    this.webex.internal.mercury.off('event:calendar.meeting.update.minimal');\n    this.webex.internal.mercury.off('event:calendar.meeting.delete');\n  },\n\n  /**\n   * handles update events, triggers after collection updates\n   * @param {Object} data\n   * @returns {undefined}\n   * @private\n   */\n  _handleUpdate(data) {\n    const id = CalendarCollection.set(data.calendarMeetingExternal);\n\n    this.trigger(CALENDAR_UPDATED, CalendarCollection.get(id));\n  },\n\n  /**\n   * handles create events, triggers after collection updates\n   * @param {Object} data\n   * @returns {undefined}\n   * @private\n   */\n  _handleCreate(data) {\n    const id = CalendarCollection.set(data.calendarMeetingExternal);\n\n    this.trigger(CALENDAR_CREATE, CalendarCollection.get(id));\n  },\n\n  /**\n   * handles delete events, triggers after collection updates\n   * @param {Object} data\n   * @returns {undefined}\n   * @private\n   */\n  _handleDelete(data) {\n    const item = CalendarCollection.remove(data.calendarMeetingExternal.id);\n\n    this.trigger(CALENDAR_DELETE, item);\n  },\n\n  /**\n   * Retrieves a collection of calendars based on the request parameters\n   * Defaults to 1 day before and 7 days ahead\n   * @param {Object} options\n   * @param {Date} options.fromDate the start of the time range\n   * @param {Date} options.toDate the end of the time range\n   * @returns {Promise} Resolves with an array of calendars\n   */\n  syncCalendar(options = {fromDate: this.config.fromDate, toDate: this.config.toDate}) {\n    return this.list({fromDate: options.fromDate, toDate: options.toDate}).then((res) => {\n      CalendarCollection.setAll(res);\n\n      return CalendarCollection.getAll();\n    });\n  },\n  /**\n   * get the calendar item that has a matching value\n   * @param {String} key meeting property\n   * @param {Any} value the meeting property to match\n   * @returns {Object}\n   */\n  getByType(key, value) {\n    if (['spaceURI', 'spaceMeetURL', 'conversationId'].includes(key)) {\n      return CalendarCollection.getBy(key, value);\n    }\n    throw new Error('key must be one of, spaceURI, spaceMeetURL, or conversationId');\n  },\n\n  /**\n   * gets all the calendar items that have been populated\n   * @returns {Object}\n   */\n  getAll() {\n    return CalendarCollection.getAll();\n  },\n\n  /**\n   * Decrypts an encrypted incoming calendar event\n   * @param {Object} event\n   * @returns {Promise} Resolves with a decrypted calendar event\n   */\n  processMeetingEvent(event) {\n    return this.webex.transform('inbound', event)\n      .then(() => event);\n  },\n\n  /**\n   * Retrieves an array of meeting participants for the meeting id\n   * @param {String} id\n   * @returns {Promise} Resolves with an object of meeting participants\n   */\n  getParticipants(id) {\n    return this.request({\n      method: 'GET',\n      service: 'calendar',\n      resource: `calendarEvents/${btoa(id)}/participants`\n    });\n  },\n\n  /**\n   * Retrieves a collection of meetings based on the request parameters\n   * @param {String} id\n   * @returns {Promise} Resolves with an object of meeting notes\n   */\n  getNotes(id) {\n    return this.request({\n      method: 'GET',\n      service: 'calendar',\n      resource: `calendarEvents/${btoa(id)}/notes`\n    });\n  },\n\n  /**\n   * Retrieves a collection of meetings based on the request parameters\n   * @param {Object} options\n   * @param {Date} options.fromDate the start of the time range\n   * @param {Date} options.toDate the end of the time range\n   * @returns {Promise} Resolves with an array of meetings\n   */\n  list(options) {\n    options = options || {};\n\n    return this.webex.request({\n      method: 'GET',\n      service: 'calendar',\n      resource: 'calendarEvents',\n      qs: options\n    })\n      .then((res) => {\n        const meetingObjects = res.body.items;\n        const promises = [];\n\n        meetingObjects.forEach((meeting) => {\n          if (!meeting.encryptedNotes) {\n            promises.push(\n              this.getNotes(meeting.id)\n                .then((notesResponse) => {\n                  meeting.encryptedNotes = notesResponse.body && notesResponse.body.encryptedNotes;\n                })\n            );\n          }\n\n          if (!meeting.encryptedParticipants) {\n            promises.push(\n              this.getParticipants(meeting.id)\n                .then((notesResponse) => {\n                  meeting.encryptedParticipants = notesResponse.body.encryptedParticipants;\n                })\n            );\n          }\n        });\n\n        return Promise.all(promises)\n          .then(() => meetingObjects);\n      });\n  }\n});\n\nexport default Calendar;\n"]}