{"version":3,"sources":["conversation.js"],"names":["DEFAULT_CLUSTER","process","env","WEBEX_CONVERSATION_DEFAULT_CLUSTER","idToUrl","getConvoLimit","options","limit","conversationsLimit","value","name","Conversation","WebexPlugin","extend","namespace","getUrlFromClusterId","cluster","id","clusterId","webex","internal","services","getServiceFromClusterId","url","Error","acknowledge","conversation","object","activity","getConvoUrl","convoWithUrl","reject","prepare","verb","target","prepareConversation","objectType","then","a","submit","add","participant","user","asUUID","create","kmsMessage","method","uri","resourceUri","userIds","params","participants","length","all","map","catch","err","allowPartialCreation","undefined","unshift","device","userId","validParticipants","filter","forceGrouped","InvalidUserCreation","skipOneOnOneFetch","_createOneOnOne","_maybeCreateOneOnOneThenPost","_createGrouped","c","set","files","share","activities","items","push","delete","download","item","isEncrypted","Boolean","scr","key","shunt","EventEmitter","promise","encryption","loc","_downloadUnencryptedFile","on","args","emit","res","file","logger","info","displayName","type","mimeType","responseType","request","body","expand","actor","bulkActivitiesFetch","activityUrls","resource","api","activitiesArr","multistatus","forEach","statusData","status","data","get","qs","uuidEntryFormat","personRefresh","activitiesLimit","includeConvWithDeletedUserUUID","includeParticipants","resolve","service","_recordUUIDs","leave","querystring","stringify","authId","list","_list","deferDecrypt","results","convo","listLeft","listActivities","_listActivities","listMentions","muteMentions","tag","tags","muteMessages","cardAction","inputs","parentActivity","parent","post","message","act","clientTempId","uuid","v4","parentActivityId","activityType","split","pop","content","processActivityEvent","event","transform","removeAllMuteTags","untag","makeShare","ShareActivity","assign","avatar","size","enableThumbnails","conversations","generalConversationUuid","generalConvo","find","warn","relatedUrl","updateTypingStatus","eventType","typing","conversationId","endpoint","transcode","async","trigger","unassign","unmuteMentions","unmuteMessages","update","updateKey","_updateKey","kms","createUnboundKeys","count","keys","k","defaultActivityEncryptionKeyUrl","kmsResourceObjectUrl","startsWith","keyUris","_create","payload","forceCreate","_prepareConversationForCreation","getConversationUrl","convoUrl","waitForCatalog","error","_inferConversationUrl","feature","getFeature","haMessagingEnabled","NODE_ENV","conversationUrl","participantsLimit","slice","published","reverse","additionalUrls","Math","floor","host","newOptions","result","concat","comment","html","reason","statusCode","recordUUID","prototype","submitSimpleActivity","submitModerationChangeActivity","moderator","fnName","submitSpacePropertyActivity","submitObjectActivity"],"mappings":"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","file":"conversation.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport querystring from 'querystring';\nimport {EventEmitter} from 'events';\n\nimport {proxyEvents, tap} from '@webex/common';\nimport {WebexPlugin} from '@webex/webex-core';\nimport {cloneDeep, defaults, isArray, isObject, isString, last, map, merge, omit, pick, uniq} from 'lodash';\nimport {readExifData} from '@webex/helper-image';\nimport uuid from 'uuid';\n\nimport {InvalidUserCreation} from './convo-error';\nimport ShareActivity from './share-activity';\n\nconst DEFAULT_CLUSTER =\n  process.env.WEBEX_CONVERSATION_DEFAULT_CLUSTER ||\n  'urn:TEAM:us-east-2_a:identityLookup';\n\nconst idToUrl = new Map();\n\nconst getConvoLimit = (options = {}) => {\n  let limit;\n\n  if (options.conversationsLimit) {\n    limit = {\n      value: options.conversationsLimit,\n      name: 'conversationsLimit'\n    };\n  }\n\n  return limit;\n};\n\nconst Conversation = WebexPlugin.extend({\n  namespace: 'Conversation',\n\n  /**\n   * @param {String} cluster the cluster containing the id\n   * @param {UUID} [id] the id of the conversation.\n   *  If empty, just return the base URL.\n   * @returns {String} url of the conversation\n   */\n  getUrlFromClusterId({cluster = 'us', id} = {}) {\n    const clusterId =\n      cluster === 'us' ? DEFAULT_CLUSTER : cluster;\n\n    const {url} = this.webex.internal.services\n      .getServiceFromClusterId({clusterId}) || {};\n\n    if (!url) {\n      throw Error(`Could not find service for cluster [${cluster}]`);\n    }\n\n    return id ? `${url}/conversations/${id}` : url;\n  },\n\n  /**\n   * @param {Object} conversation\n   * @param {Object} object\n   * @param {Object} activity\n   * @returns {Promise}\n   */\n  acknowledge(conversation, object, activity) {\n    const url = this.getConvoUrl(conversation);\n    const convoWithUrl = Object.assign({}, conversation, {url});\n\n    if (!isObject(object)) {\n      return Promise.reject(new Error('`object` must be an object'));\n    }\n\n    return this.prepare(activity, {\n      verb: 'acknowledge',\n      target: this.prepareConversation(convoWithUrl),\n      object: {\n        objectType: 'activity',\n        id: object.id,\n        url: object.url\n      }\n    })\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Adds a participant to a conversation\n   * @param {Object} conversation\n   * @param {Object|string} participant\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @returns {Promise<Activity>}\n   */\n  add(conversation, participant, activity) {\n    const url = this.getConvoUrl(conversation);\n    const convoWithUrl = Object.assign({}, conversation, {url});\n\n    return this.webex.internal.user.asUUID(participant, {create: true})\n      .then((id) => this.prepare(activity, {\n        verb: 'add',\n        target: this.prepareConversation(convoWithUrl),\n        object: {\n          id,\n          objectType: 'person'\n        },\n        kmsMessage: {\n          method: 'create',\n          uri: '/authorizations',\n          resourceUri: '<KRO>',\n          userIds: [\n            id\n          ]\n        }\n      })\n        .then((a) => this.submit(a)));\n  },\n\n  /**\n   * Creates a conversation\n   * @param {Object} params\n   * @param {Array<Participant>} params.participants\n   * @param {Array<File>} params.files\n   * @param {string} params.comment\n   * @param {string} params.html\n   * @param {Object} params.displayName\n   * @param {Object} options\n   * @param {Boolean} options.allowPartialCreation\n   * @param {Boolean} options.forceGrouped\n   * @param {Boolean} options.skipOneOnOneFetch skips checking 1:1 exists before creating conversation\n   * @returns {Promise<Conversation>}\n   */\n  create(params, options = {}) {\n    if (!params.participants || params.participants.length === 0) {\n      return Promise.reject(new Error('`params.participants` is required'));\n    }\n\n    return Promise.all(params.participants.map((participant) => this.webex.internal.user.asUUID(participant, {create: true})\n      // eslint-disable-next-line arrow-body-style\n      .catch((err) => {\n        return options.allowPartialCreation ? undefined : Promise.reject(err);\n      })))\n      .then((participants) => {\n        participants.unshift(this.webex.internal.device.userId);\n        participants = uniq(participants);\n\n        const validParticipants = participants.filter((participant) => participant);\n\n        params.participants = validParticipants;\n\n        // check if original participants list was to create a 1:1\n        if (participants.length === 2 && !(options && options.forceGrouped)) {\n          if (!params.participants[1]) {\n            return Promise.reject(new InvalidUserCreation());\n          }\n\n          if (options.skipOneOnOneFetch) {\n            return this._createOneOnOne(params);\n          }\n\n          return this._maybeCreateOneOnOneThenPost(params, options);\n        }\n\n        return this._createGrouped(params, options);\n      })\n      .then((c) => {\n        idToUrl.set(c.id, c.url);\n\n        if (!params.files) {\n          return c;\n        }\n\n        return this.webex.internal.conversation.share(c, params.files)\n          .then((a) => {\n            c.activities.items.push(a);\n\n            return c;\n          });\n      });\n  },\n\n  /**\n   * delete content\n   * @param {Object} conversation\n   * @param {Object} object\n   * @param {Object} activity\n   * @returns {Promise}\n   */\n  delete(conversation, object, activity) {\n    const url = this.getConvoUrl(conversation);\n    const convoWithUrl = Object.assign({}, conversation, {url});\n\n    if (!isObject(object)) {\n      return Promise.reject(new Error('`object` must be an object'));\n    }\n\n    return this.prepare(activity, {\n      verb: 'delete',\n      target: this.prepareConversation(convoWithUrl),\n      object: pick(object, 'id', 'url', 'objectType')\n    })\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Downloads the file specified in item.scr or item.url\n   * @param {Object} item\n   * @param {Object} item.scr\n   * @param {string} item.url\n   * @param {Object} options\n   * @param {Object} options.headers\n   * @returns {Promise<File>}\n   */\n  download(item, options) {\n    const isEncrypted = Boolean(item.scr && item.scr.key);\n    const shunt = new EventEmitter();\n    let promise;\n\n    if (isEncrypted) {\n      promise = this.webex.internal.encryption.download(item.scr, item.options);\n    }\n    else if (item.scr && item.scr.loc) {\n      promise = this._downloadUnencryptedFile(item.scr.loc, options);\n    }\n    else {\n      promise = this._downloadUnencryptedFile(item.url, options);\n    }\n\n    promise = promise\n      .on('progress', (...args) => shunt.emit('progress', ...args))\n      .then((res) => readExifData(item, res))\n      .then((file) => {\n        this.logger.info('conversation: file downloaded');\n\n        if (item.displayName && !file.name) {\n          file.name = item.displayName;\n        }\n\n        if (!file.type && item.mimeType) {\n          file.type = item.mimeType;\n        }\n\n        return file;\n      });\n\n    proxyEvents(shunt, promise);\n\n    return promise;\n  },\n\n  /**\n   * Downloads an unencrypted file\n   * @param {string} uri\n   * @param {Object} options\n   * @param {Ojbect} options.headers\n   * @returns {Promise<File>}\n   */\n  _downloadUnencryptedFile(uri, options = {}) {\n    Object.assign(options, {\n      uri,\n      responseType: 'buffer'\n    });\n\n    const promise = this.request(options)\n      .then((res) => res.body);\n\n    proxyEvents(options.download, promise);\n\n    return promise;\n  },\n\n  /**\n   * Helper method that expands a set of parameters into an activty object\n   * @param {string} verb\n   * @param {Object} object\n   * @param {Object} target\n   * @param {Object|string} actor\n   * @returns {Object}\n   */\n  expand(verb, object, target, actor) {\n    const activity = {\n      actor,\n      objectType: 'activity',\n      verb\n    };\n\n    if (!actor) {\n      actor = this.webex.internal.device.userId;\n    }\n\n    if (isString(actor)) {\n      activity.actor = {\n        objectType: 'person',\n        id: actor\n      };\n    }\n\n    if (object) {\n      activity.object = object;\n    }\n\n    if (target) {\n      activity.target = target;\n    }\n\n    return activity;\n  },\n\n  /**\n  * Gets an array of activities with an array of activity URLS\n  * @param {Array} activityUrls\n  * @param {String} [cluster] cluster where the activities are located\n  * @returns {Promise<Object>} Resolves with the activities\n  * TODO: add cluster functionality when clusters are ready\n  */\n  bulkActivitiesFetch(activityUrls, cluster) {\n    const resource = 'bulk_activities_fetch';\n    const params = {\n      method: 'POST',\n      body: {\n        activityUrls\n      }\n    };\n\n    if (cluster) {\n      const uri = `${this.getUrlFromClusterId({cluster})}/${resource}`;\n\n      Object.assign(params, {\n        uri\n      });\n    }\n    else {\n      Object.assign(params, {\n        api: 'conversation',\n        resource\n      });\n    }\n\n    return this.webex.request(params)\n      .then((res) => {\n        const activitiesArr = [];\n\n        if (res.body.multistatus) {\n          res.body.multistatus.forEach((statusData) => {\n            if (statusData.status === '200' && statusData.data && statusData.data.activity) {\n              activitiesArr.push(statusData.data.activity);\n            }\n          });\n        }\n\n        return activitiesArr;\n      });\n  },\n\n  /**\n   * Fetches a single conversation\n   * @param {Object} conversation\n   * @param {String} [conversation.url] The URL where the conversation is located.\n   * @param {String|UUID} [conversation.user] The user to look up in the conversation service\n   *   If specified, the user lookup will take precedence over the url lookup\n   * @param {Object} options\n   * @returns {Promise<Conversation>}\n   */\n  get(conversation, options = {}) {\n    const {user} = conversation;\n    let uri;\n\n    try {\n      uri = !user ? this.getConvoUrl(conversation) : '';\n    }\n    catch (err) {\n      return Promise.reject(Error(err));\n    }\n\n    const params = {\n      qs: Object.assign({\n        uuidEntryFormat: true,\n        personRefresh: true,\n        activitiesLimit: 0,\n        includeConvWithDeletedUserUUID: false,\n        includeParticipants: false\n      }, omit(options, 'id', 'user', 'url'))\n    };\n\n    // Default behavior is to set includeParticipants=false,\n    // which makes the payload lighter by removing participant info.\n    // If the caller explicitly sets the participantAckFilter or\n    // participantsLimit, we don't want that default setting.\n    if (('participantAckFilter' in options) || ('participantsLimit' in options)) {\n      delete params.qs.includeParticipants;\n    }\n\n    return Promise.resolve(user ? this.webex.internal.user.asUUID(user) : null)\n      .then((userId) => {\n        if (userId) {\n          Object.assign(params, {\n            service: 'conversation',\n            resource: `conversations/user/${userId}`\n          });\n        }\n        else {\n          params.uri = uri;\n        }\n\n        return this.request(params);\n      })\n      .then(tap(({body}) => {\n        const {id, url} = body;\n\n        this._recordUUIDs(body);\n        idToUrl.set(id, url);\n      }))\n      .then((res) => res.body);\n  },\n\n  /**\n   * Leaves the conversation or removes the specified user from the specified\n   * conversation\n   * @param {Object} conversation\n   * @param {Object|string} participant If not specified, defaults to current\n   * user\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @returns {Promise<Activity>}\n   */\n  leave(conversation, participant, activity) {\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    return Promise.resolve()\n      .then(() => {\n        if (!participant) {\n          participant = this.webex.internal.device.userId;\n        }\n\n        return this.webex.internal.user.asUUID(participant)\n          .then((id) => this.prepare(activity, {\n            verb: 'leave',\n            target: this.prepareConversation(convoWithUrl),\n            object: {\n              id,\n              objectType: 'person'\n            },\n            kmsMessage: {\n              method: 'delete',\n              uri: `<KRO>/authorizations?${querystring.stringify({authId: id})}`\n            }\n          }));\n      })\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Lists a set of conversations. By default does not fetch activities or\n   * participants\n   * @param {Object} options\n   * @param {boolean} options.deferDecrypt - when true, deferDecrypt tells the\n   * payload transformer to normalize (but not decrypt) each received\n   * conversation. Instead, the received conversations will each have a bound\n   * decrypt method that can be executed at the consumer's leisure\n   * @returns {Promise<Array<Conversation>>}\n   */\n  list(options) {\n    return this._list({\n      service: 'conversation',\n      resource: 'conversations',\n      qs: omit(options, 'deferDecrypt'),\n      deferDecrypt: options.deferDecrypt,\n      limit: getConvoLimit(options)\n    })\n      .then((results) => {\n        for (const convo of results) {\n          idToUrl.set(convo.id, convo.url);\n        }\n\n        return results;\n      });\n  },\n\n  /**\n   * Lists the conversations the current user has left. By default does not\n   * fetch activities or participants\n   * @param {Object} options\n   * @returns {Promise<Array<Conversation>>}\n   */\n  listLeft(options) {\n    return this._list({\n      service: 'conversation',\n      resource: 'conversations/left',\n      qs: options,\n      limit: getConvoLimit(options)\n    })\n      .then((results) => {\n        for (const convo of results) {\n          idToUrl.set(convo.id, convo.url);\n        }\n\n        return results;\n      });\n  },\n\n  /**\n   * List activities for the specified conversation\n   * @param {Object} options\n   * @param {String} options.conversationUrl URL to the conversation\n   * @returns {Promise<Array<Activity>>}\n   */\n  listActivities(options) {\n    return this._listActivities(Object.assign(options, {resource: 'activities'}));\n  },\n\n  /**\n   * Lists activities in which the current user was mentioned\n   * @param {Object} options\n   * @returns {Promise<Array<Activity>>}\n   */\n  listMentions(options) {\n    return this._list({\n      service: 'conversation',\n      resource: 'mentions',\n      qs: omit(options, 'mentions')\n    });\n  },\n\n  /**\n   * Mutes the mentions of a conversation\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  muteMentions(conversation, activity) {\n    return this.tag(conversation, {\n      tags: ['MENTION_NOTIFICATIONS_OFF']\n    }, activity);\n  },\n\n  /**\n   * Mutes the messages of a conversation\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  muteMessages(conversation, activity) {\n    return this.tag(conversation, {\n      tags: ['MESSAGE_NOTIFICATIONS_OFF']\n    }, activity);\n  },\n\n  /**\n   * @param {Object} conversation\n   * @param {Object} inputs\n   * @param {Object} parentActivity\n   * @param {Object} activity\n   * @returns {Promise}\n   */\n  cardAction(conversation, inputs, parentActivity, activity = {}) {\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    activity.parent = {\n      id: parentActivity.id,\n      type: 'cardAction'\n    };\n\n    return this.prepare(activity, {\n      verb: 'cardAction',\n      target: this.prepareConversation(convoWithUrl),\n      object: Object.assign({objectType: 'submit'}, inputs)\n    })\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Posts a message to a conversation\n   * @param {Object} conversation\n   * @param {Object|string} message if string, treated as plaintext; if object,\n   * assumed to be object property of `post` activity\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @returns {Promise<Activity>}\n   */\n  post(conversation, message, activity) {\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    if (isString(message)) {\n      message = {\n        displayName: message\n      };\n    }\n\n    return this.prepare(activity, {\n      verb: 'post',\n      target: this.prepareConversation(convoWithUrl),\n      object: Object.assign({objectType: 'comment'}, message)\n    })\n      .then((a) => this.submit(a));\n  },\n\n  prepareConversation(conversation) {\n    return defaults(pick(conversation, 'id', 'url', 'objectType', 'defaultActivityEncryptionKeyUrl', 'kmsResourceObjectUrl'), {\n      objectType: 'conversation'\n    });\n  },\n\n  prepare(activity, params) {\n    params = params || {};\n    activity = activity || {};\n\n    return Promise.resolve(activity.prepare ? activity.prepare(params) : activity)\n      .then((act) => {\n        defaults(act, {\n          verb: params.verb,\n          kmsMessage: params.kmsMessage,\n          objectType: 'activity',\n          clientTempId: uuid.v4(),\n          actor: this.webex.internal.device.userId\n        });\n\n        // Workaround because parent is a reserved props in Ampersand\n        if ((activity.parentActivityId && activity.activityType) || (activity.parent && activity.parent.id && activity.parent.type)) {\n          act.parent = {\n            id: activity.parentActivityId || activity.parent.id,\n            type: activity.activityType || activity.parent.type\n          };\n        }\n\n        if (isString(act.actor)) {\n          act.actor = {\n            objectType: 'person',\n            id: act.actor\n          };\n        }\n\n        ['actor', 'object'].forEach((key) => {\n          if (params[key]) {\n            act[key] = act[key] || {};\n            defaults(act[key], params[key]);\n          }\n        });\n\n        if (params.target) {\n          merge(act, {\n            target: pick(params.target, 'id', 'url', 'objectType', 'kmsResourceObjectUrl', 'defaultActivityEncryptionKeyUrl')\n          });\n        }\n\n        ['object', 'target'].forEach((key) => {\n          if (act[key] && act[key].url && !act[key].id) {\n            act[key].id = act[key].url.split('/').pop();\n          }\n        });\n\n        ['actor', 'object', 'target'].forEach((key) => {\n          if (act[key] && !act[key].objectType) {\n            // Reminder: throwing here because it's the only way to get out of\n            // this loop in event of an error.\n            throw new Error(`\\`act.${key}.objectType\\` must be defined`);\n          }\n        });\n\n        if (act.object && act.object.content && !act.object.displayName) {\n          return Promise.reject(new Error('Cannot submit activity object with `content` but no `displayName`'));\n        }\n\n        return act;\n      });\n  },\n\n  /**\n   * Handles incoming conversation.activity mercury messages\n   * @param {Event} event\n   * @returns {Promise}\n   */\n  processActivityEvent(event) {\n    return this.webex.transform('inbound', event)\n      .then(() => event);\n  },\n\n  /**\n   * Removes all mute-related tags\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  removeAllMuteTags(conversation, activity) {\n    return this.untag(conversation, {\n      tags: [\n        'MENTION_NOTIFICATIONS_OFF',\n        'MENTION_NOTIFICATIONS_ON',\n        'MESSAGE_NOTIFICATIONS_OFF',\n        'MESSAGE_NOTIFICATIONS_ON'\n      ]\n    }, activity);\n  },\n\n  /**\n   * Creates a ShareActivty for the specified conversation\n   * @param {Object} conversation\n   * @param {Object} activity\n   * @returns {ShareActivty}\n   */\n  makeShare(conversation, activity) {\n    // if we pass activity as null then it does not take care of the\n    // clientTempId created by the web-client while making the provisional\n    // activity, hence we need to pass the activity which was created by the\n    // web-client. This fixes the issue where the image activities do not come\n    // back properly oriented from the server since the clientTempId is missing\n    return ShareActivity.create(conversation, activity, this.webex);\n  },\n\n  /**\n   * Assigns an avatar to a room\n   * @param {Object} conversation\n   * @param {File} avatar\n   * @returns {Promise<Activity>}\n   */\n  assign(conversation, avatar) {\n    if ((avatar.size || avatar.length) > 1024 * 1024) {\n      return Promise.reject(new Error('Room avatars must be less than 1MB'));\n    }\n\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    return Promise.resolve()\n      .then(() => {\n        const activity = ShareActivity.create(conversation, null, this.webex);\n\n        activity.enableThumbnails = false;\n        activity.add(avatar);\n\n        return this.prepare(activity, {\n          target: this.prepareConversation(convoWithUrl)\n        });\n      })\n      .then((a) => {\n        // yes, this seems a little hacky; will likely be resolved as a result\n        // of #213\n        a.verb = 'assign';\n\n        return this.submit(a);\n      });\n  },\n\n  /**\n   * Get url from convo object. If there isn't one, get it from the cache\n   *\n   * @param {String} url The location of the conversation\n   * @param {UUID} id If there is no url, fall back to id to lookup in cache or with cluster\n   * @param {String} cluster Used with id to lookup url\n   * @param {UUID} generalConversationUuid If this is a team, the id of the general conversation\n   * @param {Object} conversations If this is a team, the list of conversations in the team\n   * @returns {String} url for the specific convo\n   */\n  getConvoUrl({\n    id, url, cluster, conversations, generalConversationUuid\n  }) {\n    if (generalConversationUuid) {\n      // This is a Team\n      // Because Convo doesn't have an endpoint for the team URL\n      // we have to use the general convo URL.\n      const generalConvo = conversations.items.find(\n        (convo) => convo.id === generalConversationUuid\n      );\n\n      return generalConvo.url;\n    }\n\n    if (url) {\n      return url;\n    }\n\n    if (id) {\n      if (cluster) {\n        return this.getUrlFromClusterId({cluster, id});\n      }\n      this.logger.warn(\n        'You should be using the `url` instead of the `id` property'\n      );\n      const relatedUrl = idToUrl.get(id);\n\n      if (!relatedUrl) {\n        throw Error('Could not find the `url` from the given `id`');\n      }\n\n      return relatedUrl;\n    }\n\n    throw Error('The space needs a `url` property');\n  },\n\n  /**\n   * Sets the typing status of the current user in a conversation\n   *\n   * @param {Object} conversation\n   * @param {Object} options\n   * @param {boolean} options.typing\n   * @returns {Promise}\n   */\n  updateTypingStatus(conversation, options) {\n    if (!conversation.id) {\n      if (conversation.url) {\n        conversation.id = conversation.url.split('/').pop();\n      }\n      else {\n        return Promise.reject(\n          new Error('conversation: could not identify conversation')\n        );\n      }\n    }\n\n    let eventType;\n\n    if (options.typing) {\n      eventType = 'status.start_typing';\n    }\n    else {\n      eventType = 'status.stop_typing';\n    }\n\n    const url = this.getConvoUrl(conversation);\n    const resource = 'status/typing';\n    const params = {\n      method: 'POST',\n      body: {\n        conversationId: conversation.id,\n        eventType\n      },\n      url: `${url}/${resource}`\n    };\n\n    return this.request(params);\n  },\n\n  /**\n   * Shares files to the specified conversation\n   * @param {Object} conversation\n   * @param {ShareActivity|Array<File>} activity\n   * @returns {Promise<Activity>}\n   */\n  share(conversation, activity) {\n    if (isArray(activity)) {\n      activity = {\n        object: {\n          files: activity\n        }\n      };\n    }\n\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    if (!(activity instanceof ShareActivity)) {\n      activity = ShareActivity.create(convoWithUrl, activity, this.webex);\n    }\n\n    return this.prepare(activity, {\n      target: this.prepareConversation(convoWithUrl)\n    })\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Submits an activity to the conversation service\n   * @param {Object} activity\n   * @param {String} [endpoint] endpoint to submit activity. If empty, find in activity\n   * @returns {Promise<Activity>}\n   */\n  submit(activity, endpoint) {\n    const url = endpoint || this.getConvoUrl(activity.target);\n    const resource = activity.verb === 'share' ? 'content' : 'activities';\n    const params = {\n      method: 'POST',\n      body: activity,\n      qs: {\n        personRefresh: true\n      },\n      url: `${url}/${resource}`\n    };\n\n    if (activity.verb === 'share') {\n      Object.assign(params.qs, {\n        transcode: true,\n        async: false\n      });\n    }\n\n    // triggers user-activity to reset logout timer\n    this.webex.trigger('user-activity');\n\n    return this.request(params)\n      .then((res) => res.body);\n  },\n\n  /**\n   * Remove the avatar from a room\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise}\n   */\n  unassign(conversation, activity) {\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    return this.prepare(activity, {\n      verb: 'unassign',\n      target: this.prepareConversation(convoWithUrl),\n      object: {\n        objectType: 'content',\n        files: {\n          items: []\n        }\n      }\n    })\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Mutes the mentions of a conversation\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  unmuteMentions(conversation, activity) {\n    return this.tag(conversation, {\n      tags: ['MENTION_NOTIFICATIONS_ON']\n    }, activity);\n  },\n\n  /**\n   * Mutes the messages of a conversation\n   * @param {Conversation~ConversationObject} conversation\n   * @param {Conversation~ActivityObject} activity\n   * @returns {Promise} Resolves with the created activity\n   */\n  unmuteMessages(conversation, activity) {\n    return this.tag(conversation, {\n      tags: ['MESSAGE_NOTIFICATIONS_ON']\n    }, activity);\n  },\n\n  /**\n   * Update an existing activity\n   * @param {Object} conversation\n   * @param {Object} object\n   * @param {Object} activity\n   * @returns {Promise}\n   */\n  update(conversation, object, activity) {\n    if (!isObject(object)) {\n      return Promise.reject(new Error('`object` must be an object'));\n    }\n\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    return this.prepare(activity, {\n      verb: 'update',\n      target: this.prepareConversation(convoWithUrl),\n      object\n    })\n      .then((a) => this.submit(a));\n  },\n\n  /**\n   * Sets a new key for the conversation\n   * @param {Object} conversation\n   * @param {Key|string} key (optional)\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @returns {Promise<Activity>}\n   */\n  updateKey(conversation, key, activity) {\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    return this.get(convoWithUrl, {\n      activitiesLimit: 0,\n      includeParticipants: true\n    })\n      .then((c) => this._updateKey(c, key, activity));\n  },\n\n  /**\n   * Sets a new key for the conversation\n   * @param {Object} conversation\n   * @param {Key|string} key (optional)\n   * @param {Object} activity Reference to the activity that will eventually be\n   * posted. Use this to (a) pass in e.g. clientTempId and (b) render a\n   * provisional activity\n   * @private\n   * @returns {Promise<Activity>}\n   */\n  _updateKey(conversation, key, activity) {\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    return Promise.resolve(\n      key || this.webex.internal.encryption.kms.createUnboundKeys({count: 1})\n    )\n      .then((keys) => {\n        const k = isArray(keys) ? keys[0] : keys;\n        const params = {\n          verb: 'updateKey',\n          target: this.prepareConversation(convoWithUrl),\n          object: {\n            defaultActivityEncryptionKeyUrl: k.uri,\n            objectType: 'conversation'\n          }\n        };\n\n        // Reminder: the kmsResourceObjectUrl is only usable if there is\n        // defaultActivityEncryptionKeyUrl.\n        // Valid defaultActivityEncryptionKeyUrl start with 'kms:'\n        if (\n          convoWithUrl.kmsResourceObjectUrl &&\n          convoWithUrl.kmsResourceObjectUrl.startsWith('kms:')\n        ) {\n          params.kmsMessage = {\n            method: 'update',\n            resourceUri: '<KRO>',\n            uri: k.uri\n          };\n        }\n        else {\n          params.kmsMessage = {\n            method: 'create',\n            uri: '/resources',\n            userIds: map(convoWithUrl.participants.items, 'id'),\n            keyUris: [\n              k.uri\n            ]\n          };\n        }\n\n        return this.prepare(activity, params)\n          .then((a) => this.submit(a));\n      });\n  },\n\n  /**\n   * @param {Object} payload\n   * @param {Object} options\n   * @private\n   * @returns {Promise<Activity>}\n   */\n  _create(payload, options = {}) {\n    return this.request({\n      method: 'POST',\n      service: 'conversation',\n      resource: 'conversations',\n      body: payload,\n      qs: {\n        forceCreate: options.allowPartialCreation\n      }\n    })\n      .then((res) => res.body);\n  },\n\n  /**\n   * @param {Object} params\n   * @param {Object} options\n   * @private\n   * @returns {Promise}\n   */\n  _createGrouped(params, options) {\n    return this._create(this._prepareConversationForCreation(params), options);\n  },\n\n  /**\n   * @param {Object} params\n   * @param {Object} options\n   * @private\n   * @returns {Promise}\n   */\n  _createOneOnOne(params) {\n    const payload = this._prepareConversationForCreation(params);\n\n    payload.tags = ['ONE_ON_ONE'];\n\n    return this._create(payload);\n  },\n\n  /**\n   * Get the current conversation url.\n   *\n   * @returns {Promise<string>} - conversation url\n   */\n  getConversationUrl() {\n    this.logger.info('conversation: getting the conversation service url');\n\n    const convoUrl = this.webex.internal.services.get('conversation');\n\n    // Validate if the conversation url exists in the services plugin and\n    // resolve with its value.\n    if (convoUrl) {\n      return Promise.resolve(convoUrl);\n    }\n\n    // Wait for the postauth catalog to update and then try to retrieve the\n    // conversation service url again.\n    return this.webex.internal.waitForCatalog('postauth')\n      .then(() => this.webex.internal.services.get('conversation'))\n      .catch((error) => {\n        this.logger.warn(\n          'conversation: unable to get conversation url',\n          error.message\n        );\n\n        return Promise.reject(error);\n      });\n  },\n\n  /**\n   * @param {Object} conversation\n   * @private\n   * @returns {Promise}\n   */\n  _inferConversationUrl(conversation) {\n    if (conversation.id) {\n      return this.webex.internal.feature.getFeature('developer', 'web-high-availability')\n        .then((haMessagingEnabled) => {\n          if (haMessagingEnabled) {\n            // recompute conversation URL each time as the host may have changed\n            // since last usage\n            return this.getConversationUrl()\n              .then((url) => {\n                conversation.url = `${url}/conversations/${conversation.id}`;\n\n                return conversation;\n              });\n          }\n          if (!conversation.url) {\n            return this.getConversationUrl()\n              .then((url) => {\n                conversation.url = `${url}/conversations/${conversation.id}`;\n                /* istanbul ignore else */\n                if (process.env.NODE_ENV !== 'production') {\n                  this.logger.warn('conversation: inferred conversation url from conversation id; please pass whole conversation objects to Conversation methods');\n                }\n\n                return conversation;\n              });\n          }\n\n          return Promise.resolve(conversation);\n        });\n    }\n\n    return Promise.resolve(conversation);\n  },\n\n  /**\n   * @param {Object} options\n   * @param {String} options.conversationUrl URL to the conversation\n   * @param {String} options.resource The URL resource to hit for a list of objects\n   * @private\n   * @returns {Promise<Array<Activity>>}\n   */\n  _listActivities(options) {\n    const id = options.conversationId;\n    const url = this.getConvoUrl({url: options.conversationUrl, id});\n    const {resource} = options;\n\n    return this._list({\n      qs: omit(options, 'resource'),\n      url: `${url}/${resource}`\n    });\n  },\n\n  /**\n   * @param {Object} options\n   * @private\n   * @returns {Promise<Array<Conversation>>}\n   */\n  async _list(options) {\n    options.qs = Object.assign({\n      personRefresh: true,\n      uuidEntryFormat: true,\n      activitiesLimit: 0,\n      participantsLimit: 0\n    }, options.qs);\n\n    const res = await this.request(options);\n\n    if (!res.body || !res.body.items || res.body.items.length === 0) {\n      return [];\n    }\n\n    let list = res.body.items.slice(0);\n\n    if (last(list).published < list[0].published) {\n      list.reverse();\n    }\n\n    // The user has more data in another cluster.\n    // Follow the 'additionalUrls' for that data.\n    if (res.body.additionalUrls) {\n      let limit = 0;\n\n      // If the user asked for a specific amount of data,\n      // don't fetch more than what was asked.\n      // Here we figure out how much is left from the original request.\n      // Divide that by the number of additional URLS.\n      // This won't get us the exact limit but it will retrieve something\n      // from every cluster listed.\n      if (options.limit) {\n        limit = Math.floor(\n          (options.limit.value - list.length) / res.body.additionalUrls.length\n        );\n      }\n\n      // If the limit is 0 for some reason,\n      // don't bother requesting from other clusters\n      if (!options.limit || limit !== 0) {\n        const results = await Promise.all(\n          res.body.additionalUrls.map((host) => {\n            const url = `${host}/${options.resource}`;\n            const newOptions = Object.assign({}, options, {uri: url, url});\n\n            if (options.limit) {\n              newOptions.qs[newOptions.limit.name] = limit;\n            }\n\n            return this.request(newOptions);\n          })\n        );\n\n        for (const result of results) {\n          if (result.body && result.body.items && result.body.items.length) {\n            const {items} = result.body;\n\n            if (last(items).published < items[0].published) {\n              items.reverse();\n            }\n            list = list.concat(items);\n          }\n        }\n      }\n    }\n\n    await Promise.all(list.map((item) => this._recordUUIDs(item)));\n\n    return list;\n  },\n\n  /**\n   * @param {Object} params\n   * @param {Object} options\n   * @private\n   * @returns {Promise<Conversation>}\n   */\n  _maybeCreateOneOnOneThenPost(params, options) {\n    return this.get(defaults({\n      // the use of uniq in Conversation#create guarantees participant[1] will\n      // always be the other user\n      user: params.participants[1]\n    }), Object.assign(options, {includeConvWithDeletedUserUUID: true, includeParticipants: true}))\n      .then((conversation) => {\n        if (params.comment || params.html) {\n          return this.post(conversation, {content: params.html, displayName: params.comment})\n            .then((activity) => {\n              conversation.activities.items.push(activity);\n\n              return conversation;\n            });\n        }\n\n        return conversation;\n      })\n      .catch((reason) => {\n        if (reason.statusCode !== 404) {\n          return Promise.reject(reason);\n        }\n\n        return this._createOneOnOne(params);\n      });\n  },\n\n  /**\n   * @param {Object} params\n   * @private\n   * @returns {Object}\n   */\n  _prepareConversationForCreation(params) {\n    const payload = {\n      activities: {\n        items: [\n          this.expand('create')\n        ]\n      },\n      objectType: 'conversation',\n      kmsMessage: {\n        method: 'create',\n        uri: '/resources',\n        userIds: cloneDeep(params.participants),\n        keyUris: []\n      }\n    };\n\n    if (params.displayName) {\n      payload.displayName = params.displayName;\n    }\n\n    params.participants.forEach((participant) => {\n      payload.activities.items.push(this.expand('add', {\n        objectType: 'person',\n        id: participant\n      }));\n    });\n\n    if (params.comment) {\n      payload.activities.items.push(this.expand('post', {\n        objectType: 'comment',\n        content: params.html,\n        displayName: params.comment\n      }));\n    }\n\n    return payload;\n  },\n\n  /**\n   * @param {Object} conversation\n   * @private\n   * @returns {Promise}\n   */\n  _recordUUIDs(conversation) {\n    if (!conversation.participants || !conversation.participants.items) {\n      return Promise.resolve(conversation);\n    }\n\n    return Promise.all(conversation.participants.items.map((participant) => {\n      // ROOMs or LYRA_SPACEs do not have email addresses, so there's no point attempting to\n      // record their UUIDs.\n      if (participant.type === 'ROOM' || participant.type === 'LYRA_SPACE') {\n        return Promise.resolve();\n      }\n\n      return this.webex.internal.user.recordUUID(participant)\n        .catch((err) => this.logger.warn('Could not record uuid', err));\n    }));\n  }\n});\n\n[\n  'favorite',\n  'hide',\n  'lock',\n  'mute',\n  'unfavorite',\n  'unhide',\n  'unlock',\n  'unmute'\n].forEach((verb) => {\n  Conversation.prototype[verb] = function submitSimpleActivity(conversation, activity) {\n    const convoWithUrl =\n      this.prepareConversation(\n        Object.assign(\n          {}, conversation, {url: this.getConvoUrl(conversation)}\n        )\n      );\n\n    return this.prepare(activity, {\n      verb,\n      object: convoWithUrl,\n      target: convoWithUrl\n    })\n      .then((a) => this.submit(a));\n  };\n});\n\n[\n  'assignModerator',\n  'unassignModerator'\n].forEach((verb) => {\n  Conversation.prototype[verb] = function submitModerationChangeActivity(conversation, moderator, activity) {\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    return Promise.all([\n      convoWithUrl,\n      moderator ? this.webex.internal.user.asUUID(moderator) : this.webex.internal.device.userId\n    ])\n      .then(([c, userId]) => this.prepare(activity, {\n        verb,\n        target: this.prepareConversation(c),\n        object: {\n          id: userId,\n          objectType: 'person'\n        }\n      }))\n      .then((a) => this.submit(a));\n  };\n});\n\n/**\n * Sets/unsets space property for convo\n * @param {Object} conversation\n * @param {string} tag\n * @param {Activity} activity\n * @returns {Promise<Activity>}\n */\n[\n  'setSpaceProperty',\n  'unsetSpaceProperty'\n].forEach((fnName) => {\n  const verb = fnName.startsWith('set') ? 'set' : 'unset';\n\n  Conversation.prototype[fnName] = function submitSpacePropertyActivity(conversation, tag, activity) {\n    if (!isString(tag)) {\n      return Promise.reject(new Error('`tag` must be a string'));\n    }\n\n    const convoWithUrl =\n      Object.assign(\n        {}, conversation, {url: this.getConvoUrl(conversation)}\n      );\n\n    return this.prepare(activity, {\n      verb,\n      target: this.prepareConversation(convoWithUrl),\n      object: {\n        tags: [tag],\n        objectType: 'spaceProperty'\n      }\n    })\n      .then((a) => this.submit(a));\n  };\n});\n\n[\n  'tag',\n  'untag'\n].forEach((verb) => {\n  Conversation.prototype[verb] = function submitObjectActivity(conversation, object, activity) {\n    if (!isObject(object)) {\n      return Promise.reject(new Error('`object` must be an object'));\n    }\n\n    const c =\n      this.prepareConversation(\n        Object.assign(\n          {}, conversation, {url: this.getConvoUrl(conversation)}\n        )\n      );\n\n    return this.prepare(activity, {\n      verb,\n      target: c,\n      object: Object.assign(c, object)\n    })\n      .then((a) => this.submit(a));\n  };\n});\n\nexport default Conversation;\n"]}