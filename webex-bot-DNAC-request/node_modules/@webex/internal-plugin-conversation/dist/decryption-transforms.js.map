{"version":3,"sources":["decryption-transforms.js"],"names":["decryptTextProp","name","ctx","key","object","transform","transforms","decryptObject","undefined","resolve","objectType","encryptionKeyUrl","all","files","items","map","item","decryptSubmit","inputs","decryptionFailureMessage","webex","internal","conversation","config","then","JSON","parse","catch","reason","logger","warn","decryptReaction2summary","reactions","reaction","decryptReaction2selfsummary","decryptReaction2","decryptConversation","promises","activities","push","usableKey","error","url","avatarEncryptionKeyUrl","avatar","previous","decryptActivity","activity","keyUrl","children","Array","isArray","child","decryptMicroappinstance","microappInstance","decryptComment","comment","cards","index","decryptContent","content","contentCategory","decryptContentFiles","links","forEach","decryptContentLinks","decryptEvent","event","location","split","length","decryptFile","file","transcodedCollection","image","decryptLink","link","decryptTranscodedContent","transcodedContent","decryptImageURI","imageURI","encryption","decryptText","plaintext","keepEncryptedProperties","encryptedPropName","decryptPropCardItem","array","String","decryptPropScr","decryptScr","scr","decryptPropSslr","sslr","decryptPropDisplayName","decryptPropContent","decryptPropModel","decryptPropLocation"],"mappings":"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","file":"decryption-transforms.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {camelCase, capitalize, curry} from 'lodash';\n\nimport toArray from './to-array';\n\nconst decryptTextProp = curry((name, ctx, key, object) => ctx.transform('decryptTextProp', name, key, object));\n\n// eslint-disable-next-line import/prefer-default-export\nexport const transforms = toArray('inbound', {\n\n  /**\n   * This function is used recursively to decrypt various properties on convesations, activities, etc\n   * @param   {Object} ctx    An object containg a webex instance and a transform\n   * @param   {String} key    KMS encryption key url\n   * @param   {Object} object Generic object that you want to decrypt some property on based on the type\n   * @returns {Promise}       Returns a transform promise\n   */\n  decryptObject(ctx, key, object) {\n    if (!object) {\n      object = key; // eslint-disable-line no-param-reassign\n      key = undefined; // eslint-disable-line no-param-reassign\n    }\n\n    if (!object) {\n      return Promise.resolve();\n    }\n\n    if (!object.objectType) {\n      return Promise.resolve();\n    }\n\n    if (!key && object.encryptionKeyUrl) {\n      key = object.encryptionKeyUrl; // eslint-disable-line no-param-reassign\n    }\n\n    // Transcoded content was not showing up on the activities since the\n    // decryptFile was not being called. Calling decryptFile for\n    // transcodedContent fixes the issue.\n    if (object.objectType === 'transcodedContent') {\n      return Promise.all(object.files.items.map((item) => ctx.transform('decryptFile', key, item)));\n    }\n\n    return ctx.transform(`decrypt${capitalize(object.objectType)}`, key, object);\n  },\n\n  /**\n   * Decrypt an individual submit object from a cardAction activity\n   *   (object.objectType === 'sumbit')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex Teams submit object\n   * these objects are returned when a user clicks on a Action.Submit button in a card\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptSubmit(ctx, key, object) {\n    if (!object.inputs) {\n      return Promise.resolve();\n    }\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    return ctx.transform('decryptPropCardItem', 0, key, [object.inputs])\n      .then((inputs) => {\n        object.inputs = JSON.parse(inputs[0]); // eslint-disable-line no-param-reassign\n      })\n      .catch((reason) => {\n        ctx.webex.logger.warn(`plugin-conversation: failed to decrypt attachmentAction.inputs: ${reason}`);\n        object.inputs = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n        return Promise.resolve(decryptionFailureMessage);\n      });\n  },\n\n  /**\n   * Decrypt an individual reaction2Summary activity (object.objectType === 'reaction2Summary')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex Teams reaction2Summary object\n   * these objects are returned by various conversation APIs and over mercury\n   * represents an aggregated summary of all reactions to a specific activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptReaction2summary(ctx, key, object) {\n    if (!object.reactions) {\n      return Promise.resolve();\n    }\n\n    return Promise.all(object.reactions.map((reaction) => ctx.transform('decryptPropDisplayName', key, reaction)));\n  },\n\n  /**\n   * Decrypt an individual reaction2SelfSummary activity (object.objectType === 'reaction2SelfSummary')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex Teams reaction2SelfSummary object\n   * these objects are returned by various conversation APIs and NOT over mercury\n   * they are ONLY received by the self user\n   * they represent ONLY the self user's reactions and are used for enforcing\n   * limit of times they can react to a specific activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptReaction2selfsummary(ctx, key, object) {\n    if (!object.reactions) {\n      return Promise.resolve();\n    }\n\n    return Promise.all(object.reactions.map((reaction) => ctx.transform('decryptPropDisplayName', key, reaction)));\n  },\n\n  /**\n   * Decrypt an individual reaction2 activity (object.objectType === 'reaction2')\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS key\n   * @param   {Object} object An instance of a Webex Teams reaction2 object\n   * these objects are returned by various conversation APIs and over mercury\n   * ONLY self users receive these objects\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptReaction2(ctx, key, object) {\n    return ctx.transform('decryptPropDisplayName', key, object);\n  },\n\n  /**\n   * Decrypts a given conversation and it's activites by building an array of promises that call\n   * decryptObject, which may then call other decrypt functions\n   *\n   * @param   {Object} ctx          An object containg a webex instance and a transform\n   * @param   {String} key          KMS encryption key url (or actual key?)\n   * @param   {Object} conversation A Webex Teams conversation object\n   * @returns {Promise}             Returns the result of Promise.all\n   */\n  decryptConversation(ctx, key, conversation) {\n    const promises = [];\n\n    if (conversation.activities.items) {\n      promises.push(Promise.all(conversation.activities.items.map((item) => ctx.transform('decryptObject', null, item))));\n    }\n\n    const usableKey = conversation.encryptionKeyUrl || key;\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    if (usableKey) {\n      promises.push(ctx.transform('decryptPropDisplayName', usableKey, conversation)\n        .catch((error) => {\n          ctx.webex.logger.warn('plugin-conversation: failed to decrypt display name of ', conversation.url, error);\n          Promise.resolve(decryptionFailureMessage);\n        }));\n      promises.push(ctx.transform('decryptPropContent', usableKey, conversation));\n    }\n    if (conversation.avatarEncryptionKeyUrl) {\n      promises.push(ctx.transform('decryptObject', conversation.avatarEncryptionKeyUrl, conversation.avatar));\n    }\n    if (conversation.previous) {\n      promises.push(ctx.transform('decryptPropDisplayName', usableKey, conversation.previous));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypt an individual activity\n   * @param   {Object} ctx      An object containg a webex instance and a transform\n   * @param   {String} key      KMS encryption key url (or actual key?)\n   * @param   {Object} activity An instance of a Webex Teams activity\n   * @returns {Promise}         Returns a ctx.transform promise\n   */\n  decryptActivity(ctx, key, activity) {\n    if (!activity.encryptionKeyUrl && !(activity.object && activity.object.encryptionKeyUrl)) {\n      return Promise.resolve(activity);\n    }\n\n    const keyUrl = activity.encryptionKeyUrl || activity.object.encryptionKeyUrl || key;\n\n    let promises = [];\n\n    // iterate and recursively decrypt over children objects\n    if (activity.children && Array.isArray(activity.children)) {\n      promises = activity.children.map((child) => ctx.transform('decryptObject', keyUrl, child.activity));\n    }\n\n    promises.push(ctx.transform('decryptObject', keyUrl, activity.object));\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a microappInstance (recording) model\n   * @param   {Object} ctx                     An object containing a webex instance and transform prop\n   * @param   {String} key                     KMS key\n   * @param   {Object} microappInstance        A microappInstance which includes several properties of a recording\n   * @param   {String} microappInstance.model  An encrypted string which decrypts to an object\n   * @returns {Promise}                        Returns a contex transform\n   */\n  decryptMicroappinstance(ctx, key, microappInstance) {\n    return ctx.transform('decryptPropModel', key, microappInstance);\n  },\n\n  /**\n* Decrypts a comment...\n* @param {Object} ctx An object containing a webex instance and transform prop\n* @param {String} key KMS key\n* @param {Object} comment A comment object with a displayName and content (encrypted)\n* @returns {Promise} Returns the results of Promise.all on two transforms\n*/\n  decryptComment(ctx, key, comment) {\n    const promises = [\n      ctx.transform('decryptPropDisplayName', key, comment),\n      ctx.transform('decryptPropContent', key, comment)\n    ];\n\n    if (comment.cards && Array.isArray(comment.cards)) {\n      comment.cards.map((item, index) => promises.push(ctx.transform('decryptPropCardItem', index, key, comment.cards)));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a content field\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContent(ctx, key, content) {\n    if (content.contentCategory === 'links') {\n      return ctx.transform('decryptContentLinks', key, content);\n    }\n\n    return ctx.transform('decryptContentFiles', key, content);\n  },\n\n  /**\n   * Decrypts a content field which contains files and possibly links\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @param   {Array}  content.files  An array of files to decrypt by calling decryptObject\n   * @param   {Array}  content.links  An array of links to decrypt by calling decryptObject\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContentFiles(ctx, key, content) {\n    if (!content.files || !content.files.items || !Array.isArray(content.files.items)) {\n      return Promise.resolve();\n    }\n\n    const promises = content.files.items.map((item) => ctx.transform('decryptObject', key, item));\n\n    promises.push(ctx.transform('decryptComment', key, content));\n\n    if (content.links && content.links.items && Array.isArray(content.links.items)) {\n      content.links.items.forEach((item) => promises.push(ctx.transform('decryptObject', key, item)));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a content field which contains links\n   * @param   {Object} ctx            An object containing a webex instance and transform prop\n   * @param   {String} key            KMS key\n   * @param   {Object} content        An object with properties to be decrypted\n   * @param   {Array}  content.links  An array of links to decrypt by calling decryptObject\n   * @returns {Promise}               A promise that will return when the decryption has finished\n   */\n  decryptContentLinks(ctx, key, content) {\n    if (!content.links || !content.links.items || !Array.isArray(content.links.items)) {\n      return Promise.resolve();\n    }\n\n    const promises = content.links.items.map((item) => ctx.transform('decryptObject', key, item));\n\n    promises.push(ctx.transform('decryptComment', key, content));\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts what may be a meeting event?\n   * @param   {Object} ctx   An object containing a webex instance and transform prop\n   * @param   {String} key   KMS key\n   * @param   {Object} event An object with a display name and location to be decrypted\n   * @returns {Promise}      Returns the result of Promise.all\n   */\n  decryptEvent(ctx, key, event) {\n    const promises = [\n      ctx.transform('decryptPropDisplayName', key, event)\n    ];\n\n    if (event.location && event.location.split('.').length === 5) {\n      promises.push(ctx.transform('decryptPropLocation', key, event));\n    }\n\n    return Promise.all(promises);\n  },\n\n  /**\n   * Decrypts a file and it's transcodedContents if they exist\n   * @param   {Object} ctx  An object containing a webex instance and transform prop\n   * @param   {String} key  KMS key\n   * @param   {Object} file A file object with file props an optional transcodedCollection to decrypt\n   * @returns {Promise}     Returns the result of Promise.all\n   */\n  decryptFile(ctx, key, file) {\n    return Promise.all([\n      file.transcodedCollection && Promise.all(file.transcodedCollection.items.map((item) => ctx.transform('decryptObject', key, item))),\n      ctx.transform('decryptPropScr', key, file),\n      ctx.transform('decryptPropDisplayName', key, file),\n      ctx.transform('decryptPropContent', key, file),\n      file.image && ctx.transform('decryptPropScr', key, file.image)\n    ]);\n  },\n\n  /**\n   * Decrypts a file and it's transcodedContents if they exist\n   * @param   {Object} ctx  An object containing a webex instance and transform prop\n   * @param   {String} key  KMS key\n   * @param   {Object} link A link object with a URL to decrypt\n   * @returns {Promise}     Returns the result of Promise.all\n   */\n  decryptLink(ctx, key, link) {\n    return Promise.all([\n      ctx.transform('decryptPropSslr', key, link),\n      ctx.transform('decryptPropDisplayName', key, link)\n    ]);\n  },\n\n  /**\n   * Decrypts transcoded file content. Calls decryptFile\n   * @param   {Object} ctx               An object containing a webex instance and transform prop\n   * @param   {String} key               KMS key\n   * @param   {Object} transcodedContent Transcoded content with a files prop\n   * @returns {Promise}                  Returns the result of Promise.all\n   */\n  decryptTranscodedContent(ctx, key, transcodedContent) {\n    return Promise.all(transcodedContent.files.items.map((item) => ctx.transform('decryptFile', key, item)));\n  },\n\n  /**\n   * Decrypts an image uri\n   * @param   {Object} ctx       An object containing a webex instance and transform prop\n   * @param   {String} key       KMS key\n   * @param   {String} imageURI  URI of the image to decrypt\n   * @returns {Promise}          Returns a promise.\n   */\n  decryptImageURI(ctx, key, imageURI) {\n    return ctx.transform('decryptPropLocation', key, imageURI);\n  },\n\n  /**\n   * The heart of most decryption logic ends here. Decrypting text.\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} name   Property of an object to be decrypted\n   * @param   {String} key    KMS key\n   * @param   {Object} object A generic object with text props to be decrypted\n   * @returns {Promise}       Returns a lonely Promise\n   */\n  decryptTextProp(ctx, name, key, object) {\n    if (!object[name]) {\n      return Promise.resolve();\n    }\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    return ctx.webex.internal.encryption.decryptText(key, object[name])\n      .then((plaintext) => {\n        if (ctx.webex.config.conversation.keepEncryptedProperties) {\n          const encryptedPropName = camelCase(`encrypted_${name}`);\n\n          object[encryptedPropName] = object[name]; // eslint-disable-line no-param-reassign\n        }\n\n        object[name] = plaintext; // eslint-disable-line no-param-reassign\n      })\n      .catch((reason) => {\n        ctx.webex.logger.warn(`plugin-conversation: failed to decrypt ${name} `, reason);\n        object[name] = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n        return Promise.resolve(decryptionFailureMessage);\n      });\n  },\n\n  /**\n* Decrypting an element in an Array.\n* @param {Object} ctx An object containing a webex instance and transform prop\n* @param {Integer} index Property of an object to be decrypted\n* @param {String} key KMS key\n* @param {Array} array An array of Strings to be decrypted\n* @returns {Promise} Returns a lonely Promise\n*/\n  decryptPropCardItem(ctx, index, key, array) {\n    if (!Number.isInteger(index) || !array || !Array.isArray(array) || index < 0 || index >= array.length || !(array[index] instanceof String || typeof array[index] === 'string')) {\n      return Promise.resolve();\n    }\n    const {decryptionFailureMessage} = ctx.webex.internal.conversation.config;\n\n    return ctx.webex.internal.encryption.decryptText(key, array[index])\n      .then((plaintext) => {\n        array[index] = plaintext; // eslint-disable-line no-param-reassign\n      })\n      .catch((reason) => {\n        ctx.webex.logger.warn(`plugin-conversation: failed to decrypt card at ${index} `, reason);\n        array[index] = decryptionFailureMessage; // eslint-disable-line no-param-reassign\n\n        return Promise.resolve(decryptionFailureMessage);\n      });\n  },\n  /**\n   * Decrypts the src of an object (for images?)\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} key    KMS key\n   * @param   {Object} object An object with a scr property to be decrypted\n   * @returns {Promise}       Returns a promise\n   */\n  decryptPropScr(ctx, key, object) {\n    return ctx.webex.internal.encryption.decryptScr(key, object.scr)\n      .then((scr) => {\n        object.scr = scr; // eslint-disable-line no-param-reassign\n      });\n  },\n\n  /**\n   * Decrypts the sslr object\n   * @param   {Object} ctx    An object containing a webex instance and transform prop\n   * @param   {String} key    KMS key\n   * @param   {Object} object An object with a sslr property to be decrypted\n   * @returns {Promise}       Returns a promise\n   */\n  decryptPropSslr(ctx, key, object) {\n    return ctx.webex.internal.encryption.decryptScr(key, object.sslr)\n      .then((sslr) => {\n        object.sslr = sslr; // eslint-disable-line no-param-reassign\n      });\n  },\n\n  decryptPropDisplayName: decryptTextProp('displayName'),\n\n  decryptPropContent: decryptTextProp('content'),\n\n  decryptPropModel: decryptTextProp('model'),\n\n  decryptPropLocation: decryptTextProp('location')\n});\n"]}