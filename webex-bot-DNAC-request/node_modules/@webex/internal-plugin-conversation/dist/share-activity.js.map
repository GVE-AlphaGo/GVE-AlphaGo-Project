{"version":3,"sources":["share-activity.js"],"names":["EMITTER_SYMBOL","FILE_SYMBOL","PROMISE_SYMBOL","ShareActivity","WebexPlugin","extend","getSymbols","file","emitter","namespace","derived","target","deps","fn","conversation","session","required","type","content","clientTempId","displayName","enableThumbnails","default","hiddenSpaceUrl","mentions","spaceUrl","uploads","initialize","attrs","options","prototype","resolve","_spaceUrl","_retrieveSpaceUrl","url","then","_hiddenSpaceUrl","addGif","gif","gifToAdd","get","name","fileSize","size","byteLength","length","mimeType","objectType","set","SCR","create","scr","loc","giphyURL","thumbnailMaxWidth","config","thumbnailMaxHeight","logger","imageData","thumbnail","fileDimensions","thumbnailDimensions","thumbnailURL","image","add","upload","EventEmitter","promise","main","webex","internal","encryption","encryptBinary","cdata","all","uploadPromise","_upload","metadata","downloadUrl","thumb","getFiles","files","key","push","uri","fileHash","toString","qs","transcode","phases","$url","uploadUrl","finalize","$uri","finishUploadUrl","body","remove","delete","prepare","Error","activity","verb","object","undefined","items","promises","forEach","item","contentCategory","_determineContentCategory","_itemContainsActionWithMimeType","map","actions","mimeTypes","split","shift","request","method","res","share","parent"],"mappings":"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","file":"share-activity.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {EventEmitter} from 'events';\n\nimport SCR from 'node-scr';\nimport {proxyEvents, transferEvents} from '@webex/common';\nimport {WebexPlugin} from '@webex/webex-core';\nimport {filter, map, pick, some} from 'lodash';\nimport {detectFileType, processImage} from '@webex/helper-image';\nimport sha256 from 'crypto-js/sha256';\n\nexport const EMITTER_SYMBOL = Symbol('EMITTER_SYMBOL');\nexport const FILE_SYMBOL = Symbol('FILE_SYMBOL');\nconst PROMISE_SYMBOL = Symbol('PROMISE_SYMBOL');\n\n/**\n * @class\n */\nconst ShareActivity = WebexPlugin.extend({\n  getSymbols() {\n    return {\n      file: FILE_SYMBOL,\n      emitter: EMITTER_SYMBOL\n    };\n  },\n\n  namespace: 'Conversation',\n\n  derived: {\n    target: {\n      deps: ['conversation'],\n      fn() {\n        return this.conversation;\n      }\n    }\n  },\n\n  session: {\n    conversation: {\n      required: true,\n      type: 'object'\n    },\n\n    content: 'string',\n\n    clientTempId: 'string',\n\n    displayName: 'string',\n\n    enableThumbnails: {\n      default: true,\n      type: 'boolean'\n    },\n\n    hiddenSpaceUrl: 'object',\n\n    mentions: 'object',\n\n    spaceUrl: 'object',\n\n    uploads: {\n      type: 'object',\n      default() {\n        return new Map();\n      }\n    }\n  },\n\n  initialize(attrs, options) {\n    Reflect.apply(WebexPlugin.prototype.initialize, this, [attrs, options]);\n\n    if (attrs && attrs.conversation) {\n      this.spaceUrl = Promise.resolve(attrs.conversation._spaceUrl || this._retrieveSpaceUrl(`${attrs.conversation.url}/space`)\n        .then((url) => {\n          attrs.conversation._spaceUrl = url;\n\n          return url;\n        }));\n\n      this.hiddenSpaceUrl = Promise.resolve(attrs.conversation._hiddenSpaceUrl || this._retrieveSpaceUrl(`${attrs.conversation.url}/space/hidden`)\n        .then((url) => {\n          attrs.conversation._hiddenSpaceUrl = url;\n\n          return url;\n        }));\n    }\n  },\n\n  /**\n   * Adds an additional GIF to the share activity\n   * Different from regular add to skip uploading to webex files service\n   * @param {File} gif\n   * @param {Object} options\n   * @param {Object} options.actions\n   * @returns {Promise}\n   */\n  addGif(gif, options) {\n    let gifToAdd = this.uploads.get(gif);\n\n    // If the gif already exists, then don't do anything\n    if (gifToAdd) {\n      return Promise.resolve();\n    }\n\n    gifToAdd = Object.assign({\n      displayName: gif.name,\n      fileSize: gif.size || gif.byteLength || gif.length,\n      mimeType: gif.type,\n      url: 'https://giphy.com',\n      objectType: 'file',\n      [FILE_SYMBOL]: gif\n    }, pick(options, 'actions'));\n\n    this.uploads.set(gif, gifToAdd);\n\n    /* Instead of encryptBinary, which produces a encrypted version of\n     * the file for upload and a SCR (contains info needed to encrypt the\n     * SCR itself and the displayName), we directly create an SCR.\n     * Because we are skipping uploading, the encrypted file is not needed.\n     */\n    return SCR.create()\n      .then((scr) => {\n        scr.loc = gif.giphyURL;\n        gifToAdd.scr = scr;\n\n        return Promise.resolve(\n          processImage({\n            file: gif,\n            type: gif.type,\n            thumbnailMaxWidth: this.config.thumbnailMaxWidth,\n            thumbnailMaxHeight: this.config.thumbnailMaxHeight,\n            enableThumbnails: this.enableThumbnails,\n            logger: this.logger\n          })\n        );\n      })\n      .then((imageData) => {\n        if (imageData) {\n          /* Similar reasoning to the above comment, but this for the thumbnail\n           * which is in the image property of the object.\n           */\n          return SCR.create()\n            .then((scr) => {\n              const [thumbnail, fileDimensions, thumbnailDimensions] = imageData;\n\n              Object.assign(gifToAdd, fileDimensions);\n\n              if (thumbnail && thumbnailDimensions) {\n                scr.loc = gif.thumbnailURL;\n                gifToAdd.image = thumbnailDimensions;\n                gifToAdd.image.url = 'https://giphy.com';\n                gifToAdd.image.scr = scr;\n              }\n            });\n        }\n\n        // if there isn't any imageData, we just don't have a image field\n        return Promise.resolve();\n      });\n  },\n\n  /**\n   * Adds an additional file to the share and begins submitting it to webex\n   * files\n   * @param {File} file\n   * @param {Object} options\n   * @param {Object} options.actions\n   * @returns {EventEmittingPromise}\n   */\n  add(file, options) {\n    options = options || {};\n    let upload = this.uploads.get(file);\n\n    if (upload) {\n      return upload[PROMISE_SYMBOL];\n    }\n    const emitter = new EventEmitter();\n\n    upload = Object.assign({\n      displayName: file.name,\n      fileSize: file.size || file.byteLength || file.length,\n      mimeType: file.type,\n      objectType: 'file',\n      [EMITTER_SYMBOL]: emitter,\n      [FILE_SYMBOL]: file\n    }, pick(options, 'actions'));\n\n    this.uploads.set(file, upload);\n    const promise = detectFileType(file, this.logger)\n      .then((type) => {\n        upload.mimeType = type;\n\n        return processImage({\n          file,\n          type,\n          thumbnailMaxWidth: this.config.thumbnailMaxWidth,\n          thumbnailMaxHeight: this.config.thumbnailMaxHeight,\n          enableThumbnails: this.enableThumbnails,\n          logger: this.logger\n        });\n      })\n      .then((imageData) => {\n        const main = this.webex.internal.encryption.encryptBinary(file)\n          .then(({scr, cdata}) => {\n            upload.scr = scr;\n\n            return Promise.all([cdata, this.spaceUrl]);\n          })\n          .then(([cdata, spaceUrl]) => {\n            const uploadPromise = this._upload(cdata, `${spaceUrl}/upload_sessions`);\n\n            transferEvents('progress', uploadPromise, emitter);\n\n            return uploadPromise;\n          })\n          .then((metadata) => {\n            upload.url = upload.scr.loc = metadata.downloadUrl;\n          });\n\n\n        let thumb;\n\n        if (imageData) {\n          const [thumbnail, fileDimensions, thumbnailDimensions] = imageData;\n\n          Object.assign(upload, fileDimensions);\n\n          if (thumbnail && thumbnailDimensions) {\n            upload.image = thumbnailDimensions;\n            thumb = this.webex.internal.encryption.encryptBinary(thumbnail)\n              .then(({scr, cdata}) => {\n                upload.image.scr = scr;\n\n                return Promise.all([cdata, this.hiddenSpaceUrl]);\n              })\n              .then(([cdata, spaceUrl]) => this._upload(cdata, `${spaceUrl}/upload_sessions`))\n              .then((metadata) => {\n                upload.image.url = upload.image.scr.loc = metadata.downloadUrl;\n              });\n          }\n        }\n\n        return Promise.all([main, thumb]);\n      });\n\n\n    upload[PROMISE_SYMBOL] = promise;\n\n    proxyEvents(emitter, promise);\n\n    return promise;\n  },\n\n  /**\n   * Fetches the files from the share\n   * @returns {Array}\n   */\n  getFiles() {\n    const files = [];\n\n    for (const [key] of this.uploads) {\n      files.push(this.uploads.get(key)[FILE_SYMBOL]);\n    }\n\n    return files;\n  },\n\n\n  /**\n   * @param {File} file\n   * @param {string} uri\n   * @private\n   * @returns {Promise}\n   */\n  _upload(file, uri) {\n    const fileSize = file.length || file.size || file.byteLength;\n    const fileHash = sha256(file).toString();\n\n    return this.webex.upload({\n      uri,\n      file,\n      qs: {\n        transcode: true\n      },\n      phases: {\n        initialize: {fileSize},\n        upload: {\n          $url(session) {\n            return session.uploadUrl;\n          }\n        },\n        finalize: {\n          $uri(session) {\n            return session.finishUploadUrl;\n          },\n          body: {fileSize, fileHash}\n        }\n      }\n    });\n  },\n\n  /**\n   * Removes the specified file from the share (Does not currently delete the\n   * uploaded file)\n   * @param {File} file\n   * @returns {Promise}\n   */\n  remove(file) {\n    this.uploads.delete(file);\n\n    // Returns a promise for future-proofiness.\n    return Promise.resolve();\n  },\n\n  /**\n   * @private\n   * @returns {Promise<Object>}\n   */\n  prepare() {\n    if (!this.uploads.size) {\n      throw new Error('Cannot submit a share activity without atleast one file');\n    }\n\n    const activity = {\n      verb: 'share',\n      object: {\n        objectType: 'content',\n        displayName: this.object && this.object.displayName ? this.object.displayName : undefined,\n        content: this.object && this.object.content ? this.object.content : undefined,\n        mentions: this.object && this.object.mentions ? this.object.mentions : undefined,\n        files: {\n          items: []\n        }\n      },\n      clientTempId: this.clientTempId\n    };\n\n    const promises = [];\n\n    this.uploads.forEach((item) => {\n      activity.object.files.items.push(item);\n      promises.push(item[PROMISE_SYMBOL]);\n    });\n\n    activity.object.contentCategory = this._determineContentCategory(activity.object.files.items);\n\n    return Promise.all(promises)\n      .then(() => activity);\n  },\n\n  /**\n   * @param {Array} items\n   * @param {string} mimeType\n   * @private\n   * @returns {boolean}\n   */\n  _itemContainsActionWithMimeType(items, mimeType) {\n    return some(items.map((item) => some(item.actions, {mimeType})));\n  },\n\n  /**\n   * @param {Array} items\n   * @private\n   * @returns {string}\n   */\n  _determineContentCategory(items) {\n    // determine if the items contain an image\n    if (this._itemContainsActionWithMimeType(items, 'application/x-cisco-webex-whiteboard')) {\n      return 'documents';\n    }\n\n    const mimeTypes = filter(map(items, 'mimeType'));\n\n    if (mimeTypes.length !== items.length) {\n      return 'documents';\n    }\n\n    const contentCategory = mimeTypes[0].split('/').shift();\n\n    if (contentCategory !== 'video' && contentCategory !== 'image') {\n      return 'documents';\n    }\n\n    for (const mimeType of mimeTypes) {\n      if (mimeType.split('/').shift() !== contentCategory) {\n        return 'documents';\n      }\n    }\n\n    return `${contentCategory}s`;\n  },\n\n  /**\n   * @param {string} uri\n   * @returns {Promise}\n   */\n  _retrieveSpaceUrl(uri) {\n    return this.webex.request({\n      method: 'PUT',\n      uri\n    })\n      .then((res) => res.body.spaceUrl);\n  }\n});\n\n/**\n * Instantiates a ShareActivity\n * @param {Object} conversation\n * @param {ShareActivity|Object|array} object\n * @param {ProxyWebex} webex\n * @returns {ShareActivity}\n */\nShareActivity.create = function create(conversation, object, webex) {\n  if (object instanceof ShareActivity) {\n    return object;\n  }\n\n  let files;\n\n  if (object && object.object && object.object.files) {\n    files = object.object.files;\n    Reflect.deleteProperty(object.object, 'files');\n  }\n\n  const share = new ShareActivity(Object.assign({\n    conversation\n  }, object), {\n    parent: webex\n  });\n\n  files = files && files.items || files;\n  if (files) {\n    files.forEach((file) => share.add(file));\n  }\n\n  return share;\n};\n\nexport default ShareActivity;\n"]}