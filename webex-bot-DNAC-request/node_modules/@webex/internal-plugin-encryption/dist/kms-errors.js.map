{"version":3,"sources":["kms-errors.js"],"names":["KmsError","body","enumerable","value","reason","requestId","status","message","constructor","defaultMessage","Exception","KmsTimeoutError","request","timeout","method","uri","DryError","WebexHttpError","prototype","parse","_res","options","url","service","toUpperCase","resource","headers","trackingid"],"mappings":"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","file":"kms-errors.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport {Exception} from '@webex/common';\nimport {WebexHttpError} from '@webex/webex-core';\n\n/**\n * Error class for KMS errors\n */\nexport class KmsError extends Exception {\n  static defaultMessage = 'An unknown error occurred while communicating with the kms. This implies we received an error response without a body.';\n\n  /**\n   * @param {HttpResponse} body\n   * @returns {string}\n   */\n  parse(body) {\n    body = body.body || body;\n\n    Object.defineProperties(this, {\n      body: {\n        enumerable: false,\n        value: body\n      },\n      reason: {\n        enumerable: false,\n        value: body.reason\n      },\n      requestId: {\n        enumerable: false,\n        value: body.requestId\n      },\n      status: {\n        enumerable: false,\n        value: body.status\n      }\n    });\n\n    let message = typeof body === 'string' ? body : body.reason;\n\n    if (!message) {\n      message = this.constructor.defaultMessage;\n    }\n    if (body.status) {\n      message += `\\nKMS_RESPONSE_STATUS: ${body.status}`;\n    }\n    if (body.requestId) {\n      message += `\\nKMS_REQUEST_ID: ${body.requestId}`;\n    }\n\n    return message;\n  }\n}\n\n/**\n * Thrown when an expected KMSResponse is not received in a timely manner\n */\nexport class KmsTimeoutError extends KmsError {\n  /**\n   * @param {KmsRequest} options.request\n   * @param {KmsRequest} options.timeout\n   * @returns {string}\n   */\n  parse({request = {}, timeout} = {}) {\n    let message = `The KMS did not respond within ${timeout ? `${timeout} milliseconds` : 'a timely fashion'}`;\n\n    if (request) {\n      if (request.method && request.uri) {\n        message += `\\nKMS_REQUEST: ${request.method} ${request.uri}`;\n      }\n\n      if (request.requestId) {\n        message += `\\nKMS_REQUEST_ID: ${request.requestId}`;\n      }\n    }\n\n    return message;\n  }\n}\n\n/**\n * Emitted when a REST request includes an encrypter error\n */\nexport class DryError extends WebexHttpError {\n  static defaultMessage = 'An unknown error was received from a service that proxies to the KMS';\n\n  /**\n   * @param {WebexHttpError} reason\n   * @returns {string}\n   */\n  parse(reason) {\n    Reflect.apply(WebexHttpError.prototype.parse, this, [reason._res]);\n    const body = reason._res.body.message;\n\n    let message = body.reason || body;\n\n    if (!message) {\n      message = this.constructor.defaultMessage;\n    }\n    if (this.options.url) {\n      message += `\\n${this.options.method} ${this.options.url}`;\n    }\n    else if (this.options.uri) {\n      message += `\\n${this.options.method} ${this.options.uri}`;\n    }\n    else {\n      message += `\\n${this.options.method} ${this.options.service.toUpperCase()}/${this.options.resource}`;\n    }\n    message += `\\nWEBEX_TRACKING_ID: ${this.options.headers.trackingid}`;\n\n    if (body.status) {\n      message += `\\nKMS_RESPONSE_STATUS: ${body.status}`;\n    }\n    if (body.requestId) {\n      message += `\\nKMS_REQUEST_ID: ${body.requestId}`;\n    }\n\n    Object.defineProperties(this, {\n      reason: {\n        enumerable: false,\n        value: body.reason\n      },\n      requestId: {\n        enumerable: false,\n        value: body.requestId\n      },\n      status: {\n        enumerable: false,\n        value: body.status\n      }\n    });\n\n    return message;\n  }\n}\n"]}