'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _httpCore = require('@webex/http-core');

var _kmsErrors = require('./kms-errors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Interceptor (only to be used in test mode) intended to replay requests that
 * fail as a result of the test-user incompatibiliy in KMS.
 * @class
 */
/*!
 * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.
 */

var KmsDryErrorInterceptor = function (_Interceptor) {
  (0, _inherits3.default)(KmsDryErrorInterceptor, _Interceptor);

  function KmsDryErrorInterceptor() {
    (0, _classCallCheck3.default)(this, KmsDryErrorInterceptor);
    return (0, _possibleConstructorReturn3.default)(this, (KmsDryErrorInterceptor.__proto__ || (0, _getPrototypeOf2.default)(KmsDryErrorInterceptor)).apply(this, arguments));
  }

  (0, _createClass3.default)(KmsDryErrorInterceptor, [{
    key: 'onResponseError',


    /**
     * @param {Object} options
     * @param {Exception} reason
     * @returns {Promise}
     */
    value: function onResponseError(options, reason) {
      if (reason instanceof _kmsErrors.DryError && reason.message.match(/Failed to resolve authorization token in KmsMessage request for user/)) {
        this.webex.logger.error('DRY Request Failed due to kms/test-user flakiness');
        this.webex.logger.error(reason);

        return this.replay(options, reason);
      }

      return _promise2.default.reject(reason);
    }

    /**
     * Replays the request
     * @param {Object} options
     * @param {DryError} reason
     * @returns {Object}
     */

  }, {
    key: 'replay',
    value: function replay(options, reason) {
      if (options.replayCount) {
        options.replayCount += 1;
      } else {
        options.replayCount = 1;
      }

      if (options.replayCount > this.webex.config.maxAuthenticationReplays) {
        this.webex.logger.error('kms: failed after ' + this.webex.config.maxAuthenticationReplays + ' replay attempts');

        return _promise2.default.reject(reason);
      }

      this.webex.logger.info('kms: replaying request ' + options.replayCount + ' time');

      return this.webex.request(options);
    }
  }], [{
    key: 'create',

    /**
     * @returns {KmsDryErrorInterceptor}
     */
    value: function create() {
      return new KmsDryErrorInterceptor({ webex: this });
    }
  }]);
  return KmsDryErrorInterceptor;
}(_httpCore.Interceptor);

exports.default = KmsDryErrorInterceptor;
//# sourceMappingURL=kms-dry-error-interceptor.js.map
