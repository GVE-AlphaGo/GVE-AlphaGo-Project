{"version":3,"sources":["index.js"],"names":["default","KmsError","DryError","interceptors","process","env","NODE_ENV","KmsDryErrorInterceptor","create","Encryption","payloadTransformer","predicates","name","direction","test","ctx","options","resolve","body","kmsMessage","keyUris","length","resourceUri","includes","uri","extract","response","reason","Boolean","errorCode","transforms","fn","object","webex","internal","encryption","kms","prepareRequest","then","req","wrapped","decryptKmsMessage","promises","errors","map","error","description","desc","push","message","all","reject","config"],"mappings":"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","file":"index.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\n// Note: There's a bug where if bind gets replayed because of a timeout in which\n// the original request eventually completed, there'll be an error indicating\n// the key can't be bound (because it already has been). This could be mitigated\n// by using Promise.race to resolve replays (as more requests get enqueue for a\n// specific action, accept whichever one completes first).\n\nimport {registerInternalPlugin} from '@webex/webex-core';\nimport {has, isObject, isString} from 'lodash';\n\nimport Encryption from './encryption';\nimport config from './config';\nimport {DryError} from './kms-errors';\nimport '@webex/internal-plugin-device';\nimport '@webex/internal-plugin-mercury';\nimport KmsDryErrorInterceptor from './kms-dry-error-interceptor';\n\nlet interceptors;\n\nif (process.env.NODE_ENV === 'test') {\n  interceptors = {\n    KmsDryErrorInterceptor: KmsDryErrorInterceptor.create\n  };\n}\n\nregisterInternalPlugin('encryption', Encryption, {\n  payloadTransformer: {\n    predicates: [{\n      name: 'encryptKmsMessage',\n      direction: 'outbound',\n      // I don't see any practical way to reduce complexity here.\n      // eslint-disable-next-line complexity\n      test(ctx, options) {\n        if (!has(options, 'body.kmsMessage')) {\n          return Promise.resolve(false);\n        }\n\n        if (!isObject(options.body.kmsMessage)) {\n          return Promise.resolve(false);\n        }\n\n        // If this is a template for a kms message, assume another transform\n        // will fill it in later. This is a bit of a leaky abstraction, but the\n        // alternative is building a complex rules engine for controlling\n        // ordering of transforms\n        if (options.body.kmsMessage.keyUris && options.body.kmsMessage.keyUris.length === 0) {\n          return Promise.resolve(false);\n        }\n        if (options.body.kmsMessage.resourceUri && (options.body.kmsMessage.resourceUri.includes('<KRO>') || options.body.kmsMessage.resourceUri.includes('<KEYURL>'))) {\n          return Promise.resolve(false);\n        }\n        if (options.body.kmsMessage.uri && (options.body.kmsMessage.uri.includes('<KRO>') || options.body.kmsMessage.uri.includes('<KEYURL>'))) {\n          return Promise.resolve(false);\n        }\n\n        return Promise.resolve(true);\n      },\n      extract(options) {\n        return Promise.resolve(options.body);\n      }\n    }, {\n      name: 'decryptKmsMessage',\n      direction: 'inbound',\n      test(ctx, response) {\n        return Promise.resolve(has(response, 'body.kmsMessage') && isString(response.body.kmsMessage));\n      },\n      extract(response) {\n        return Promise.resolve(response.body);\n      }\n    }, {\n      name: 'decryptErrorResponse',\n      direction: 'inbound',\n      test(ctx, reason) {\n        return Promise.resolve(Boolean(reason.body && reason.body.errorCode === 1900000));\n      },\n      extract(reason) {\n        return Promise.resolve(reason);\n      }\n    }],\n    transforms: [{\n      name: 'encryptKmsMessage',\n      fn(ctx, object) {\n        if (!object) {\n          return Promise.resolve();\n        }\n\n        if (!object.kmsMessage) {\n          return Promise.resolve();\n        }\n\n        if (isString(object.kmsMessage)) {\n          return Promise.resolve();\n        }\n\n        return ctx.webex.internal.encryption.kms.prepareRequest(object.kmsMessage)\n          .then((req) => {\n            object.kmsMessage = req.wrapped;\n          });\n      }\n    }, {\n      name: 'decryptKmsMessage',\n      fn(ctx, object) {\n        return ctx.webex.internal.encryption.kms.decryptKmsMessage(object.kmsMessage)\n          .then((kmsMessage) => {\n            object.kmsMessage = kmsMessage;\n          });\n      }\n    }, {\n      name: 'decryptErrorResponse',\n      fn(ctx, reason) {\n        const promises = reason.body.errors.map((error) => ctx.webex.internal.encryption.kms.decryptKmsMessage(error.description)\n          .then((desc) => {\n            error.description = desc;\n          }));\n\n        promises.push(ctx.webex.internal.encryption.kms.decryptKmsMessage(reason.body.message)\n          .then((kmsMessage) => {\n            reason.body.message = kmsMessage;\n          }));\n\n        return Promise.all(promises)\n          .then(() => Promise.reject(new DryError(reason)));\n      }\n    }]\n  },\n  interceptors,\n  config\n});\n\nexport {default} from './encryption';\nexport {default as KMS} from './kms';\nexport {KmsError, DryError} from './kms-errors';\n"]}