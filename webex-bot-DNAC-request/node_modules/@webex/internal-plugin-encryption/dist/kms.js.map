{"version":3,"sources":["kms.js"],"names":["contexts","kmsDetails","partialContexts","consoleDebug","require","KMS","WebexPlugin","extend","keyFactory","uri","onBehalfOf","namespace","children","batcher","KMSBatcher","bindKey","kro","kroUri","key","keyUri","logger","info","reject","Error","request","method","resourceUri","then","res","createResource","userIds","keyUris","keys","reduce","uris","k","push","length","resource","addAuthorization","authIds","concat","authorizations","listAuthorizations","removeAuthorization","authId","userId","querystring","stringify","createUnboundKeys","count","all","map","asKey","fetchKey","ping","jose","JWK","jwk","prepareRequest","payload","isECDHRequest","includes","resolve","get","_getContext","context","req","Request","requestContext","_contextOnBehalfOf","wrap","serverKey","process","env","NODE_ENV","util","inspect","JSON","parse","depth","processKmsMessageEvent","event","encryption","kmsMessages","kmsMessage","index","_isECDHEMessage","isECDHMessage","Response","unwrap","catch","reason","error","stack","decryptKmsMessage","body","_getKMSStaticPubKey","kmsStaticPubKey","fields","split","header","base64url","decode","kid","timeout","config","kmsInitialTimeout","webex","internal","mercury","connect","TIMEOUT_SYMBOL","status","statusCode","message","match","warn","KMSError","trigger","ecdhMaxTimeout","nextTimeout","kmsMaxTimeout","delete","_getAuthorization","credentials","getUserToken","token","access_token","promise","_prepareContext","set","expiresIn","ephemeralKey","expirationDate","Date","now","authorization","clientInfo","credential","bearer","_getKMSCluster","_getKMSDetails","kmsCluster","details","service","device","rsaPublicKey","Context","caroots","clientId","url","serverInfo","createECDHKey","localECDHKey","cluster","toJSON","deriveEphemeralKey","originalContext","oneFlight"],"mappings":"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","file":"kms.js","sourcesContent":["/*!\n * Copyright (c) 2015-2019 Cisco Systems, Inc. See LICENSE file.\n */\n\nimport querystring from 'querystring';\nimport util from 'util';\n\nimport {safeSetTimeout} from '@webex/common-timers';\nimport {oneFlight} from '@webex/common';\nimport {WebexPlugin} from '@webex/webex-core';\nimport {Context, Request, Response} from 'node-kms';\nimport jose from 'node-jose';\nimport {omit} from 'lodash';\n\nimport KMSBatcher, {TIMEOUT_SYMBOL} from './kms-batcher';\nimport validateKMS, {KMSError} from './kms-certificate-validation';\n\nconst contexts = new WeakMap();\nconst kmsDetails = new WeakMap();\nconst partialContexts = new WeakMap();\n\nconst consoleDebug = require('debug')('kms');\n\n/**\n * @class\n */\nconst KMS = WebexPlugin.extend({\n  namespace: 'Encryption',\n\n  children: {\n    batcher: KMSBatcher\n  },\n\n  /**\n   * Binds a key to a resource\n   * @param {Object} options\n   * @param {KMSResourceObject} options.kro\n   * @param {string} options.kroUri\n   * @param {Key} options.key\n   * @param {string} options.keyUri\n   * @returns {Promise<Key>}\n   */\n  bindKey({\n    kro, kroUri, key, keyUri\n  }) {\n    kroUri = kroUri || kro.uri;\n    keyUri = keyUri || key.uri;\n\n    this.logger.info('kms: binding key to resource');\n\n    /* istanbul ignore if */\n    if (!kroUri) {\n      return Promise.reject(new Error('`kro` or `kroUri` is required'));\n    }\n\n    /* istanbul ignore if */\n    if (!keyUri) {\n      return Promise.reject(new Error('`key` or `keyUri` is required'));\n    }\n\n    return this.request({\n      method: 'update',\n      resourceUri: kroUri,\n      uri: keyUri\n    })\n      .then((res) => {\n        this.logger.info('kms: bound key to resource');\n\n        return res.key;\n      });\n  },\n\n  /**\n   * Creates a new KMS Resource\n   * @param {Object} options\n   * @param {Array<string>} options.userIds\n   * @param {Array<string>} options.keyUris\n   * @param {Key} options.key\n   * @param {Array<Keys>} options.keys\n   * @returns {Promise<KMSResourceObject>}\n   */\n  createResource({\n    userIds, keyUris, key, keys\n  }) {\n    keyUris = keyUris || [];\n    /* istanbul ignore if */\n    if (keys) {\n      keyUris = keys.reduce((uris, k) => {\n        uris.push(k.uri);\n\n        return uris;\n      }, keyUris);\n    }\n\n    /* istanbul ignore else */\n    if (key) {\n      keyUris.push(key.uri);\n    }\n\n    /* istanbul ignore if */\n    if (keyUris.length === 0) {\n      return Promise.reject(new Error('Cannot create KMS Resource without at least one keyUri'));\n    }\n\n    this.logger.info('kms: creating resource');\n\n    return this.request({\n      method: 'create',\n      uri: '/resources',\n      userIds,\n      keyUris\n    })\n      .then((res) => {\n        this.logger.info('kms: created resource');\n\n        return res.resource;\n      });\n  },\n\n  /**\n   * Authorizes a user or KRO to a KRO\n   * @param {Object} options\n   * @param {Array<string>} options.userIds\n   * @param {Array<string>} options.authIds interchangable with userIds\n   * @param {KMSResourceObject} options.kro the target kro\n   * @param {string} options.kroUri\n   * @returns {Promise<KMSAuthorizationObject>}\n   */\n  addAuthorization({\n    userIds, authIds, kro, kroUri\n  }) {\n    userIds = userIds || [];\n    kroUri = kroUri || kro.uri;\n\n    if (authIds) {\n      userIds = userIds.concat(authIds);\n    }\n\n    /* istanbul ignore if */\n    if (userIds.length === 0) {\n      return Promise.reject(new Error('Cannot add authorization without userIds or authIds'));\n    }\n\n    /* istanbul ignore if */\n    if (!kroUri) {\n      return Promise.reject(new Error('`kro` or `kroUri` is required'));\n    }\n\n    this.logger.info('kms: adding authorization to kms resource');\n\n    return this.request({\n      method: 'create',\n      uri: '/authorizations',\n      resourceUri: kroUri,\n      userIds\n    })\n      .then((res) => {\n        this.logger.info('kms: added authorization');\n\n        return res.authorizations;\n      });\n  },\n\n  /**\n   * Retrieve a list of users that have been authorized to the KRO\n   * @param {Object} options\n   * @param {KMSResourceObject} options.kro the target kro\n   * @param {string} options.kroUri\n   * @returns {Array<authId>}\n   */\n  listAuthorizations({kro, kroUri}) {\n    kroUri = kroUri || kro.uri;\n    /* istanbul ignore if */\n    if (!kroUri) {\n      return Promise.reject(new Error('`kro` or `kroUri` is required'));\n    }\n\n    return this.request({\n      method: 'retrieve',\n      uri: `${kroUri}/authorizations`\n    })\n      .then((res) => {\n        this.logger.info('kms: retrieved authorization list');\n\n        return res.authorizations;\n      });\n  },\n\n  /**\n   * Deauthorizes a user or KRO from a KRO\n   * @param {Object} options\n   * @param {string} options.userId\n   * @param {string} options.authId interchangable with userIds\n   * @param {KMSResourceObject} options.kro the target kro\n   * @param {string} options.kroUri\n   * @returns {Promise<KMSAuthorizationObject>}\n   */\n  removeAuthorization({\n    authId, userId, kro, kroUri\n  }) {\n    authId = authId || userId;\n    kroUri = kroUri || kro.uri;\n\n    /* istanbul ignore if */\n    if (!authId) {\n      return Promise.reject(new Error('Cannot remove authorization without authId'));\n    }\n\n    /* istanbul ignore if */\n    if (!kroUri) {\n      return Promise.reject(new Error('`kro` or `kroUri` is required'));\n    }\n\n    this.logger.info('kms: removing authorization from kms resource');\n\n    return this.request({\n      method: 'delete',\n      uri: `${kroUri}/authorizations?${querystring.stringify({authId})}`\n    })\n      .then((res) => {\n        this.logger.info('kms: removed authorization');\n\n        return res.authorizations;\n      });\n  },\n\n  /**\n   * Requests `count` unbound keys from the kms\n   * @param {Object} options\n   * @param {Number} options.count\n   * @returns {Array<Key>}\n   */\n  createUnboundKeys({count}) {\n    this.logger.info(`kms: request ${count} unbound keys`);\n\n    /* istanbul ignore if */\n    if (!count) {\n      return Promise.reject(new Error('`options.count` is required'));\n    }\n\n    return this.request({\n      method: 'create',\n      uri: '/keys',\n      count\n    })\n      .then((res) => {\n        this.logger.info('kms: received unbound keys');\n\n        return Promise.all(res.keys.map(this.asKey));\n      });\n  },\n\n  /**\n   * Fetches the specified key from the kms\n   * @param {Object} options\n   * @param {string} options.uri\n   * @param {string} options.onBehalfOf The id of a user, upon whose behalf, the key is to be retrieved or undefined if retrieval is for the active user\n   * @returns {Promise<Key>}\n   */\n  // Ideally, this would be done via the kms batcher, but other than request id,\n  // there isn't any other userful key in a kms response to match it to a\n  // request. as such, we need the batcher to group requests, but one flight to\n  // make sure we don't make the same request multiple times.\n  @oneFlight({\n    keyFactory: ({uri, onBehalfOf}) => `${uri}/${onBehalfOf}`\n  })\n  fetchKey({uri, onBehalfOf}) {\n    /* istanbul ignore if */\n    if (!uri) {\n      return Promise.reject(new Error('`options.uri` is required'));\n    }\n\n    this.logger.info('kms: fetching key');\n\n    return this.request({\n      method: 'retrieve',\n      uri\n    }, {onBehalfOf})\n      .then((res) => {\n        this.logger.info('kms: fetched key');\n\n        return this.asKey(res.key);\n      });\n  },\n\n  /**\n   * Pings the kms. Mostly for testing\n   * @returns {Promise}\n   */\n  ping() {\n    return this.request({\n      method: 'update',\n      uri: '/ping'\n    });\n  },\n\n  /**\n   * Ensures a key obect is Key instance\n   * @param {Object} key\n   * @returns {Promise<Key>}\n   */\n  asKey(key) {\n    return jose.JWK.asKey(key.jwk)\n      .then((jwk) => {\n        key.jwk = jwk;\n\n        return key;\n      });\n  },\n\n  /**\n   * Adds appropriate metadata to the KMS request\n   * @param {Object} payload\n   * @param {Object} onBehalfOf Optional parameter to prepare the request on behalf of another user\n   * @returns {Promise<KMS.Request>}\n   */\n  prepareRequest(payload, onBehalfOf) {\n    const isECDHRequest = payload.method === 'create' && payload.uri.includes('/ecdhe');\n\n    return Promise.resolve(isECDHRequest ? partialContexts.get(this) : this._getContext())\n      .then((context) => {\n        this.logger.info(`kms: wrapping ${isECDHRequest ? 'ephemeral key' : 'kms'} request`);\n        const req = new Request(payload);\n        let requestContext = context;\n\n        if (onBehalfOf) {\n          requestContext = this._contextOnBehalfOf(context, onBehalfOf);\n        }\n\n        return req.wrap(requestContext, {serverKey: isECDHRequest})\n          .then(() => {\n            /* istanbul ignore else */\n            if (process.env.NODE_ENV !== 'production') {\n              this.logger.info('kms: request payload', util.inspect(omit(JSON.parse(JSON.stringify(req)), 'wrapped'), {depth: null}));\n            }\n\n            return req;\n          });\n      });\n  },\n\n  /**\n   * Accepts a kms message event, decrypts it, and passes it to the batcher\n   * @param {Object} event\n   * @returns {Promise<Object>}\n   */\n  processKmsMessageEvent(event) {\n    this.logger.info('kms: received kms message');\n\n    return Promise.all(event.encryption.kmsMessages.map((kmsMessage, index) => this._isECDHEMessage(kmsMessage)\n      .then((isECDHMessage) => {\n        this.logger.info(`kms: received ${isECDHMessage ? 'ecdhe' : 'normal'} message`);\n        const res = new Response(kmsMessage);\n\n        return Promise.resolve(isECDHMessage ? partialContexts.get(this) : contexts.get(this))\n          // eslint-disable-next-line max-nested-callbacks\n          .then((context) => res.unwrap(context))\n          // eslint-disable-next-line max-nested-callbacks\n          .then(() => {\n            if (process.env.NODE_ENV !== 'production') {\n              this.logger.info('kms: response payload', util.inspect(omit(JSON.parse(JSON.stringify(res)), 'wrapped'), {depth: null}));\n            }\n          })\n          // eslint-disable-next-line max-nested-callbacks\n          .then(() => { event.encryption.kmsMessages[index] = res; })\n          // eslint-disable-next-line max-nested-callbacks\n          .then(() => res);\n      })))\n      .then(() => this.batcher.processKmsMessageEvent(event))\n      .catch((reason) => {\n        this.logger.error('kms: decrypt failed', reason.stack);\n\n        return Promise.reject(reason);\n      })\n      .then(() => event);\n  },\n\n  /**\n   * Decrypts a kms message\n   * @param {Object} kmsMessage\n   * @returns {Promise<Object>}\n   */\n  decryptKmsMessage(kmsMessage) {\n    const res = new Response(kmsMessage);\n\n    return contexts.get(this)\n      .then((context) => res.unwrap(context))\n      .then(() => res.body);\n  },\n\n  /**\n   * Determines if the kms message is an ecdhe message or a normal message\n   * @param {Object} kmsMessage\n   * @returns {Promise<boolean>}\n   */\n  _isECDHEMessage(kmsMessage) {\n    return this._getKMSStaticPubKey()\n      .then((kmsStaticPubKey) => {\n        const fields = kmsMessage.split('.');\n\n        if (fields.length !== 3) {\n          return false;\n        }\n\n        const header = JSON.parse(jose.util.base64url.decode(fields[0]));\n\n        return header.kid === kmsStaticPubKey.kid;\n      });\n  },\n\n  /**\n   * Sends a request to the kms\n   * @param {Object} payload\n   * @param {Object} options\n   * @param {Number} options.timeout (internal)\n   * @param {string} options.onBehalfOf Run the request on behalf of another user (UUID), used in compliance scenarios\n   * @returns {Promise<Object>}\n   */\n  request(payload, {timeout, onBehalfOf} = {}) {\n    timeout = timeout || this.config.kmsInitialTimeout;\n\n    // Note: this should only happen when we're using the async kms batcher;\n    // once we implement the sync batcher, this'll need to be smarter.\n    return this.webex.internal.mercury.connect()\n      .then(() => this.prepareRequest(payload, onBehalfOf))\n      .then((req) => {\n        req[TIMEOUT_SYMBOL] = timeout;\n\n        return this.batcher.request(req);\n      })\n      // High complexity is due to attempt at test mode resiliency\n      // eslint-disable-next-line complexity\n      .catch((reason) => {\n        if (process.env.NODE_ENV === 'test' && (reason.status === 403 || reason.statusCode === 403) && reason.message.match(/Failed to resolve authorization token in KmsMessage request for user/)) {\n          this.logger.warn('kms: rerequested key due to test-mode kms auth failure');\n\n          return this.request(payload, {onBehalfOf});\n        }\n\n        // KMS Error. Notify the user\n        if (reason instanceof KMSError) {\n          this.webex.trigger('client:InvalidRequestError');\n\n          return Promise.reject(reason);\n        }\n\n        // Ideally, most or all of the code below would go in kms-batcher, but\n        // but batching needs at least one more round of refactoring for that to\n        // work.\n        if (!reason.statusCode && !reason.status) {\n          /* istanbul ignore else */\n          if (process.env.NODE_ENV !== 'production') {\n            /* istanbul ignore next: reason.stack vs stack difficult to control in test */\n            this.logger.info('kms: request error', reason.stack || reason);\n          }\n\n          consoleDebug(`timeout ${timeout}`);\n          timeout *= 2;\n\n          if (timeout >= this.config.ecdhMaxTimeout) {\n            this.logger.info('kms: exceeded maximum KMS request retries');\n\n            return Promise.reject(reason);\n          }\n\n          // Peek ahead to make sure we don't reset the timeout if the next timeout\n          // will exceed the maximum timeout for renegotiating ECDH keys.\n          const nextTimeout = timeout * 2;\n\n          if (timeout >= this.config.kmsMaxTimeout && nextTimeout < this.config.ecdhMaxTimeout) {\n            this.logger.info('kms: exceeded maximum KMS request retries; negotiating new ecdh key');\n\n            /* istanbul ignore else */\n            if (process.env.NODE_ENV !== 'production') {\n              this.logger.info('kms: timeout/maxtimeout', timeout, this.config.kmsMaxTimeout);\n            }\n\n            contexts.delete(this);\n            timeout = 0;\n          }\n\n          return this.request(payload, {timeout, onBehalfOf});\n        }\n\n        return Promise.reject(reason);\n      });\n  },\n\n  /**\n   * @private\n   * @returns {Promise<string>}\n   */\n  _getAuthorization() {\n    return this.webex.credentials.getUserToken('spark:kms')\n      .then((token) => token.access_token);\n  },\n\n  @oneFlight\n  /**\n   * @private\n   * @param {String} onBehalfOf create context on behalf of another user, undefined when this is not necessary\n   * @returns {Promise<Object>}\n   */\n  _getContext() {\n    let promise = contexts.get(this);\n\n    if (!promise) {\n      promise = this._prepareContext();\n      contexts.set(this, promise);\n      promise.then((context) => {\n        const expiresIn = context.ephemeralKey.expirationDate - Date.now() - 30000;\n\n        safeSetTimeout(() => contexts.delete(this), expiresIn);\n      });\n    }\n\n    return Promise.all([\n      promise,\n      this._getAuthorization()\n    ])\n      .then(([context, authorization]) => {\n        context.clientInfo.credential.bearer = authorization;\n\n        return context;\n      });\n  },\n\n  /**\n   * @private\n   * @returns {Promise<Object>}\n   */\n  _getKMSCluster() {\n    this.logger.info('kms: retrieving KMS cluster');\n\n    return this._getKMSDetails()\n      .then(({kmsCluster}) => kmsCluster);\n  },\n\n  /**\n   * @private\n   * @returns {Promise<Object>}\n   */\n  _getKMSDetails() {\n    let details = kmsDetails.get(this);\n\n    if (!details) {\n      this.logger.info('kms: fetching KMS details');\n      details = this.webex.request({\n        service: 'encryption',\n        resource: `/kms/${this.webex.internal.device.userId}`\n      })\n        .then((res) => {\n          this.logger.info('kms: fetched KMS details');\n          const {body} = res;\n\n          body.rsaPublicKey = JSON.parse(body.rsaPublicKey);\n\n          return body;\n        })\n        .catch((reason) => {\n          this.logger.error('kms: failed to fetch KMS details', reason);\n\n          return Promise.reject(reason);\n        });\n\n      kmsDetails.set(this, details);\n    }\n\n    return details;\n  },\n\n  /**\n   * @private\n   * @returns {Promise<Object>}\n   */\n  _getKMSStaticPubKey() {\n    this.logger.info('kms: retrieving KMS static public key');\n\n    return this._getKMSDetails()\n      .then(({rsaPublicKey}) => rsaPublicKey);\n  },\n\n  /**\n   * @private\n   * @returns {Promise<Object>}\n   */\n  _prepareContext() {\n    this.logger.info('kms: creating context');\n    const context = new Context();\n\n    return Promise.all([\n      this._getKMSStaticPubKey().then(validateKMS(this.config.caroots)),\n      this._getAuthorization()\n    ])\n      .then(([kmsStaticPubKey, authorization]) => {\n        context.clientInfo = {\n          clientId: this.webex.internal.device.url,\n          credential: {\n            userId: this.webex.internal.device.userId,\n            bearer: authorization\n          }\n        };\n\n        context.serverInfo = {\n          key: kmsStaticPubKey\n        };\n\n        this.logger.info('kms: creating local ephemeral key');\n\n        return context.createECDHKey();\n      })\n      .then((localECDHKey) => {\n        context.ephemeralKey = localECDHKey;\n        partialContexts.set(this, context);\n\n        return Promise.all([localECDHKey.asKey(), this._getKMSCluster()]);\n      })\n      .then(([localECDHKey, cluster]) => {\n        this.logger.info('kms: submitting ephemeral key request');\n\n        return this.request({\n          uri: `${cluster}/ecdhe`,\n          method: 'create',\n          jwk: localECDHKey.toJSON()\n        });\n      })\n      .then((res) => {\n        this.logger.info('kms: deriving final ephemeral key');\n\n        return context.deriveEphemeralKey(res.key);\n      })\n      .then((key) => {\n        context.ephemeralKey = key;\n        partialContexts.delete(this);\n        this.logger.info('kms: derived final ephemeral key');\n\n        return context;\n      })\n      .catch((reason) => {\n        this.logger.error('kms: failed to negotiate ephemeral key', reason);\n\n        return Promise.reject(reason);\n      });\n  },\n\n  /**\n   * KMS 'retrieve' requests can be made on behalf of another user. This is useful\n   * for scenarios such as eDiscovery. i.e. Where an authorized compliance officer is\n   * entitled to retrieve content generated by any organisational user.\n   * As the KMSContext is cached, updating it will affect separate requests. Hence when\n   * making a request onBehalfOf another user create a new context for just this request.\n   * However this context will be 'light' as it only needs to change one field.\n   * @param {Object} originalContext - The base context to 'copy'\n   * @param {String} onBehalfOf - The user specified in the new context\n   * @returns {Context} A 'copy' of the existing context with a new user specified\n   * @private\n   */\n  _contextOnBehalfOf(originalContext, onBehalfOf) {\n    const context = new Context();\n\n    context.clientInfo = context.clientInfo = {\n      clientId: originalContext.clientInfo.clientId,\n      credential: {\n        userId: onBehalfOf,\n        bearer: originalContext.clientInfo.credential.bearer\n      }\n    };\n    context.serverInfo = originalContext.serverInfo;\n    context.ephemeralKey = originalContext.ephemeralKey;\n\n    return context;\n  }\n});\n\nexport default KMS;\n"]}